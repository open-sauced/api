var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AllContributionsCount.html",[0,3.049,1,3.995]],["body/interfaces/AllContributionsCount.html",[0,1.758,1,5.14,2,2.186,3,0.021,4,0.021,5,0.021,6,1.191,7,2.006,8,3.174,9,2.644,10,0.106,11,0.645,12,5.902,13,0.596,14,0.115,15,0.005,16,0.076,17,0.826,18,1.368,19,0.393,20,1.421,21,3.764,22,0.635,23,1.154,24,0.843,25,0.972,26,1.026,27,1.934,28,2.296,29,2.089,30,3.059,31,1.295,32,2.303,33,2.303,34,2.186,35,2.186,36,2.449,37,2.781,38,2.089,39,4.292,40,5.466,41,2.449,42,2.089,43,3.644,44,3.644,45,3.459,46,2.449,47,2.089,48,2.303,49,2.303,50,5.192,51,2.644,52,2.303,53,2.644,54,3.459,55,2.449,56,3.459,57,2.303,58,2.449,59,0.024,60,0.1,61,2.089,62,0.803,63,2.449,64,0.887,65,1.728,66,2.449,67,1.231,68,2.419,69,2.124,70,2.449,71,1.446,72,1.353,73,2.644,74,3.623,75,6.606,76,0.939,77,2.084,78,4.136,79,5.902,80,3.059,81,2.644,82,3.444,83,3.291,84,2.644,85,4.204,86,6.333,87,4.808,88,2.296,89,4.184,90,3.938,91,3.237,92,4.808,93,2.567,94,5.404,95,4.808,96,7.646,97,2.449,98,3.172,99,5.399,100,3.645,101,2.006,102,2.123,103,2.644,104,3.644,105,2.644,106,3.459,107,2.644,108,5.868,109,3.644,110,6.188,111,4.184,112,2.644,113,4.184,114,2.644,115,4.184,116,2.644,117,1.076,118,2.449,119,1.168,120,2.644,121,1.596,122,1.861,123,2.644,124,2.296,125,2.644,126,2.644,127,6.43,128,2.644,129,5.192,130,4.184,131,4.184,132,4.184,133,4.184,134,2.644,135,4.184,136,2.644,137,4.521,138,2.644,139,2.644,140,2.164,141,2.644,142,2.793,143,1.908,144,2.644,145,2.644,146,2.186,147,2.186,148,1.811,149,2.186,150,2.644,151,2.644,152,4.184,153,2.644,154,5.902,155,2.644,156,5.362,157,2.644,158,2.644,159,6.659,160,6.421,161,2.644,162,2.644,163,2.644,164,5.192,165,2.644,166,2.644,167,2.644,168,2.644,169,5.192,170,2.644,171,2.644,172,2.644,173,2.644,174,5.192,175,2.644,176,2.303,177,2.303,178,2.644,179,2.644,180,2.644,181,2.186,182,2.644,183,2.644,184,2.644,185,2.644,186,1.087,187,2.303,188,2.644,189,2.089,190,2.449,191,2.449,192,1.318,193,2.644,194,1.934,195,2.644,196,1.295,197,1.584,198,1.934,199,2.644,200,1.623,201,3.875,202,1.915,203,2.186,204,2.644,205,2.449,206,2.644,207,0.553,208,2.449,209,3.875,210,2.644,211,2.644,212,1.869,213,1.934,214,2.644,215,2.644,216,2.644,217,2.644,218,2.644,219,2.644,220,2.644,221,7.163,222,2.644,223,2.449,224,2.089,225,2.644,226,5.955,227,6.333,228,5.654,229,5.192,230,5.192,231,5.192,232,5.192,233,5.192,234,4.097,235,5.192,236,2.644,237,2.644,238,0.002,239,0.002]],["title/modules/ApiServicesModule.html",[240,1.281,241,3.049]],["body/modules/ApiServicesModule.html",[3,0.054,4,0.054,5,0.054,15,0.004,16,0.073,19,1.004,59,0.061,60,0.254,238,0.004,239,0.004,240,2.253,241,6.228,242,2.777,243,3.469,244,6.757,245,6.757,246,6.757,247,5.768,248,3.469,249,2.861,250,2.818,251,7.516,252,7.516,253,3.635,254,3.755,255,7.516]],["title/modules/AppModule.html",[240,1.281,256,3.995]],["body/modules/AppModule.html",[3,0.018,4,0.018,5,0.018,7,1.726,8,1.223,14,0.235,15,0.005,16,0.086,19,0.338,22,0.546,24,0.725,27,2.711,29,1.797,59,0.02,60,0.086,62,0.691,64,1.243,65,1.374,74,1.396,102,1.391,121,1.442,196,2.65,207,1.246,238,0.002,239,0.002,240,1.035,242,0.935,243,1.594,248,1.594,249,0.963,250,0.949,253,1.025,256,8.253,257,2.275,258,2.275,259,5.049,260,5.283,261,5.283,262,5.283,263,5.049,264,4.848,265,5.283,266,5.283,267,5.283,268,5.283,269,5.283,270,5.283,271,5.283,272,4.672,273,5.049,274,4.848,275,4.248,276,5.283,277,5.283,278,5.049,279,5.283,280,5.283,281,5.049,282,5.283,283,4.248,284,5.049,285,5.283,286,5.283,287,2.53,288,2.925,289,0.515,290,2.53,291,4.123,292,6.019,293,0.112,294,2.53,295,0.498,296,0.666,297,0.224,298,2.53,299,0.515,300,1.726,301,2.53,302,2.53,303,1.155,304,5.959,305,4.911,306,1.396,307,3.707,308,2.107,309,3.707,310,2.107,311,2.53,312,1.881,313,4.123,314,6.019,315,6.019,316,2.53,317,2.53,318,2.107,319,2.107,320,2.107,321,3.707,322,3.707,323,3.707,324,3.707,325,3.707,326,3.707,327,3.707,328,3.707,329,3.707,330,3.707,331,4.123,332,1.726,333,2.53,334,1.882,335,1.332,336,1.816,337,1.332,338,2.812,339,2.53,340,2.62,341,1.797,342,2.812,343,1.981,344,2.812,345,1.981,346,2.812,347,1.981,348,2.812,349,2.53,350,2.969,351,2.812,352,2.53,353,2.711,354,2.53,355,2.275,356,2.53,357,2.53,358,2.53,359,2.53,360,2.53,361,1.726,362,2.107,363,2.53,364,4.123,365,2.107,366,2.53,367,2.53,368,2.396,369,2.107,370,2.929,371,4.123,372,3.065,373,2.275,374,3.065,375,3.065,376,2.53,377,2.107,378,1.726,379,2.53,380,2.53,381,3.229,382,2.275,383,3.065,384,2.107,385,3.065,386,2.53,387,1.432,388,2.107,389,2.334,390,3.213,391,1.512,392,2.929,393,1.381,394,1.981,395,2.334,396,4.762,397,1.512,398,2.53,399,2.812,400,1.881,401,2.711,402,2.464,403,2.812,404,2.275,405,2.538,406,1.302,407,1.663,408,2.929,409,1.797,410,3.229,411,1.432,412,2.929,413,1.981,414,2.929,415,1.981,416,2.929,417,1.981,418,2.53,419,2.711,420,2.107,421,2.53,422,0.949,423,1.432,424,1.981,425,2.53,426,4.123,427,2.53,428,1.981,429,2.275,430,2.53,431,2.275,432,2.812,433,3.065,434,1.881,435,3.065,436,2.53,437,2.53,438,2.275,439,2.812,440,2.107,441,2.538,442,2.53,443,2.929,444,5.411,445,3.065,446,2.107,447,3.065,448,2.107,449,2.929,450,1.981,451,2.53,452,2.53,453,2.53,454,2.53,455,2.789,456,5.219,457,6.019,458,4.123,459,9.702,460,2.53,461,4.086,462,2.53,463,4.086,464,2.53,465,2.811,466,2.53,467,4.692,468,2.53,469,4.086,470,2.53,471,5.219,472,2.6,473,5.219,474,3.56,475,4.123,476,4.692,477,4.692,478,2.53,479,5.219,480,3.707,481,2.53,482,6.019,483,3.229,484,2.53,485,2.53,486,2.53,487,2.53,488,2.53,489,2.53,490,2.53,491,3.433,492,2.53,493,2.53,494,2.53,495,2.53,496,2.53,497,2.53,498,2.53,499,2.53,500,2.53,501,2.53,502,2.53,503,2.53,504,1.881,505,2.53,506,2.53,507,1.981,508,2.53,509,2.53,510,2.53,511,2.53,512,2.53,513,2.53,514,2.53,515,2.53,516,2.53,517,2.275,518,2.53,519,2.53,520,1.663,521,2.107,522,1.797,523,1.881,524,2.53,525,2.107,526,1.797,527,2.53,528,1.391,529,2.53,530,2.53,531,2.53,532,2.53]],["title/classes/ApplyUserCouponDto.html",[60,0.173,533,4.248]],["body/classes/ApplyUserCouponDto.html",[3,0.054,4,0.054,5,0.054,10,0.269,11,1.239,14,0.374,15,0.004,16,0.072,59,0.06,60,0.303,76,1.169,207,1.681,238,0.004,239,0.004,293,0.33,533,7.446,534,1.875,535,8.942,536,7.47,537,9.571,538,0.782,539,2.843,540,6.647,541,4.505,542,1.76,543,7.47,544,7.47,545,3.257,546,1.01,547,3.404,548,2.224,549,0.938,550,6.22]],["title/controllers/AuthController.html",[551,1.194,552,4.248]],["body/controllers/AuthController.html",[3,0.019,4,0.019,5,0.019,10,0.095,13,1.004,14,0.379,15,0.005,16,0.075,19,0.353,59,0.021,60,0.089,62,0.721,65,1.626,68,1.881,71,1.561,72,2.051,76,0.311,77,3,85,1.229,102,1.138,122,2.067,207,1.922,238,0.002,239,0.002,289,0.87,293,0.363,295,1.615,296,0.866,297,0.725,299,1.672,312,1.965,336,3.194,337,1.391,526,1.877,533,6.833,538,0.859,540,5.04,546,0.357,549,0.998,551,0.618,552,3.557,553,0.73,554,2.643,555,0.977,556,3.997,557,6.175,558,6.175,559,4.272,560,6.175,561,6.175,562,6.175,563,6.779,564,6.779,565,6.175,566,2.643,567,2.643,568,3.345,569,3.841,570,4.624,571,2.808,572,5.645,573,5.543,574,3.841,575,6.175,576,2.643,577,3.315,578,2.643,579,2.643,580,3.176,581,3.557,582,2.643,583,2.896,584,4.834,585,2.643,586,2.643,587,6.355,588,2.643,589,4.272,590,6.521,591,2.643,592,2.643,593,2.643,594,2.643,595,2.643,596,3.841,597,6.175,598,5.377,599,5.377,600,2.714,601,2.643,602,2.643,603,4.134,604,5.142,605,2.643,606,5.355,607,5.142,608,5.598,609,4.075,610,2.643,611,2.643,612,2.643,613,6.175,614,2.643,615,2.643,616,7.869,617,6.039,618,2.643,619,5.306,620,6.175,621,4.272,622,2.643,623,2.643,624,6.039,625,2.643,626,5.04,627,2.643,628,2.643,629,2.643,630,7.379,631,2.643,632,2.643,633,2.643,634,1.877,635,1.304,636,1.185,637,3.848,638,3.568,639,3.746,640,3.414,641,3.161,642,0.977,643,1.877,644,2.967,645,2.069,646,3.819,647,2.376,648,3.819,649,2.376,650,5.377,651,2.643,652,2.643,653,2.643,654,2.643,655,2.643,656,3.997,657,2.643,658,5.645,659,2.643,660,2.643,661,2.643,662,1.124,663,2.376,664,2.376,665,2.643,666,2.643,667,2.643,668,0.922,669,2.643,670,3.746,671,3.078,672,2.643,673,2.643,674,3.535,675,4.272,676,3.841,677,3.841,678,1.579,679,1.758,680,4.272,681,5.377,682,1.108,683,3.841,684,5.377,685,1.627,686,2.643,687,1.459,688,0.749,689,2.376,690,3.841,691,3.841,692,3.841,693,3.557,694,3.345,695,3.557,696,3.557,697,3.557,698,2.108,699,3.557,700,3.557,701,3.557,702,3.841,703,3.841,704,3.841,705,2.643,706,1.459,707,1.803,708,2.643,709,2.643,710,2.643,711,2.643,712,2.643,713,2.643,714,4.272,715,1.877,716,2.643,717,2.643,718,2.643,719,2.643,720,2.643,721,2.643,722,2.643,723,2.643,724,3.557,725,2.643,726,4.834,727,2.643,728,2.643,729,2.643,730,2.643,731,2.643,732,2.643,733,2.643,734,2.643,735,2.643,736,2.643,737,2.643,738,2.643,739,2.643,740,4.21,741,2.643,742,2.643,743,2.643,744,2.643,745,2.069,746,2.643,747,2.643,748,2.643,749,2.643,750,2.643,751,2.643]],["title/modules/AuthModule.html",[240,1.281,259,3.624]],["body/modules/AuthModule.html",[3,0.045,4,0.045,5,0.045,15,0.005,16,0.083,19,0.827,59,0.05,60,0.209,207,1.163,238,0.003,239,0.003,240,1.997,242,2.286,243,3.074,248,3.074,249,2.355,250,2.32,253,3.222,254,3.328,259,7.607,263,6.981,264,6.703,283,5.873,284,6.981,288,3.274,361,4.22,372,4.599,373,5.562,377,5.151,431,5.562,552,7.321,553,2.198,662,4.442,663,5.562,752,5.562,753,5.562,754,5.562,755,5.562,756,6.981,757,8.175,758,6.186,759,7.954,760,5.151,761,5.562,762,6.186,763,6.186]],["title/classes/BakeRepoDto.html",[60,0.173,764,3.624]],["body/classes/BakeRepoDto.html",[3,0.05,4,0.05,5,0.05,10,0.248,11,1.179,14,0.394,15,0.004,16,0.069,59,0.056,60,0.288,76,1.137,238,0.004,239,0.004,293,0.376,472,2.214,534,1.728,538,0.891,539,3.238,542,1.899,545,3.363,546,0.931,547,3.238,548,2.049,549,1.068,668,2.969,698,4.89,764,6.043,765,9.234,766,6.882,767,7.761,768,2.666,769,7.649,770,6.324,771,6.187,772,6.882,773,4.664,774,8.507,775,5.803,776,8.507,777,8.507,778,5.116,779,6.882,780,5.592,781,3.707]],["title/controllers/BlogSummaryController.html",[551,1.194,782,4.248]],["body/controllers/BlogSummaryController.html",[3,0.046,4,0.046,5,0.046,10,0.231,14,0.318,15,0.005,16,0.078,19,0.858,59,0.052,60,0.218,68,1.521,71,1.222,72,1.844,102,1.712,122,1.671,238,0.003,239,0.003,289,1.66,293,0.284,295,1.264,296,0.646,297,0.568,299,1.309,393,2.151,528,1.712,538,0.673,546,0.869,549,0.807,551,1.503,553,1.775,555,2.374,568,3.611,603,3.236,635,3.17,636,2.88,637,3.72,638,4.289,641,3.056,642,2.374,662,2.733,668,2.242,670,2.933,671,2.409,782,6.785,783,7.326,784,5.776,785,6.424,786,8.149,787,6.424,788,7.771,789,5.776,790,7.326,791,5.178,792,7.326,793,8.149,794,6.424,795,4.289,796,3.636,797,5.776,798,8.149,799,1.987,800,5.017,801,4.194,802,2.988,803,2.988,804,7.007,805,5.03,806,6.652,807,5.03,808,6.424,809,6.424,810,2.306,811,5.776,812,6.424,813,6.424,814,2.445]],["title/modules/BlogSummaryModule.html",[240,1.281,260,3.792]],["body/modules/BlogSummaryModule.html",[3,0.051,4,0.051,5,0.051,15,0.004,16,0.079,19,0.948,59,0.057,60,0.24,238,0.004,239,0.004,240,2.176,242,2.622,243,3.35,248,3.35,249,2.701,250,2.661,253,3.51,254,3.627,260,7.786,272,6.686,288,3.568,422,2.661,423,4.015,424,5.555,553,2.395,782,7.793,783,6.379,804,5.555,806,7.904,807,5.555,815,6.379,816,6.379,817,6.379,818,7.095,819,6.379,820,5.04,821,6.379]],["title/injectables/BlogSummaryService.html",[17,0.905,806,3.792]],["body/injectables/BlogSummaryService.html",[3,0.043,4,0.043,5,0.043,10,0.214,13,0.892,14,0.337,15,0.005,16,0.07,17,1.377,19,0.796,59,0.048,60,0.202,62,1.626,65,2.273,68,1.837,71,1.476,72,1.779,74,3.287,76,1.146,198,3.915,238,0.003,239,0.003,289,1.581,293,0.381,295,1.699,296,0.868,297,0.763,299,1.581,422,2.233,423,3.371,522,4.231,568,3.238,687,3.287,706,3.287,788,7.163,790,6.978,791,3.784,799,2.401,803,2.77,804,7.428,805,4.663,806,5.769,810,2.138,822,1.891,823,9.148,824,5.355,825,5.513,826,4.231,827,5.813,828,5.355,829,7.761,830,5.956,831,5.769,832,6.013,833,6.739,834,5.355,835,5.315,836,4.062,837,4.231,838,4.231,839,3.915,840,4.427,841,5.355,842,2.67,843,4.231,844,4.427,845,4.427,846,4.427,847,4.427,848,4.959,849,4.062,850,4.663,851,5.355,852,5.355,853,4.231,854,5.675,855,3.559,856,5.956,857,5.956,858,5.513,859,4.231,860,4.427,861,5.355,862,4.959,863,4.231,864,5.048,865,3.666,866,4.231,867,4.231]],["title/interfaces/ChatResponse.html",[0,3.049,868,4.248]],["body/interfaces/ChatResponse.html",[0,3.793,2,4.718,3,0.046,4,0.046,5,0.046,10,0.229,11,1.121,13,0.655,14,0.366,15,0.005,16,0.072,17,1.435,19,0.848,59,0.051,60,0.215,68,2.106,71,1.207,72,1.308,76,1.049,102,1.691,122,2.103,146,4.718,147,4.718,148,3.907,149,4.718,186,2.345,207,1.193,238,0.003,239,0.003,305,5.036,306,3.503,423,3.592,523,4.718,603,3.197,635,3.131,674,5.315,810,2.278,814,2.416,827,3.793,849,4.329,854,6.159,868,7.409,869,5.284,870,5.706,871,8.424,872,6.331,873,8.895,874,5.706,875,5.706,876,3.689,877,5.706,878,7.27,879,5.85,880,5.706,881,5.706,882,4.033,883,5.706,884,5.706,885,4.718,886,5.706,887,5.284,888,5.706,889,5.706,890,5.706,891,1.963,892,5.706,893,4.969,894,5.706,895,5.706,896,1.798,897,5.706,898,5.706,899,3.592,900,5.706,901,5.706,902,5.706]],["title/controllers/CodeExplanationController.html",[551,1.194,903,4.248]],["body/controllers/CodeExplanationController.html",[3,0.046,4,0.046,5,0.046,10,0.232,14,0.318,15,0.005,16,0.079,19,0.86,59,0.052,60,0.218,68,1.523,71,1.224,72,1.846,102,1.715,122,1.674,197,3.467,238,0.003,239,0.003,289,1.662,293,0.284,295,1.267,296,0.647,297,0.569,299,1.311,393,2.155,538,0.674,541,4.512,546,0.87,549,0.808,551,1.506,553,1.778,555,2.378,568,2.887,603,3.242,635,3.175,636,2.885,637,3.724,638,4.294,641,3.059,642,2.378,662,2.738,668,2.246,670,2.938,671,2.413,795,4.294,796,3.643,799,1.991,800,5.022,801,4.199,802,2.993,803,2.993,810,2.31,814,2.45,903,6.792,904,3.592,905,5.795,906,6.436,907,3.962,908,6.387,909,6.436,910,7.991,911,6.436,912,8.158,913,6.064,914,7.335,915,5.022,916,5.359,917,6.436,918,5.786,919,6.658,920,5.786,921,4.784,922,4.784,923,6.436,924,5.039,925,6.109,926,6.436]],["title/injectables/CodeExplanationService.html",[17,0.905,919,3.792]],["body/injectables/CodeExplanationService.html",[3,0.045,4,0.045,5,0.045,10,0.222,13,0.907,14,0.343,15,0.005,16,0.071,17,1.41,19,0.825,59,0.05,60,0.209,62,1.686,65,2.313,68,1.881,71,1.511,72,1.81,74,3.408,76,1.035,122,1.607,238,0.003,239,0.003,289,1.619,293,0.388,295,1.729,296,0.883,297,0.776,299,1.619,422,2.316,423,3.496,541,4.425,687,3.408,706,3.408,791,3.924,799,2.458,803,2.872,810,2.217,822,1.961,825,5.644,826,4.387,827,5.871,831,5.907,832,6.097,835,4.892,836,4.213,837,4.387,838,4.387,839,4.06,840,4.591,842,2.768,843,4.387,853,4.387,854,5.223,858,5.644,859,4.387,860,4.591,863,4.387,864,5.119,865,3.802,866,4.387,867,4.387,904,4.084,905,6.588,910,7.262,914,7.144,918,5.553,919,5.907,927,6.176,928,7.946,929,6.176,930,7.946,931,6.176,932,6.176,933,4.06,934,5.142,935,5.142,936,5.142]],["title/controllers/CodeRefactorSuggestionController.html",[551,1.194,937,4.248]],["body/controllers/CodeRefactorSuggestionController.html",[3,0.046,4,0.046,5,0.046,10,0.229,14,0.316,15,0.005,16,0.078,19,0.848,59,0.051,60,0.215,68,1.502,71,1.207,72,1.834,102,1.691,122,1.651,197,3.419,238,0.003,239,0.003,289,1.647,293,0.28,295,1.249,296,0.638,297,0.561,299,1.293,393,2.125,538,0.664,541,4.483,546,0.858,549,0.797,551,1.485,553,1.754,555,2.345,568,2.862,603,3.197,635,3.131,636,2.845,637,3.691,638,4.256,641,3.032,642,2.345,662,2.7,668,2.215,670,2.897,671,2.38,795,4.256,796,3.592,799,1.963,800,4.978,801,4.162,802,2.952,803,2.952,810,2.278,814,2.416,904,3.561,905,5.744,907,3.907,908,6.331,913,6.011,915,4.978,916,5.284,921,4.718,922,4.718,924,4.969,925,6.6,937,6.733,938,7.746,939,6.347,940,6.347,941,7.969,942,6.347,943,8.086,944,5.515,945,6.347,946,4.969,947,6.615,948,5.284,949,6.347,950,6.347]],["title/injectables/CodeRefactorSuggestionService.html",[17,0.905,947,3.792]],["body/injectables/CodeRefactorSuggestionService.html",[3,0.042,4,0.042,5,0.042,10,0.211,13,0.885,14,0.334,15,0.005,16,0.069,17,1.363,19,0.783,59,0.047,60,0.198,62,1.6,65,2.255,68,1.818,71,1.46,72,1.765,74,3.234,76,1.01,122,1.525,238,0.003,239,0.003,289,1.565,293,0.378,295,1.686,296,0.861,297,0.757,299,1.565,422,2.198,423,3.317,522,4.163,541,4.971,549,0.736,600,3.724,687,3.234,706,3.234,745,4.589,791,3.724,799,2.376,803,2.726,810,2.104,822,1.861,825,5.456,826,4.163,827,5.788,831,5.709,832,5.976,835,4.728,836,3.997,837,4.163,838,4.163,839,3.853,840,4.356,842,2.627,843,4.163,844,4.356,845,4.356,846,4.356,847,4.356,853,4.163,854,5.049,858,5.456,859,4.163,860,4.356,863,4.163,864,5.017,865,3.608,866,4.163,867,4.163,904,4.003,905,6.458,925,5.843,933,3.853,934,7.133,935,4.88,936,4.88,938,7.583,941,7.118,946,4.589,947,5.709,951,5.269,952,6.905,953,5.269,954,6.905,955,5.269,956,5.269,957,5.269,958,5.269,959,2.726,960,4.356,961,3.997,962,6.905,963,5.269,964,2.952,965,5.269]],["title/controllers/CodeTestSuggestionController.html",[551,1.194,966,4.248]],["body/controllers/CodeTestSuggestionController.html",[3,0.046,4,0.046,5,0.046,10,0.231,14,0.318,15,0.005,16,0.078,19,0.857,59,0.052,60,0.217,68,1.518,71,1.22,72,1.843,102,1.709,122,1.668,197,3.455,238,0.003,239,0.003,289,1.658,293,0.283,295,1.262,296,0.644,297,0.567,299,1.306,393,2.148,538,0.671,541,4.505,546,0.867,549,0.805,551,1.5,553,1.772,555,2.37,568,2.881,603,3.231,635,3.164,636,2.875,637,3.716,638,4.284,641,3.052,642,2.37,662,2.728,668,2.238,670,2.928,671,2.405,795,4.284,796,3.63,799,1.984,800,5.011,801,4.19,802,2.983,803,2.983,810,2.302,814,2.441,904,3.584,905,5.782,907,3.948,908,6.373,913,6.051,915,5.011,916,5.34,921,4.767,922,4.767,924,5.021,925,6.099,946,5.021,948,5.34,966,6.777,967,6.413,968,6.413,969,7.985,970,6.413,971,8.14,972,6.992,973,6.413,974,6.647,975,6.413,976,6.413]],["title/injectables/CodeTestSuggestionService.html",[17,0.905,974,3.792]],["body/injectables/CodeTestSuggestionService.html",[3,0.043,4,0.043,5,0.043,10,0.215,13,0.893,14,0.338,15,0.005,16,0.07,17,1.38,19,0.798,59,0.048,60,0.202,62,1.631,65,2.277,68,1.841,71,1.479,72,1.782,74,3.297,238,0.003,239,0.003,289,1.584,293,0.382,295,1.702,296,0.869,297,0.764,299,1.584,422,2.241,423,3.382,522,4.244,541,4.904,549,0.75,600,3.797,687,3.297,706,3.297,745,4.678,791,3.797,799,2.406,803,2.779,810,2.145,822,1.897,825,5.525,826,4.244,827,5.819,832,5.113,836,4.075,837,4.244,838,4.244,839,3.928,842,2.678,843,4.244,844,4.442,845,4.442,846,4.442,847,4.442,853,4.244,854,5.113,858,5.525,859,4.244,863,4.244,864,5.055,865,3.678,866,4.244,867,4.244,904,4.033,905,6.506,925,5.305,933,3.928,934,7.2,935,4.975,946,4.678,951,5.372,953,5.372,955,5.372,956,5.372,957,5.372,958,5.372,959,2.779,960,4.442,961,4.075,962,6.993,963,5.372,964,3.01,965,5.372,969,7.172,972,7.237,974,5.782,977,7.778,978,7.778,979,7.778,980,5.975]],["title/classes/CollaboratorsDto.html",[60,0.173,981,4.248]],["body/classes/CollaboratorsDto.html",[3,0.052,4,0.052,5,0.052,6,3.552,10,0.261,11,1.216,13,0.975,14,0.392,15,0.004,16,0.076,31,3.863,59,0.058,60,0.32,207,1.649,238,0.004,239,0.004,293,0.32,455,3.442,534,1.816,538,0.757,539,2.754,542,1.726,545,3.194,546,0.978,548,2.154,549,0.908,981,7.303,982,7.234,983,5.642,984,4.725,985,6.868,986,4.652,987,2.052,988,6.024,989,7.234,990,3.808,991,6.024,992,7.234]],["title/classes/CommitAuthorDto.html",[60,0.173,993,4.587]],["body/classes/CommitAuthorDto.html",[3,0.054,4,0.054,5,0.054,10,0.269,11,1.239,14,0.374,15,0.004,16,0.072,59,0.06,60,0.303,76,1.169,238,0.004,239,0.004,293,0.33,534,1.875,538,0.782,539,2.843,542,1.76,545,3.257,546,1.01,547,3.404,548,2.224,549,0.938,619,5.505,688,2.533,993,8.04,994,7.47,995,9.571,996,5.878,997,5.682,998,7.47,999,7.47,1000,5.553]],["title/injectables/CommitAuthorsService.html",[17,0.905,1001,3.792]],["body/injectables/CommitAuthorsService.html",[3,0.043,4,0.043,5,0.043,10,0.215,13,0.892,14,0.337,15,0.005,16,0.08,17,1.379,18,3.613,19,0.797,20,2.795,22,1.287,23,2.341,24,1.711,25,1.971,26,2.082,59,0.048,60,0.202,62,2.121,64,1.799,65,2.046,67,3.83,68,2.167,69,3.547,71,1.643,72,2.005,77,2.906,82,3.499,83,3.362,102,1.59,119,2.443,122,1.552,238,0.003,239,0.003,247,5.339,289,1.583,293,0.404,295,1.701,296,0.868,297,0.764,299,1.76,351,4.069,682,1.78,814,2.271,822,1.894,1001,5.775,1002,9.492,1003,5.965,1004,7.769,1005,6.985,1006,5.965,1007,5.965,1008,7.769,1009,5.965,1010,7.769,1011,5.965,1012,6.985,1013,5.965,1014,1.998,1015,1.609,1016,3.672,1017,4.967,1018,5.965,1019,5.965,1020,4.069,1021,3.672,1022,4.671,1023,4.353,1024,2.943]],["title/classes/CommitsDto.html",[60,0.173,1025,4.587]],["body/classes/CommitsDto.html",[3,0.054,4,0.054,5,0.054,10,0.27,11,1.242,14,0.374,15,0.004,16,0.072,59,0.061,60,0.303,76,1.171,238,0.004,239,0.004,293,0.331,534,1.883,538,0.785,539,2.855,542,1.764,545,3.265,546,1.014,547,3.412,548,2.233,549,0.942,996,5.893,1025,8.06,1026,7.5,1027,8.62,1028,8.06,1029,8.964,1030,7.5,1031,7.5,1032,6.743]],["title/injectables/CommitsService.html",[17,0.905,1033,3.792]],["body/injectables/CommitsService.html",[3,0.04,4,0.04,5,0.04,10,0.198,13,1.032,14,0.346,15,0.005,16,0.078,17,1.306,18,3.422,19,0.734,20,2.706,22,1.185,23,2.156,24,1.575,25,1.815,26,1.917,59,0.044,60,0.186,62,2.008,64,1.656,65,1.937,67,3.707,68,2.187,69,3.358,71,1.685,72,2.06,77,3.019,82,3.742,83,3.59,102,1.464,119,2.557,122,1.429,238,0.003,239,0.003,247,5.232,289,1.499,293,0.408,295,1.744,296,0.89,297,0.783,299,1.805,353,3.611,682,2.127,814,2.091,822,1.744,1014,1.839,1015,1.481,1016,3.381,1020,5.018,1021,4.529,1022,4.301,1023,4.179,1024,2.71,1033,5.469,1034,5.492,1035,7.357,1036,7.357,1037,6.615,1038,5.492,1039,5.492,1040,7.357,1041,5.492,1042,7.357,1043,5.492,1044,7.357,1045,5.492,1046,6.615,1047,5.492,1048,4.573,1049,5.492,1050,5.492,1051,5.492,1052,5.492]],["title/modules/ContributionModule.html",[240,1.281,261,3.792]],["body/modules/ContributionModule.html",[3,0.049,4,0.049,5,0.049,15,0.005,16,0.084,19,0.899,24,1.93,59,0.054,60,0.228,64,2.029,196,2.964,238,0.004,239,0.004,240,2.106,242,2.487,243,3.243,248,3.243,249,2.562,250,2.524,253,3.398,254,3.511,261,7.718,275,6.002,288,3.453,303,3.072,332,4.591,334,3.072,335,3.543,336,3.695,337,3.543,338,5.723,389,4.749,390,4.144,391,4.023,553,2.319,768,1.86,1053,6.051,1054,6.731,1055,6.051,1056,6.051,1057,7.851,1058,6.731,1059,7.612,1060,5.604,1061,6.051,1062,6.731,1063,4.781]],["title/classes/ContributionPageMetaDto.html",[49,3.995,60,0.173]],["body/classes/ContributionPageMetaDto.html",[1,7.624,3,0.04,4,0.04,5,0.04,6,3.377,10,0.2,11,1.027,13,1.073,14,0.406,15,0.005,16,0.067,49,5.801,59,0.045,60,0.188,62,2.023,118,4.684,119,1.86,124,4.942,148,3.417,186,2.051,194,4.87,238,0.003,239,0.003,293,0.437,295,1.092,296,0.558,297,0.491,455,2.178,472,1.786,528,2.781,534,1.393,538,1.019,539,3.707,542,1.947,545,2.698,546,0.751,549,0.697,773,3.582,896,2.098,987,2.231,1014,2.481,1064,6.53,1065,5.551,1066,2.415,1067,6.661,1068,6.661,1069,3.446,1070,3.376,1071,6.661,1072,4.991,1073,6.967,1074,7.409,1075,5.482,1076,5.263,1077,5.801,1078,5.138,1079,5.551,1080,4.126,1081,5.551,1082,6.169,1083,6.661,1084,5.551,1085,4.622,1086,5.551,1087,3.527,1088,5.551,1089,4.346,1090,5.551,1091,4.126,1092,4.991,1093,2.99,1094,4.991,1095,5.551]],["title/classes/ContributionPageOptionsDto.html",[60,0.173,1096,3.995]],["body/classes/ContributionPageOptionsDto.html",[3,0.04,4,0.04,5,0.04,10,0.197,11,1.018,13,0.953,14,0.394,15,0.005,16,0.067,31,3.233,59,0.059,60,0.249,78,3.528,93,2.636,100,2.881,117,2.386,119,2.476,140,2.547,142,3.765,186,3.27,238,0.003,239,0.003,293,0.42,297,0.906,528,2.749,534,1.375,538,0.995,546,0.741,548,1.63,678,2.713,679,3.022,842,2.455,896,1.551,959,2.547,1014,1.834,1015,1.477,1066,2.393,1069,3.415,1070,3.132,1078,4.972,1096,5.749,1097,6.601,1098,3.099,1099,5.263,1100,4.052,1101,3.865,1102,7.685,1103,3.616,1104,7.447,1105,3.955,1106,4.462,1107,5.458,1108,5.476,1109,4.56,1110,2.819,1111,3.779,1112,2.759,1113,2.95,1114,3.183,1115,4.173,1116,2.819,1117,3.022,1118,3.099,1119,2.819,1120,3.099,1121,3.291,1122,2.882,1123,3.022,1124,3.022,1125,3.779,1126,3.099,1127,2.819,1128,3.099,1129,3.291,1130,3.273,1131,3.177,1132,4.156,1133,5.458,1134,6.113,1135,5.476]],["title/injectables/ContributionService.html",[17,0.905,1057,3.792]],["body/injectables/ContributionService.html",[3,0.034,4,0.034,5,0.034,10,0.171,13,1.071,14,0.326,15,0.005,16,0.081,17,1.184,18,2.214,19,0.636,20,2.999,22,1.027,23,1.868,24,1.365,25,1.572,26,1.661,59,0.038,60,0.161,62,1.821,64,2.321,65,2.027,68,2.295,71,0.905,72,1.966,76,0.907,77,2.789,78,3.726,80,6.526,82,3.379,85,2.214,88,4.612,90,3.246,91,1.812,92,3.963,93,1.709,94,3.024,95,3.963,97,3.963,99,3.876,100,2.617,102,1.777,104,3.727,118,3.51,119,1.674,121,1.315,122,1.735,124,4.116,156,4.106,159,5.222,160,4.737,196,2.096,207,0.895,238,0.003,239,0.003,289,1.359,293,0.369,295,1.642,296,0.838,297,0.737,299,1.568,336,2.096,337,2.505,338,3.246,389,2.694,390,2.93,391,2.844,822,1.511,1014,1.594,1015,1.284,1057,4.957,1060,3.963,1070,1.684,1093,2.564,1096,6.532,1101,4.623,1102,3.963,1104,4.279,1115,2.398,1116,2.45,1136,4.759,1137,4.549,1138,5.996,1139,7.699,1140,4.759,1141,6.922,1142,6.922,1143,4.759,1144,6.669,1145,4.549,1146,4.759,1147,3.246,1148,4.759,1149,4.759,1150,4.759,1151,4.759,1152,3.129,1153,3.246,1154,3.963,1155,3.727,1156,4.279,1157,3.727,1158,4.279,1159,4.279,1160,4.759,1161,4.279,1162,4.279,1163,4.759,1164,4.279,1165,4.279,1166,4.759,1167,4.279,1168,3.727,1169,4.759,1170,3.963,1171,3.963,1172,3.246,1173,2.93,1174,2.844,1175,4.279,1176,6.669,1177,4.759,1178,4.759,1179,4.759,1180,4.759,1181,4.279,1182,4.759,1183,4.759,1184,2.627,1185,4.759,1186,3.246,1187,3.727,1188,4.759,1189,4.759,1190,4.759,1191,4.737]],["title/classes/ContributionsByProjectDto.html",[54,3.792,60,0.173]],["body/classes/ContributionsByProjectDto.html",[3,0.051,4,0.051,5,0.051,6,3.502,10,0.255,11,1.198,13,0.965,14,0.39,15,0.004,16,0.076,54,6.428,59,0.057,60,0.316,78,3.981,100,3.394,117,2.161,142,4.323,238,0.004,239,0.004,293,0.312,297,0.764,528,2.49,534,1.774,538,0.74,546,0.956,548,2.104,549,0.887,987,1.653,990,3.72,1064,6.771,1103,2.69,1121,3.168,1125,3.638,1127,3.638,1129,3.876,1131,3.742,1192,7.067,1193,7.067,1194,4.107,1195,5.685,1196,5.534,1197,5.534]],["title/classes/ContributionsPageDto.html",[52,3.995,60,0.173]],["body/classes/ContributionsPageDto.html",[3,0.047,4,0.047,5,0.047,6,3.826,10,0.234,11,1.137,14,0.394,15,0.005,16,0.076,52,6.423,59,0.052,60,0.304,62,1.772,124,5.044,238,0.003,239,0.003,293,0.397,295,1.278,296,0.652,297,0.574,455,3.219,528,2.652,534,1.63,538,0.859,545,3.275,546,0.878,548,1.933,899,5.515,984,3.498,986,4.263,990,3.417,1014,2.174,1064,7.398,1091,7.512,1093,3.498,1198,6.493,1199,7.375,1200,6.646,1201,8.203,1202,5.837,1203,5.837,1204,5.837,1205,6.493,1206,5.837,1207,5.837,1208,8.086,1209,4.268,1210,5.837,1211,5.837]],["title/classes/ContributionsTimeframeDto.html",[39,3.792,60,0.173]],["body/classes/ContributionsTimeframeDto.html",[3,0.047,4,0.047,5,0.047,6,3.648,10,0.235,11,1.139,13,0.93,14,0.389,15,0.005,16,0.076,34,7.517,37,3.894,38,4.628,39,6.112,59,0.053,60,0.305,78,3.888,100,3.227,109,7.053,117,2.303,137,7.053,142,4.238,238,0.003,239,0.003,293,0.363,297,0.836,528,2.4,534,1.636,538,0.861,546,0.881,548,1.94,549,0.818,987,1.524,990,3.429,1064,7.053,1103,3.13,1105,3.51,1106,4.429,1121,2.921,1125,3.354,1127,3.354,1129,4.038,1130,3.894,1131,3.898,1132,3.688,1194,3.787,1195,5.405,1196,5.102,1197,5.102,1212,6.516,1213,5.858,1214,6.516,1215,6.516,1216,5.858]],["title/classes/Contributor.html",[31,2.247,60,0.173]],["body/classes/Contributor.html",[3,0.048,4,0.048,5,0.048,6,3.69,8,4.405,10,0.241,11,1.158,13,0.941,14,0.391,15,0.005,16,0.074,31,4.204,59,0.067,60,0.323,76,1.158,88,4.848,207,1.713,238,0.003,239,0.003,293,0.369,296,0.839,455,2.622,472,2.149,534,1.677,542,1.793,545,3.477,546,0.904,547,3.179,548,1.989,549,1.144,682,2.025,773,4.038,780,5.491,983,3.993,984,3.599,986,4.32,990,3.517,1217,8.193,1218,6.007,1219,6.682,1220,6.682,1221,4.967,1222,4.746,1223,4.245,1224,4.746,1225,5.232,1226,4.967]],["title/controllers/ContributorController.html",[551,1.194,1227,4.248]],["body/controllers/ContributorController.html",[3,0.047,4,0.047,5,0.047,10,0.233,14,0.319,15,0.005,16,0.082,19,0.863,25,2.134,26,2.254,31,2.844,59,0.052,60,0.219,71,1.228,72,1.849,77,2.596,119,2.052,196,4.284,197,4.404,238,0.003,239,0.003,289,1.666,293,0.285,295,1.271,296,0.649,297,0.571,299,1.316,387,3.655,393,2.738,528,1.721,538,0.676,546,0.874,551,1.511,553,1.785,555,2.386,568,2.894,640,3.311,641,3.066,642,2.386,668,2.254,671,2.422,810,2.318,983,5.362,1015,1.742,1227,6.807,1228,6.458,1229,9.728,1230,6.458,1231,7.383,1232,5.057,1233,7.351,1234,6.078,1235,5.375,1236,4.752,1237,6.458,1238,6.669,1239,6.458,1240,3.365,1241,3.004,1242,3.062,1243,3.004,1244,3.062,1245,5.897,1246,4.801,1247,5.577,1248,5.377,1249,6.458,1250,5.807,1251,5.057,1252,5.807,1253,6.458]],["title/controllers/ContributorInsightsController.html",[551,1.194,1254,4.248]],["body/controllers/ContributorInsightsController.html",[3,0.034,4,0.034,5,0.034,10,0.172,14,0.373,15,0.005,16,0.076,19,0.637,25,1.574,26,1.663,31,2.099,59,0.039,60,0.161,71,1.587,72,2.065,77,3.03,78,2.661,100,3.574,102,1.779,119,2.396,142,3.875,143,2.205,196,3.393,238,0.003,239,0.003,289,1.36,293,0.369,295,1.643,296,0.839,297,0.738,299,1.7,387,2.697,393,2.235,528,1.27,538,0.874,546,0.645,551,1.115,553,1.317,555,1.761,568,3.377,640,3.559,641,3.295,642,1.761,668,1.663,671,3.13,768,2.637,810,1.711,933,4.388,944,6.212,983,5.703,985,6.536,1238,7.208,1240,3.617,1241,2.216,1242,2.259,1243,2.216,1244,2.259,1245,5.064,1246,3.542,1247,4.553,1248,3.968,1250,4.285,1252,7.505,1254,5.558,1255,8.788,1256,4.766,1257,4.766,1258,8.788,1259,8.788,1260,8.788,1261,8.788,1262,4.766,1263,7.907,1264,4.766,1265,7.094,1266,6.77,1267,6.675,1268,3.811,1269,8.347,1270,4.766,1271,4.766,1272,4.766,1273,4.766,1274,4.766,1275,4.766,1276,6.675,1277,4.766,1278,4.766,1279,4.766,1280,4.766,1281,4.285,1282,4.766,1283,4.766,1284,4.766,1285,4.766,1286,4.766,1287,4.766,1288,4.766,1289,4.766,1290,4.766]],["title/modules/ContributorModule.html",[240,1.281,262,3.792]],["body/modules/ContributorModule.html",[3,0.052,4,0.052,5,0.052,15,0.005,16,0.082,19,0.963,24,2.066,31,3.173,59,0.058,60,0.244,64,2.173,196,3.853,238,0.004,239,0.004,240,2.197,242,2.663,243,3.382,248,3.382,249,2.743,250,2.702,262,7.589,274,6.964,288,3.602,303,3.289,387,4.078,388,6,389,4.078,390,4.436,391,4.307,553,2.418,1227,7.847,1254,7.847,1291,7.206,1292,7.206,1293,7.206,1294,7.206,1295,7.206,1296,6.479]],["title/classes/ContributorPullRequestsDto.html",[60,0.173,1297,3.995]],["body/classes/ContributorPullRequestsDto.html",[3,0.04,4,0.04,5,0.04,10,0.202,11,1.034,13,0.961,14,0.396,15,0.005,16,0.068,59,0.06,60,0.253,78,3.562,93,2.679,100,2.928,117,2.394,119,2.489,140,2.609,142,3.802,186,3.302,238,0.003,239,0.003,293,0.423,297,0.91,528,2.702,534,1.408,538,1.002,546,0.759,548,1.67,842,2.515,896,1.589,959,2.609,1014,1.879,1015,1.513,1066,2.432,1069,3.47,1070,2.641,1078,5.012,1100,4.118,1101,3.927,1103,3.642,1105,4.02,1106,4.516,1110,2.888,1111,3.841,1112,2.826,1113,3.022,1114,3.26,1115,4.687,1116,2.888,1117,3.096,1118,3.175,1119,2.888,1120,3.175,1121,3.345,1122,2.953,1123,3.096,1124,3.096,1125,3.841,1126,3.175,1127,2.888,1128,3.175,1129,3.345,1130,3.353,1131,3.229,1132,4.223,1266,5.547,1297,5.842,1298,6.709,1299,5.044,1300,8.384,1301,7.747,1302,7.538,1303,5.61,1304,5.61,1305,5.61]],["title/modules/CouponModule.html",[240,1.281,263,3.624]],["body/modules/CouponModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.08,19,0.98,24,2.103,59,0.059,60,0.248,64,2.212,238,0.004,239,0.004,240,2.22,242,2.711,243,3.418,248,3.418,249,2.792,250,2.751,253,3.582,254,3.701,263,7.366,288,3.019,303,3.349,435,5.453,656,7.936,1306,6.595,1307,6.595,1308,6.595,1309,7.335,1310,6.595,1311,7.335,1312,7.335]],["title/injectables/CouponService.html",[17,0.905,656,3.792]],["body/injectables/CouponService.html",[3,0.045,4,0.045,5,0.045,10,0.227,14,0.346,15,0.005,16,0.075,17,1.427,18,2.926,19,0.841,20,2.852,22,1.358,23,2.469,24,1.804,59,0.051,60,0.213,62,2.195,64,1.897,65,1.657,67,3.908,68,2.098,69,3.671,71,1.685,72,2.034,76,1.163,82,2.548,83,2.723,98,2.292,102,1.677,122,1.637,234,3.39,238,0.003,239,0.003,289,1.638,293,0.413,295,1.744,296,0.891,297,0.783,299,1.805,435,4.677,540,4.677,541,4.705,656,5.978,799,2.488,814,2.395,822,1.998,1024,3.104,1310,5.657,1313,6.292,1314,8.042,1315,8.042,1316,6.292,1317,6.292,1318,8.042,1319,6.292,1320,8.042,1321,6.292,1322,8.042,1323,6.292,1324,6.292,1325,6.292,1326,6.292,1327,6.292,1328,5.657,1329,1.744,1330,6.292,1331,5.657,1332,6.292]],["title/classes/CreateBlogSummaryDto.html",[60,0.173,788,3.995]],["body/classes/CreateBlogSummaryDto.html",[3,0.039,4,0.039,5,0.039,10,0.196,11,1.015,13,0.912,14,0.411,15,0.004,16,0.059,59,0.044,60,0.248,76,1.222,117,1.693,140,2.536,238,0.003,239,0.003,293,0.419,534,1.369,538,0.993,539,3.612,542,1.939,545,3.53,546,0.737,547,3.508,548,1.623,549,1.192,568,3.487,788,5.732,792,6.582,804,7.966,833,6.546,835,5.673,855,4.375,879,6.058,987,2.067,1194,3.168,1333,9.693,1334,4.902,1335,8.264,1336,8.264,1337,7.431,1338,5.442,1339,4.902,1340,4.902,1341,6.143,1342,4.053,1343,5.442,1344,5.442,1345,5.442,1346,5.442,1347,5.442,1348,5.442,1349,5.442,1350,5.442,1351,5.442,1352,4.902,1353,3.611,1354,3.873,1355,4.902,1356,3.873,1357,4.902,1358,4.539,1359,6.095,1360,6.095,1361,6.095,1362,6.881,1363,4.902,1364,5.251,1365,3.258,1366,3.258,1367,3.873,1368,3.873,1369,3.873,1370,3.873,1371,3.873,1372,4.539,1373,4.053]],["title/classes/CreateEndorsementDto.html",[60,0.173,1374,3.792]],["body/classes/CreateEndorsementDto.html",[3,0.04,4,0.067,5,0.04,10,0.199,11,1.024,13,0.984,14,0.41,15,0.004,16,0.06,20,2.256,59,0.045,60,0.25,76,1.123,117,1.708,192,3.73,207,1.67,238,0.003,239,0.003,293,0.421,297,0.653,520,4.856,534,1.387,538,0.997,539,3.524,542,1.99,545,3.469,546,0.747,547,3.381,548,1.645,549,1.196,682,1.963,688,2.986,698,4.382,770,5.491,987,2.229,991,4.601,1121,2.477,1129,3.311,1131,3.197,1364,5.644,1374,5.491,1375,9.726,1376,4.968,1377,7.481,1378,7.481,1379,7.481,1380,7.481,1381,7.917,1382,6.15,1383,5.526,1384,5.526,1385,5.784,1386,5.526,1387,5.526,1388,5.526,1389,5.526,1390,6.15,1391,4.601,1392,5.526,1393,5.526,1394,5.526,1395,5.526,1396,5.526,1397,5.526,1398,4.968,1399,5.526,1400,4.326]],["title/classes/CreateInsightDto.html",[60,0.173,1401,3.995]],["body/classes/CreateInsightDto.html",[3,0.045,4,0.045,5,0.045,10,0.227,11,1.116,14,0.406,15,0.005,16,0.076,20,2.459,59,0.051,60,0.3,76,1.101,202,3.651,238,0.003,239,0.003,293,0.392,296,0.97,422,2.364,455,3.159,472,2.028,534,1.582,538,0.929,539,3.376,542,1.944,545,3.404,546,0.853,547,3.064,548,1.877,549,1.114,608,5.491,682,1.299,773,4.518,778,4.685,780,5.292,781,3.395,984,4.337,986,4.43,988,5.248,990,3.318,1070,3.308,1222,5.719,1223,5.636,1224,5.719,1401,6.303,1402,8.403,1403,5.667,1404,4.919,1405,6.303,1406,5.667,1407,6.303,1408,6.736,1409,6.303,1410,4.299,1411,5.248,1412,4.685,1413,6.303,1414,3.88]],["title/classes/CreateInsightMemberDto.html",[60,0.173,1415,4.248]],["body/classes/CreateInsightMemberDto.html",[3,0.053,4,0.053,5,0.053,10,0.266,11,1.23,14,0.372,15,0.004,16,0.072,59,0.06,60,0.301,76,1.164,238,0.004,239,0.004,293,0.326,534,1.853,538,0.773,539,2.809,542,1.747,545,3.233,546,0.998,548,2.197,549,0.927,619,6.223,1000,5.486,1402,7.982,1404,5.2,1412,6.599,1415,7.392,1416,6.635,1417,5.465,1418,7.982,1419,6.635,1420,7.38,1421,7.982]],["title/classes/CreateIssueSummaryDto.html",[60,0.173,1422,3.995]],["body/classes/CreateIssueSummaryDto.html",[3,0.038,4,0.038,5,0.038,10,0.189,11,0.989,13,0.898,14,0.413,15,0.004,16,0.058,59,0.042,60,0.242,76,1.231,117,1.65,140,2.441,238,0.003,239,0.003,293,0.424,534,1.318,538,1.005,539,3.654,542,1.923,545,3.557,546,0.71,547,3.572,548,1.563,549,1.244,568,3.457,820,7.325,833,6.462,835,5.6,855,4.265,879,5.98,987,2.035,1194,3.051,1334,4.719,1337,7.288,1338,6.026,1339,4.719,1340,4.719,1341,6.026,1342,3.902,1343,5.304,1344,5.304,1345,5.304,1346,5.304,1347,5.304,1348,5.304,1349,5.304,1350,5.304,1351,5.304,1352,4.719,1353,3.52,1354,3.729,1355,4.719,1356,3.729,1357,4.719,1358,4.371,1359,5.941,1360,5.941,1361,5.941,1362,6.75,1363,4.719,1364,5.151,1365,3.137,1366,3.137,1367,3.729,1368,3.729,1369,3.729,1370,3.729,1371,3.729,1372,4.371,1373,3.902,1422,5.587,1423,9.768,1424,8.106,1425,8.106,1426,8.106,1427,4.691,1428,5.249]],["title/classes/CreateLogDto.html",[60,0.173,1429,4.248]],["body/classes/CreateLogDto.html",[3,0.051,4,0.051,5,0.051,10,0.256,11,1.203,14,0.366,15,0.004,16,0.057,59,0.057,60,0.294,76,1.199,238,0.004,239,0.004,293,0.414,297,0.899,504,6.963,520,6.158,528,2.792,534,1.784,538,0.981,547,3.713,548,2.116,876,5.444,1131,4.222,1429,7.226,1430,9.755,1431,7.108,1432,9.368,1433,7.108,1434,7.108,1435,7.108]],["title/classes/CreateUserCollaborationDto.html",[60,0.173,1436,4.248]],["body/classes/CreateUserCollaborationDto.html",[3,0.049,4,0.049,5,0.049,10,0.247,11,1.176,14,0.394,15,0.004,16,0.069,59,0.055,60,0.287,76,1.218,207,1.733,238,0.004,239,0.004,293,0.375,393,2.842,465,5.334,534,1.721,538,0.889,539,3.231,542,1.896,545,3.357,546,0.927,547,3.509,548,2.041,549,1.066,832,4.507,876,5.754,1385,6.646,1436,7.067,1437,8.289,1438,6.164,1439,7.161,1440,8.488,1441,8.488,1442,7.631,1443,6.856,1444,6.856,1445,6.856,1446,6.856,1447,5.709,1448,3.784,1449,4.87,1450,6.856,1451,6.164]],["title/classes/CreateUserHighlightDto.html",[60,0.173,1452,3.995]],["body/classes/CreateUserHighlightDto.html",[3,0.037,4,0.037,5,0.037,10,0.183,11,0.967,14,0.413,15,0.004,16,0.056,59,0.041,60,0.236,76,1.248,117,1.175,143,2.306,198,5.641,200,4.964,207,1.789,238,0.003,239,0.003,293,0.411,297,0.758,406,5.173,422,3.218,455,3.128,534,1.276,538,0.973,539,3.267,542,1.994,545,3.276,546,0.687,547,3.537,548,1.513,549,1.167,688,2.959,698,4.437,781,2.738,820,4.958,832,3.341,855,5.376,882,3.229,964,3.516,984,3.76,986,4.068,1103,1.935,1121,3.129,1129,3.573,1131,3.45,1194,2.954,1209,3.341,1437,8.557,1447,4.232,1451,4.569,1452,5.465,1453,5.082,1454,6.242,1455,7.972,1456,5.082,1457,5.082,1458,6.275,1459,4.435,1460,5.465,1461,2.873,1462,5.082,1463,5.082,1464,4.056,1465,5.811,1466,6.275,1467,6.275,1468,4.569,1469,5.082,1470,5.082,1471,5.082,1472,7.167,1473,5.082,1474,6.979,1475,6.979,1476,5.082,1477,6.275,1478,5.082,1479,5.082,1480,6.979,1481,4.569,1482,3.037,1483,4.569,1484,2.092,1485,5.082,1486,4.569]],["title/classes/CreateUserListDto.html",[60,0.173,1221,3.792]],["body/classes/CreateUserListDto.html",[3,0.045,4,0.045,5,0.045,6,3.771,8,4.654,10,0.225,11,1.108,13,0.826,14,0.403,15,0.005,16,0.071,31,4.1,59,0.065,60,0.315,76,1.161,88,4.355,207,1.75,238,0.003,239,0.003,293,0.39,296,0.967,455,3.139,472,2.007,534,1.566,538,0.924,539,3.36,542,1.938,545,3.391,546,0.844,547,3.044,548,1.857,549,1.109,682,1.819,773,4.501,778,4.638,780,5.257,872,4.885,983,5.276,984,4.308,986,4.414,990,3.284,1217,8.371,1218,5.609,1221,5.945,1222,5.681,1223,5.609,1224,5.681,1225,4.885,1226,4.638,1487,5.609,1488,6.239,1489,6.239,1490,6.239,1491,6.239]],["title/classes/CreateWorkspaceDto.html",[60,0.173,1492,3.792]],["body/classes/CreateWorkspaceDto.html",[3,0.044,4,0.044,5,0.044,10,0.221,11,1.098,13,0.818,14,0.402,15,0.005,16,0.075,59,0.064,60,0.313,76,1.214,88,4.324,102,2.11,238,0.003,239,0.003,293,0.387,296,0.963,402,3.673,455,3.108,534,1.543,538,0.918,539,3.336,542,1.931,545,3.371,546,0.831,547,3.336,548,1.829,549,1.27,674,5.761,682,1.806,872,4.811,984,4.267,986,4.389,990,3.234,1224,5.626,1225,4.811,1226,4.568,1417,4.876,1487,5.525,1492,5.887,1493,8.323,1494,5.525,1495,6.226,1496,6.56,1497,7.121,1498,6.145,1499,6.145,1500,6.145,1501,6.145,1502,6.145,1503,6.515,1504,4.811,1505,6.201,1506,5.525,1507,3.391]],["title/injectables/CustomLogger.html",[17,0.905,1508,3.995]],["body/injectables/CustomLogger.html",[3,0.035,4,0.035,5,0.035,10,0.175,11,0.936,14,0.367,15,0.005,16,0.068,17,1.199,19,0.648,59,0.039,60,0.164,62,1.323,65,2.047,71,1.682,72,2.112,74,4.641,76,1.267,117,1.121,238,0.003,239,0.003,289,1.376,293,0.415,295,1.802,296,0.92,297,0.809,299,1.801,305,5.318,306,2.675,504,6.573,520,6.974,528,2.072,799,2.735,822,1.539,864,5.185,876,5.958,1066,2.202,1147,6.246,1508,6.087,1509,9.583,1510,4.847,1511,7.775,1512,9.396,1513,6.99,1514,7.002,1515,7.775,1516,6.99,1517,6.755,1518,8.409,1519,6.807,1520,6.755,1521,6.755,1522,4.847,1523,6.755,1524,8.409,1525,4.847,1526,6.755,1527,4.847,1528,6.755,1529,4.847,1530,6.755,1531,4.847,1532,4.847,1533,4.847,1534,4.358,1535,4.847,1536,4.847,1537,4.847,1538,4.847,1539,8.843,1540,4.847,1541,4.847,1542,6.755]],["title/modules/CustomerModule.html",[240,1.281,264,3.48]],["body/modules/CustomerModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.08,19,0.98,24,2.103,59,0.059,60,0.248,64,2.212,238,0.004,239,0.004,240,2.22,242,2.711,243,3.418,248,3.418,249,2.792,250,2.751,253,3.582,254,3.701,264,7.073,288,3.019,303,3.349,375,5.453,648,7.584,1543,6.595,1544,6.595,1545,6.595,1546,7.335,1547,6.595,1548,7.335,1549,7.335]],["title/injectables/CustomerService.html",[17,0.905,648,3.624]],["body/injectables/CustomerService.html",[3,0.044,4,0.044,5,0.044,10,0.219,13,1.011,14,0.36,15,0.005,16,0.075,17,1.398,19,0.814,20,2.818,22,1.315,23,2.392,24,1.747,59,0.049,60,0.206,62,2.151,64,1.837,65,1.604,67,3.861,68,1.865,71,1.755,72,2.102,76,1.154,82,3.19,83,3.409,238,0.003,239,0.003,289,1.605,293,0.422,295,1.816,296,0.927,297,0.816,299,1.88,375,4.53,577,2.788,648,5.596,682,1.969,799,2.7,822,1.935,1024,3.886,1547,5.479,1550,6.094,1551,7.083,1552,7.878,1553,7.878,1554,6.094,1555,6.094,1556,7.878,1557,7.878,1558,8.297,1559,6.094,1560,6.094,1561,7.878,1562,6.094,1563,7.878,1564,6.094,1565,6.094,1566,6.094,1567,6.094,1568,6.094,1569,6.094]],["title/classes/DatabaseLoggerMiddleware.html",[60,0.173,365,4.248]],["body/classes/DatabaseLoggerMiddleware.html",[3,0.063,4,0.033,5,0.033,10,0.166,11,0.904,13,0.781,14,0.369,15,0.005,16,0.061,19,0.616,22,0.995,59,0.053,60,0.156,62,1.259,65,2.372,71,1.83,76,1.237,102,1.228,117,1.066,238,0.003,239,0.003,289,1.328,293,0.425,295,2.054,296,0.967,297,0.836,299,1.887,300,5.92,318,3.838,319,3.838,320,3.838,365,6.3,474,5.92,504,5.625,528,2.016,534,1.157,687,2.544,706,2.544,799,2.545,864,3.599,876,5.045,1147,6.455,1240,3.895,1514,7.503,1516,6.803,1570,9.756,1571,4.145,1572,5.43,1573,7.566,1574,6.521,1575,6.521,1576,6.521,1577,6.521,1578,6.521,1579,6.521,1580,6.521,1581,6.521,1582,6.521,1583,10.541,1584,4.61,1585,6.521,1586,4.61,1587,6.521,1588,4.61,1589,6.521,1590,4.61,1591,6.521,1592,4.61,1593,1.655,1594,6.521,1595,4.61,1596,6.521,1597,4.61,1598,4.61,1599,4.61,1600,4.61,1601,4.61,1602,8.226,1603,4.61,1604,7.566,1605,4.61,1606,4.145,1607,4.61,1608,7.566,1609,4.61,1610,4.61,1611,4.61]],["title/entities/DbBakedRepo.html",[348,3.48,1329,1.004]],["body/entities/DbBakedRepo.html",[3,0.043,4,0.043,5,0.043,10,0.213,11,1.071,13,0.942,14,0.396,15,0.005,16,0.074,20,2.965,22,1.277,59,0.048,60,0.2,76,0.911,121,1.635,192,3.858,238,0.003,239,0.003,293,0.403,296,0.595,348,5.272,353,5.999,538,0.955,542,1.911,546,0.8,549,1.081,682,1.88,688,2.938,698,3.813,769,6.949,770,5.745,891,1.83,987,1.808,1066,1.929,1099,3.76,1184,5.225,1329,1.521,1353,3.813,1612,9.467,1613,4.399,1614,8.607,1615,2.769,1616,5.917,1617,4.374,1618,4.374,1619,5.08,1620,5.32,1621,4.203,1622,7.728,1623,5.917,1624,6.435,1625,3.372,1626,4.163,1627,5.745,1628,5.917,1629,7.728,1630,5.32,1631,3.403,1632,2.66,1633,5.49,1634,2.652,1635,2.935,1636,1.904,1637,1.904,1638,3.234,1639,5.32,1640,5.917,1641,3.439,1642,5.272,1643,5.917]],["title/entities/DbCommitAuthors.html",[351,3.48,1329,1.004]],["body/entities/DbCommitAuthors.html",[3,0.046,4,0.046,5,0.046,10,0.23,11,1.126,13,0.839,14,0.387,15,0.005,16,0.076,22,1.379,59,0.052,60,0.216,76,0.957,91,3.092,121,1.766,238,0.003,239,0.003,293,0.394,296,0.642,351,5.54,353,6.175,472,2.613,538,0.935,542,1.598,546,0.864,549,0.803,682,1.936,688,2.914,891,1.977,987,1.495,996,5.339,997,5.16,1066,2.083,1099,4.061,1184,5.352,1329,1.598,1353,4.007,1615,2.056,1617,4.597,1618,4.597,1619,5.339,1621,4.54,1625,3.001,1626,4.375,1627,4.751,1631,3.576,1632,2.795,1633,5.769,1634,2.865,1635,2.613,1636,2.056,1637,2.056,1638,3.735,1639,5.746,1641,3.714,1642,4.359,1644,6.391,1645,8.927,1646,5.321,1647,6.391,1648,8.122,1649,6.391,1650,6.391,1651,6.391]],["title/entities/DbCommits.html",[353,3.354,1329,1.004]],["body/entities/DbCommits.html",[3,0.036,4,0.036,5,0.036,10,0.179,11,0.952,13,0.953,14,0.405,15,0.005,16,0.072,22,1.071,59,0.04,60,0.168,76,1.001,121,1.372,143,2.269,238,0.003,239,0.003,293,0.418,296,0.791,348,5.796,350,2.45,351,5.796,353,4.515,538,0.99,542,1.95,546,0.672,549,1.12,682,1.986,688,2.978,768,1.898,891,1.536,987,1.842,996,6.337,997,4.364,1027,7.08,1028,6.175,1032,6.175,1066,1.619,1099,3.155,1184,2.74,1329,1.352,1353,4.192,1615,2.87,1617,4.809,1618,4.809,1619,5.586,1624,6.557,1625,3.409,1626,3.7,1627,3.691,1631,3.025,1632,3.07,1634,2.226,1635,2.968,1636,1.597,1637,1.597,1638,3.295,1641,2.886,1642,3.387,1652,4.965,1653,8.92,1654,8.92,1655,8.92,1656,8.92,1657,7.875,1658,3.321,1659,4.965,1660,4.108,1661,4.965,1662,6.869,1663,3.46,1664,4.577,1665,4.965,1666,4.965,1667,4.965,1668,6.869,1669,4.965,1670,6.869,1671,4.965,1672,4.965,1673,4.965,1674,3.733,1675,3.733,1676,4.965,1677,4.965,1678,4.965]],["title/entities/DbContribution.html",[338,3.48,1329,1.004]],["body/entities/DbContribution.html",[3,0.029,4,0.029,5,0.029,10,0.143,11,0.813,13,0.939,14,0.404,15,0.005,16,0.062,20,1.791,22,0.859,31,3.607,59,0.032,60,0.135,76,0.906,91,2.925,93,2.758,98,2.798,117,2.103,121,1.1,143,3.004,192,3.672,194,2.617,196,2.583,197,3.159,207,1.103,238,0.002,239,0.002,293,0.417,296,0.772,297,0.757,334,3.508,335,2.095,338,4,472,2.472,538,0.988,542,1.971,546,0.538,549,1.142,609,2.836,678,2.573,679,2.866,682,1.688,688,2.976,698,4.041,768,2.264,770,4.36,891,1.231,896,2.176,961,4,987,1.629,1066,1.298,1133,5.177,1134,5.798,1268,3.215,1329,1.154,1353,3.791,1461,3.162,1484,2.414,1593,3.265,1615,2.757,1617,4.349,1618,4.349,1619,5.051,1625,2.839,1626,3.159,1627,2.959,1631,2.583,1632,2.949,1634,1.784,1635,2.851,1636,1.28,1637,1.28,1638,2.914,1642,2.715,1658,1.924,1660,2.836,1663,2.954,1664,4.139,1674,2.78,1675,2.78,1679,3.98,1680,3.122,1681,5.273,1682,3.98,1683,3.98,1684,5.273,1685,5.273,1686,5.273,1687,3.98,1688,2.375,1689,3.701,1690,3.363,1691,7.86,1692,2.454,1693,4.349,1694,1.693,1695,3.569,1696,3.625,1697,3.98,1698,2.379,1699,3.98,1700,5.865,1701,3.98,1702,4.36,1703,4.592,1704,2.828,1705,3.98,1706,3.98,1707,3.98,1708,3.98,1709,2.454,1710,3.087,1711,3.237,1712,2.529,1713,3.98,1714,5.865,1715,3.98,1716,3.98,1717,2.677,1718,2.338,1719,2.893,1720,2.82,1721,2.253,1722,3.314,1723,3.98,1724,3.579]],["title/entities/DbContributionStatTimeframe.html",[42,3.624,1329,1.004]],["body/entities/DbContributionStatTimeframe.html",[3,0.033,4,0.033,5,0.033,6,3.812,10,0.163,11,0.89,13,1.072,14,0.413,15,0.004,16,0.052,22,0.974,42,4.563,59,0.036,60,0.153,76,1.145,88,4.792,91,3.837,93,3.487,121,1.247,176,5.856,177,5.856,207,1.826,212,2.868,238,0.003,239,0.003,293,0.407,296,0.454,472,3.405,538,0.964,542,1.984,549,1.156,891,1.396,907,5.016,959,2.988,960,4.775,987,2.015,1184,4.752,1186,5.101,1329,1.264,1427,5.66,1459,5.177,1593,2.925,1615,2.962,1632,3.239,1635,3.028,1636,1.452,1637,1.452,1663,4.338,1664,5.232,1689,3.056,1710,4.289,1725,8.462,1726,4.058,1727,5.856,1728,5.856,1729,6.357,1730,5.859,1731,4.514,1732,4.058,1733,4.223,1734,5.356,1735,4.514,1736,4.058,1737,5.03,1738,4.514,1739,7.326,1740,7.326,1741,7.326,1742,5.349,1743,4.058,1744,4.058]],["title/entities/DbContributionsProjects.html",[45,3.792,1329,1.004]],["body/entities/DbContributionsProjects.html",[3,0.041,4,0.041,5,0.041,6,3.77,10,0.202,11,1.035,13,0.988,14,0.41,15,0.004,16,0.06,22,1.212,45,5.552,59,0.045,60,0.19,76,1.195,91,3.776,93,3.21,121,1.553,187,6.57,190,6.986,192,3.761,194,6.119,212,3.57,238,0.003,239,0.003,293,0.395,296,0.935,422,2.801,472,3.376,520,4.91,538,0.936,542,1.952,549,1.123,682,1.539,768,2.645,891,1.738,987,1.748,1329,1.47,1449,5.306,1482,4.464,1615,2.877,1632,3.204,1635,2.995,1636,1.807,1637,1.807,1663,3.763,1664,4.817,1725,8.37,1729,6.352,1730,5.765,1742,6.219,1745,5.619,1746,7.469,1747,5.619,1748,6.219,1749,5.619,1750,7.001,1751,5.619,1752,5.095,1753,5.619]],["title/entities/DbContributorCategoryTimeframe.html",[47,3.624,1329,1.004]],["body/entities/DbContributorCategoryTimeframe.html",[3,0.034,4,0.034,5,0.034,6,3.763,10,0.168,11,0.91,13,1.058,14,0.411,15,0.004,16,0.053,22,1.005,37,5.207,47,4.665,59,0.038,60,0.158,76,1.152,91,3.799,93,3.406,102,2.476,121,1.287,176,5.957,177,5.957,181,6.477,212,2.959,238,0.003,239,0.003,293,0.399,296,0.468,472,3.387,538,0.946,542,1.964,549,1.135,891,1.441,959,3.054,960,4.882,983,5.67,987,1.933,1080,6.72,1087,5.744,1329,1.293,1459,5.25,1593,3.678,1615,2.908,1632,3.197,1635,2.989,1636,1.498,1637,1.498,1663,4.162,1664,5.111,1685,7.429,1689,3.099,1710,4.349,1726,4.187,1730,5.8,1732,4.187,1736,4.187,1739,7.429,1740,9.213,1741,7.429,1742,5.468,1743,4.187,1744,4.187,1754,9.291,1755,5.905,1756,4.657,1757,5.905,1758,4.657]],["title/entities/DbCoupon.html",[435,3.792,1329,1.004]],["body/entities/DbCoupon.html",[3,0.043,4,0.043,5,0.043,10,0.214,11,1.076,14,0.392,15,0.004,16,0.063,22,1.285,59,0.048,60,0.202,76,1.018,98,2.826,117,1.795,121,1.646,143,3.319,238,0.003,239,0.003,293,0.381,296,0.598,297,0.809,406,3.995,435,5.769,538,0.904,540,6.8,541,4.349,542,1.914,549,1.084,550,6.462,678,3.19,688,2.876,891,1.842,964,3.91,1066,1.941,1328,7.762,1329,1.528,1459,5.812,1460,7.163,1461,3.765,1484,3.194,1593,3.284,1615,1.916,1625,2.868,1631,3.418,1634,3.479,1635,2.497,1636,1.916,1637,1.916,1688,3.143,1689,3.767,1690,3.59,1692,3.247,1694,2.534,1695,3.59,1696,3.647,1717,3.543,1718,3.094,1720,3.497,1759,5.956,1760,5.956,1761,5.956,1762,5.956,1763,7.761,1764,3.461,1765,5.956,1766,5.956]],["title/entities/DbCustomer.html",[375,3.792,1329,1.004]],["body/entities/DbCustomer.html",[3,0.049,4,0.049,5,0.049,10,0.247,11,1.176,13,0.877,14,0.36,15,0.004,16,0.069,22,1.479,59,0.055,60,0.232,76,1,121,1.895,207,1.596,238,0.004,239,0.004,293,0.375,296,0.689,375,6.309,378,5.789,538,0.889,542,1.896,549,1.066,682,2.04,688,2.857,724,7.067,891,2.121,1066,2.235,1110,4.369,1329,1.671,1353,4.187,1558,8.289,1615,2.73,1617,4.804,1618,4.804,1625,3.136,1631,3.738,1632,2.921,1634,3.073,1635,2.966,1636,2.206,1637,2.206,1642,4.677,1767,6.856,1768,6.164,1769,6.856,1770,6.856,1771,6.856,1772,6.856,1773,3.073,1774,6.164]],["title/entities/DbEmoji.html",[403,3.48,1329,1.004]],["body/entities/DbEmoji.html",[3,0.034,4,0.034,5,0.034,10,0.167,11,0.909,13,0.678,14,0.4,15,0.005,16,0.067,22,1.003,59,0.038,60,0.157,76,1.065,91,2.498,98,3.008,117,1.91,121,1.285,143,2.986,186,2.425,238,0.003,239,0.003,293,0.419,296,0.908,297,0.799,396,2.955,403,4.476,405,5.084,406,4.482,407,3.057,472,2.111,538,0.993,542,1.964,546,0.629,549,1.135,609,3.172,678,2.809,679,3.129,682,1.567,688,2.981,698,4.296,891,1.439,896,1.858,964,4.16,987,1.779,1075,3.057,1268,2.745,1329,1.291,1461,2.701,1484,1.914,1593,3.244,1615,2.657,1621,3.304,1625,2.425,1632,2.842,1633,4.661,1635,2.801,1636,1.496,1637,1.496,1638,3.181,1663,2.343,1680,3.408,1688,2.657,1689,3.666,1690,3.241,1692,2.745,1693,3.714,1694,1.979,1695,3.547,1696,3.602,1698,2.78,1709,2.745,1710,3.454,1711,3.621,1712,2.955,1717,2.995,1718,2.616,1719,3.237,1720,3.079,1721,2.632,1775,4.651,1776,7.603,1777,5.652,1778,6.466,1779,4.651,1780,4.651,1781,7.426,1782,4.878,1783,5.138,1784,4.651,1785,4.169,1786,3.872,1787,4.651,1788,4.651,1789,4.651,1790,5.464,1791,6.562,1792,4.651,1793,4.651,1794,4.651,1795,4.651,1796,2.995,1797,4.182,1798,3.057,1799,4.651]],["title/entities/DbEndorsement.html",[419,3.354,1329,1.004]],["body/entities/DbEndorsement.html",[3,0.034,4,0.063,5,0.034,10,0.169,11,0.913,13,0.935,14,0.413,15,0.005,16,0.053,20,2.013,22,1.01,59,0.038,60,0.158,76,1.12,98,2.4,117,1.524,121,1.293,143,2.178,192,3.42,207,1.557,238,0.003,239,0.003,293,0.42,296,0.47,297,0.84,419,4.333,520,4.333,538,0.994,542,1.966,549,1.193,678,2.819,682,1.99,688,2.983,698,3.252,891,1.448,896,1.867,987,2.259,1329,1.297,1353,4.468,1377,6.859,1378,6.859,1379,6.859,1380,6.859,1381,7.938,1382,5.488,1385,5.161,1390,5.488,1398,5.926,1400,3.665,1461,2.713,1484,1.926,1593,2.366,1615,2.993,1617,5.125,1618,5.125,1625,2.436,1632,3.202,1635,3.056,1636,1.506,1637,1.506,1663,3.843,1688,1.896,1689,3.106,1690,2.587,1692,2.758,1694,1.991,1695,2.587,1696,2.627,1709,2.758,1718,2.627,1720,2.669,1773,2.955,1785,4.188,1786,3.897,1796,3.009,1798,3.077,1800,4.681,1801,4.681,1802,4.681,1803,4.681,1804,5.926,1805,4.681,1806,4.681,1807,6.591,1808,5.488,1809,4.681,1810,6.484,1811,4.681,1812,4.681,1813,4.681,1814,3.665]],["title/classes/DbFilteredUser.html",[60,0.173,1815,4.248]],["body/classes/DbFilteredUser.html",[3,0.051,4,0.051,5,0.051,10,0.257,11,1.206,14,0.34,15,0.004,16,0.058,59,0.058,60,0.242,76,1.151,85,4.046,88,4.941,207,1.635,238,0.004,239,0.004,293,0.384,297,0.769,534,1.791,538,0.911,542,1.923,549,1.092,688,2.885,891,2.207,1414,5.777,1448,4.801,1615,2.798,1635,3.019,1636,2.296,1637,2.296,1815,7.243,1816,9.384,1817,6.416,1818,7.821,1819,7.243,1820,7.243,1821,7.136,1822,6.416]],["title/entities/DbInsight.html",[368,2.965,1329,1.004]],["body/entities/DbInsight.html",[3,0.027,4,0.027,5,0.027,10,0.135,11,0.777,13,0.579,14,0.394,15,0.005,16,0.068,22,0.808,59,0.03,60,0.127,76,0.879,98,3.052,117,2.112,121,1.035,143,2.769,202,2.765,238,0.002,239,0.002,293,0.423,296,0.842,297,0.741,350,1.848,368,3.258,370,5.297,401,4.902,402,2.238,422,2.102,444,3.367,449,5.297,450,2.932,472,2.938,538,1.001,541,1.887,542,1.975,546,0.507,549,1.147,678,2.482,679,2.765,682,1.384,688,2.99,773,4.052,855,3.35,891,1.159,896,2.374,987,0.876,1066,1.221,1070,2.639,1076,5.953,1077,6.562,1222,3.982,1223,4.268,1268,2.345,1329,1.103,1353,3.679,1404,5.336,1412,2.784,1461,3.449,1482,3.35,1484,2.765,1495,4.772,1593,3.009,1615,2.696,1617,4.221,1618,4.221,1619,3.685,1621,3.982,1625,2.071,1631,2.468,1632,2.884,1633,4.772,1634,2.513,1635,2.795,1636,1.205,1637,1.205,1638,3.12,1680,3.011,1688,2.721,1689,3.587,1690,3.289,1692,2.345,1694,1.593,1695,3.289,1696,3.341,1709,3.506,1717,2.559,1718,2.234,1719,2.765,1720,3.02,1764,2.177,1773,2.513,1796,2.559,1823,3.745,1824,6.718,1825,6.04,1826,6.718,1827,5.593,1828,3.745,1829,3.35,1830,3.745,1831,3.367,1832,3.745,1833,5.605,1834,5.593,1835,3.745,1836,3.982,1837,3.745,1838,3.745,1839,4.667,1840,5.605,1841,4.591,1842,4.591,1843,3.745,1844,3.745,1845,3.745,1846,5.04,1847,5.605,1848,3.745,1849,5.605,1850,3.745,1851,5.04,1852,3.745,1853,3.35,1854,2.306,1855,3.745,1856,3.745,1857,5.605,1858,5.605,1859,3.745,1860,5.605,1861,2.462]],["title/entities/DbInsightMember.html",[401,3.354,1329,1.004]],["body/entities/DbInsightMember.html",[3,0.026,4,0.026,5,0.026,10,0.127,11,0.744,13,0.749,14,0.399,15,0.005,16,0.063,22,0.764,59,0.029,60,0.12,76,1.035,91,3.122,98,2.64,117,1.897,121,0.978,143,3.029,207,1.363,238,0.002,239,0.002,293,0.417,296,0.882,297,0.854,336,3.192,337,1.863,368,4.212,401,3.531,409,2.514,472,2.825,538,0.989,542,1.98,546,0.479,549,1.151,581,4.473,619,4.462,678,2.399,679,2.672,682,1.92,688,2.977,891,1.095,896,2.487,964,3.651,987,1.696,1000,2.631,1066,1.154,1268,2.247,1329,1.057,1353,2.65,1404,4.905,1412,6.816,1417,6.088,1459,3.413,1461,3.376,1484,2.983,1593,3.152,1615,2.639,1617,3.04,1618,3.04,1625,1.985,1631,2.365,1632,2.934,1634,2.408,1635,2.742,1636,1.139,1637,1.139,1638,2.716,1658,2.597,1660,3.504,1663,1.783,1674,3.078,1675,3.078,1680,2.91,1688,2.935,1689,3.683,1690,3.446,1692,2.247,1694,1.506,1695,3.446,1696,3.5,1704,2.514,1709,3.432,1717,2.452,1718,2.141,1719,2.65,1720,3.156,1730,3.122,1764,2.057,1773,3.249,1785,3.413,1796,2.452,1798,2.327,1810,4.206,1819,4.473,1820,2.947,1829,3.21,1841,3.307,1842,2.179,1853,3.21,1854,2.179,1862,8.595,1863,2.947,1864,5.792,1865,5.315,1866,5.837,1867,6.492,1868,2.838,1869,3.182,1870,4.826,1871,3.539,1872,3.539,1873,3.539,1874,2.771,1875,3.539,1876,3.539,1877,3.539,1878,1.953,1879,3.539,1880,6.516,1881,3.539,1882,3.539,1883,4.83,1884,4.473,1885,3.539,1886,5.372,1887,2.327,1888,3.539,1889,3.182,1890,3.539,1891,3.539,1892,3.539,1893,3.182,1894,3.539]],["title/entities/DbInsightRepo.html",[370,3.624,1329,1.004]],["body/entities/DbInsightRepo.html",[3,0.034,4,0.034,5,0.034,10,0.171,11,0.922,13,0.939,14,0.401,15,0.005,16,0.067,22,1.023,59,0.038,60,0.161,76,0.784,98,3.033,117,1.926,121,1.31,143,2.752,192,3.444,238,0.003,239,0.003,293,0.413,296,0.837,297,0.736,368,4.84,370,4.724,409,3.368,422,2.494,538,0.978,542,1.971,546,0.641,549,1.142,678,2.839,682,1.996,688,2.964,768,2.634,781,2.554,891,1.467,896,2.359,964,3.35,987,1.797,1066,1.545,1329,1.309,1404,5.311,1414,4.73,1461,3.428,1464,3.865,1484,2.737,1593,2.99,1613,3.524,1615,2.679,1620,4.263,1625,2.458,1630,4.263,1631,2.929,1632,2.866,1634,2.981,1635,2.822,1636,1.525,1637,1.525,1638,2.783,1658,2.292,1660,3.216,1674,3.153,1675,3.153,1680,3.444,1688,2.694,1689,3.574,1690,3.268,1692,2.783,1694,2.017,1695,3.268,1696,3.32,1709,3.485,1717,3.036,1718,2.651,1720,3.111,1764,2.755,1773,4.076,1796,3.036,1829,3.975,1831,4.263,1862,8.569,1865,5.983,1878,3.67,1895,4.263,1896,4.741,1897,3.524,1898,4.263,1899,4.741,1900,4.741,1901,4.263,1902,4.263,1903,4.741]],["title/entities/DbLog.html",[385,3.792,1329,1.004]],["body/entities/DbLog.html",[3,0.049,4,0.049,5,0.049,10,0.243,11,1.166,14,0.385,15,0.004,16,0.055,22,1.458,59,0.055,60,0.229,76,1.214,121,1.867,143,2.778,238,0.004,239,0.004,293,0.436,296,0.679,385,6.251,504,6.807,520,6.02,538,1.032,678,3.384,682,1.887,688,3.024,876,5.322,1066,2.202,1329,1.655,1631,3.703,1632,3.508,1718,3.65,1796,3.084,1904,6.755,1905,6.755,1906,6.755,1907,6.755,1908,6.755,1909,6.755,1910,6.755,1911,6.755,1912,6.755]],["title/entities/DbPRInsight.html",[408,3.624,1329,1.004]],["body/entities/DbPRInsight.html",[3,0.033,4,0.033,5,0.033,10,0.164,11,0.894,13,1.026,14,0.415,15,0.004,16,0.052,20,1.97,22,0.98,59,0.037,60,0.154,76,0.76,91,3.782,93,3.567,94,2.886,98,2.35,99,5.361,100,2.532,117,2.298,121,1.255,143,2.851,186,2.384,197,4.831,200,4.949,238,0.003,239,0.003,293,0.396,296,0.456,390,5.679,393,3.089,408,4.583,472,3.196,538,0.939,542,1.955,549,1.126,682,1.546,688,2.919,891,1.405,904,4.062,987,2.344,1066,1.481,1133,6.666,1329,1.27,1593,2.316,1615,2.885,1625,2.384,1626,3.476,1631,2.841,1632,3.086,1634,2.892,1635,2.967,1636,1.461,1637,1.461,1663,4.116,1664,3.476,1689,2.42,1695,2.532,1696,2.572,1709,2.7,1710,3.396,1711,3.561,1913,4.542,1914,7.505,1915,7.505,1916,5.579,1917,7.505,1918,5.801,1919,8.967,1920,4.542,1921,4.542,1922,8.171,1923,6.452,1924,6.452,1925,6.452,1926,8.171,1927,4.542,1928,4.542,1929,4.542,1930,4.542,1931,6.452,1932,5.801,1933,5.801,1934,6.452,1935,6.452,1936,4.542,1937,5.801,1938,4.542]],["title/entities/DbPullRequest.html",[389,2.887,1329,1.004]],["body/entities/DbPullRequest.html",[3,0.015,4,0.043,5,0.015,10,0.074,11,0.479,13,0.964,14,0.406,15,0.005,16,0.036,20,1.056,22,0.442,59,0.017,60,0.069,76,1.133,91,2.727,93,1.242,94,1.301,98,2.809,117,2.108,121,0.566,143,2.88,192,2.013,196,4.415,200,4.812,228,3.339,234,1.863,238,0.001,239,0.001,293,0.43,296,0.593,297,0.886,389,1.958,390,6.021,393,3.357,422,1.297,465,3.448,472,2.805,507,4.133,538,1.02,542,2.041,546,0.277,549,1.228,609,2.552,678,1.66,679,1.849,682,1.216,688,3.011,698,1.707,768,0.956,773,3.463,781,1.103,855,3.526,891,0.633,896,0.98,904,4.307,964,4.26,987,1.745,997,3.354,1066,0.667,1103,1.317,1184,3.256,1268,2.209,1329,0.681,1414,2.765,1427,3.878,1448,1.13,1464,2.01,1465,2.88,1593,2.769,1615,3.107,1625,1.278,1631,1.523,1632,3.075,1634,0.918,1635,3.121,1636,0.659,1637,0.659,1638,1.447,1646,1.705,1663,2.972,1664,4.155,1688,0.829,1689,3.418,1690,3.027,1692,1.447,1695,3.027,1696,3.075,1702,2.571,1703,4.133,1709,3.227,1710,4.06,1711,4.257,1718,1.379,1720,1.401,1721,3.339,1730,2.01,1897,1.522,1939,2.048,1940,4.491,1941,4.491,1942,4.491,1943,4.491,1944,4.491,1945,3.74,1946,4.491,1947,5.304,1948,4.491,1949,5.9,1950,4.491,1951,5.304,1952,6.128,1953,3.74,1954,4.491,1955,5.304,1956,4.491,1957,4.491,1958,4.619,1959,4.491,1960,4.491,1961,4.746,1962,2.571,1963,2.048,1964,5.279,1965,5.279,1966,3.11,1967,2.048,1968,2.048,1969,2.048,1970,2.048,1971,1.841,1972,2.048,1973,2.709,1974,3.11,1975,3.354,1976,2.048,1977,3.11,1978,4.395,1979,2.048,1980,2.048,1981,2.88,1982,2.048,1983,1.705,1984,2.048,1985,2.88,1986,2.048,1987,4.746,1988,2.048,1989,2.048,1990,3.11,1991,1.705,1992,2.048,1993,3.459,1994,2.048,1995,2.048,1996,3.459,1997,3.459,1998,4.491,1999,3.459,2000,3.459,2001,3.459,2002,3.459,2003,3.459,2004,2.048,2005,2.048,2006,3.459,2007,2.048,2008,2.048,2009,2.048,2010,2.048,2011,1.841,2012,2.048,2013,3.11,2014,1.841,2015,2.048,2016,2.048,2017,2.048,2018,1.841,2019,2.048,2020,4.395,2021,1.841,2022,2.048,2023,1.841,2024,2.048,2025,1.841,2026,2.048,2027,1.841,2028,2.048,2029,3.11,2030,3.11,2031,3.11,2032,2.88,2033,1.841,2034,2.048,2035,2.048,2036,1.705,2037,1.841,2038,1.522,2039,5.336,2040,4.746,2041,1.705,2042,1.841,2043,1.841,2044,1.841,2045,1.841,2046,1.705,2047,2.048]],["title/classes/DbPullRequestContributor.html",[60,0.173,1238,3.792]],["body/classes/DbPullRequestContributor.html",[3,0.047,4,0.047,5,0.047,10,0.233,11,1.134,13,0.845,14,0.35,15,0.004,16,0.052,59,0.052,60,0.219,76,0.965,143,2.704,186,3.025,196,4.155,200,4.517,228,6.674,238,0.003,239,0.003,293,0.397,297,0.723,393,3.421,465,4.409,534,1.624,538,0.94,542,1.957,549,1.127,609,3.957,679,3.695,682,1.687,688,2.92,891,2.001,904,4.155,997,5.995,1238,6.084,1247,6.436,1268,3.425,1615,2.888,1635,3.035,1636,2.081,1637,2.081,1689,3.069,1690,3.212,1709,3.425,1710,4.308,1711,4.517,1721,4.633,1868,3.27,2046,6.815,2048,6.47,2049,6.47,2050,6.47,2051,6.47]],["title/entities/DbPullRequestGitHubEvents.html",[439,3.48,1329,1.004]],["body/entities/DbPullRequestGitHubEvents.html",[3,0.019,4,0.049,5,0.019,10,0.096,11,0.596,13,0.977,14,0.408,15,0.005,16,0.035,20,1.312,22,0.574,59,0.022,60,0.09,76,1.115,91,1.636,93,1.543,98,2.901,117,2.036,121,0.736,143,2.998,196,4.404,200,5.126,238,0.002,239,0.002,293,0.432,296,0.543,297,0.884,393,3.349,422,1.611,439,2.931,465,2.315,472,2.463,507,4.856,538,1.024,542,2.05,549,1.229,609,2.077,688,3.009,768,1.187,773,3.518,781,1.434,799,0.823,855,2.568,891,0.823,896,1.217,964,3.666,987,1.791,997,2.73,1066,0.868,1103,1.636,1184,2.371,1268,1.798,1329,0.846,1427,2.825,1464,2.497,1593,2.86,1615,3.13,1625,1.588,1631,1.892,1632,3.029,1634,1.193,1635,3.147,1636,0.856,1637,0.856,1663,3.428,1664,4.551,1688,1.078,1689,3.484,1690,3.127,1692,1.798,1695,3.127,1696,3.176,1702,3.194,1703,4.856,1709,3.333,1710,4.193,1711,4.397,1718,1.713,1720,1.74,1721,3.51,1730,2.497,1897,1.979,1947,3.863,1951,3.863,1952,3.863,1955,3.863,1958,4.856,1961,5.576,1962,3.194,1971,2.393,1973,3.365,1974,3.863,1975,3.94,1977,3.863,1978,4.499,1981,3.578,1983,2.216,1985,3.578,1987,4.858,1990,3.863,1991,2.216,2013,3.863,2014,2.393,2018,2.393,2020,5.164,2021,2.393,2023,2.393,2025,2.393,2027,2.393,2029,3.863,2030,3.863,2031,3.863,2032,3.578,2033,2.393,2036,2.216,2037,2.393,2038,1.979,2039,5.697,2040,4.858,2041,2.216,2042,2.393,2043,2.393,2044,2.393,2045,2.393,2046,2.216,2052,2.662,2053,5.403,2054,5.403,2055,5.403,2056,5.403,2057,5.403,2058,5.403,2059,5.403,2060,5.403,2061,5.403,2062,5.403,2063,5.403,2064,5.403,2065,5.403,2066,5.403,2067,5.403,2068,5.403,2069,5.403,2070,5.403,2071,4.858,2072,5.403,2073,5.403,2074,5.403,2075,4.858,2076,3.578,2077,2.662,2078,2.662,2079,2.662,2080,2.662,2081,2.662,2082,2.662,2083,2.662,2084,2.662,2085,2.662,2086,2.662,2087,2.662,2088,2.662,2089,2.662,2090,2.662,2091,2.662,2092,2.662,2093,2.662,2094,2.662,2095,2.662,2096,2.662,2097,2.662,2098,2.662,2099,2.662,2100,2.662,2101,2.662]],["title/entities/DbPullRequestReview.html",[392,3.624,1329,1.004]],["body/entities/DbPullRequestReview.html",[3,0.033,4,0.033,5,0.033,10,0.164,11,0.897,13,0.668,14,0.388,15,0.005,16,0.061,22,0.984,59,0.037,60,0.154,76,0.965,98,3.27,117,2.076,121,1.26,143,3.285,196,4.066,200,4.955,238,0.003,239,0.003,293,0.408,296,0.458,297,0.834,389,4.632,390,5.809,391,2.724,392,4.595,393,3.381,465,3.485,538,0.967,542,1.957,549,1.127,609,3.128,678,2.779,679,3.095,682,1.55,688,2.952,891,1.41,904,4.155,987,1.067,1066,1.486,1329,0.897,1448,2.516,1593,3.223,1615,2.78,1625,2.391,1631,2.849,1632,2.588,1634,2.043,1635,2.888,1636,1.466,1637,1.466,1674,3.067,1675,3.067,1688,1.846,1689,3.728,1690,3.523,1692,2.707,1695,3.523,1696,3.579,1709,3.756,1710,4.726,1711,4.955,1718,2.579,1720,2.62,1721,4.256,1958,6.767,1978,5.387,1983,3.796,1991,3.796,2011,4.099,2036,3.796,2039,5.065,2102,4.559,2103,7.52,2104,6.761,2105,7.52,2106,9.733,2107,4.559,2108,6.469,2109,4.559,2110,6.469,2111,4.559,2112,4.559,2113,6.469,2114,4.559,2115,6.469,2116,4.559,2117,4.559,2118,4.559,2119,4.559,2120,4.559,2121,4.099]],["title/entities/DbRepoLoginContributions.html",[1157,3.995,1329,1.004]],["body/entities/DbRepoLoginContributions.html",[3,0.035,4,0.035,5,0.035,8,3.269,10,0.175,11,0.937,13,1.08,14,0.411,15,0.004,16,0.055,22,1.047,59,0.039,60,0.164,76,0.797,88,5.058,91,3.827,93,3.54,121,1.341,207,1.96,238,0.003,239,0.003,293,0.405,296,0.488,297,0.598,472,3.4,538,0.959,542,1.979,549,1.15,688,2.203,891,1.501,907,5.18,964,3.406,987,2.07,1157,5.294,1184,4.882,1186,5.307,1329,1.331,1427,5.816,1448,2.679,1615,2.947,1632,3.235,1635,3.024,1636,1.561,1637,1.561,1663,4.457,1664,5.312,1727,6.092,1728,6.092,1729,6.508,1730,5.843,1733,4.444,1734,5.531,1737,5.294,2122,9.399,2123,4.854,2124,4.854,2125,4.854,2126,4.854,2127,5.294,2128,3.608,2129,4.854,2130,4.854,2131,4.854,2132,4.854]],["title/entities/DbRepoToUserStargazers.html",[346,3.48,1329,1.004]],["body/entities/DbRepoToUserStargazers.html",[3,0.033,4,0.033,5,0.033,10,0.166,11,0.903,13,0.93,14,0.401,15,0.005,16,0.07,20,1.99,22,0.993,59,0.037,60,0.156,91,2.48,98,2.994,117,1.901,121,1.272,143,2.976,192,3.889,207,1.741,238,0.003,239,0.003,293,0.418,296,0.76,297,0.796,334,3.753,336,3.62,337,2.423,346,4.444,350,2.272,472,2.096,538,0.99,542,1.92,546,0.623,549,1.089,609,3.15,678,2.794,679,3.112,682,1.908,688,2.978,768,2.397,891,1.424,896,1.845,987,1.769,1268,2.726,1329,1.282,1461,2.682,1484,1.895,1593,3.234,1615,2.432,1625,3.328,1626,3.51,1632,2.602,1635,2.645,1636,1.481,1637,1.481,1638,3.44,1658,3.15,1660,3.975,1674,3.585,1675,3.585,1680,3.389,1688,2.639,1689,3.658,1690,3.226,1692,2.726,1693,3.688,1694,1.959,1695,3.535,1696,3.591,1698,2.752,1709,2.726,1710,3.429,1711,3.596,1712,2.926,1717,2.974,1718,2.597,1719,3.214,1720,3.062,1721,2.606,1773,2.921,1796,2.974,1868,3.16,1878,3.596,2133,4.604,2134,8.099,2135,4.604,2136,4.604,2137,4.444,2138,3.141,2139,4.604,2140,4.604,2141,4.604,2142,4.604,2143,4.604,2144,4.604,2145,4.604,2146,4.604,2147,4.604,2148,4.604,2149,4.14]],["title/entities/DbRepoToUserStars.html",[342,3.48,1329,1.004]],["body/entities/DbRepoToUserStars.html",[3,0.033,4,0.033,5,0.033,10,0.166,11,0.903,13,0.93,14,0.401,15,0.005,16,0.07,20,1.99,22,0.993,59,0.037,60,0.156,91,2.48,98,2.994,117,1.901,121,1.272,143,2.976,192,3.889,207,1.741,238,0.003,239,0.003,293,0.418,296,0.76,297,0.796,334,3.753,336,3.62,337,2.423,342,4.444,350,2.272,472,2.096,538,0.99,542,1.92,546,0.623,549,1.089,609,3.15,678,2.794,679,3.112,682,1.908,688,2.978,768,2.397,891,1.424,896,1.845,987,1.769,1268,2.726,1329,1.282,1461,2.682,1484,1.895,1593,3.234,1615,2.432,1625,3.328,1626,3.51,1632,2.602,1635,2.645,1636,1.481,1637,1.481,1638,3.44,1658,3.15,1660,3.975,1674,3.585,1675,3.585,1680,3.389,1688,2.639,1689,3.658,1690,3.226,1692,2.726,1693,3.688,1694,1.959,1695,3.535,1696,3.591,1698,2.752,1709,2.726,1710,3.429,1711,3.596,1712,2.926,1717,2.974,1718,2.597,1719,3.214,1720,3.062,1721,2.606,1773,2.921,1796,2.974,1868,3.16,1878,3.596,2137,4.444,2138,3.141,2150,4.604,2151,7.5,2152,4.604,2153,4.604,2154,4.604,2155,4.604,2156,4.604,2157,4.604,2158,4.604,2159,4.604,2160,4.604,2161,4.604,2162,4.604,2163,4.604,2164,4.14]],["title/entities/DbRepoToUserSubmissions.html",[344,3.48,1329,1.004]],["body/entities/DbRepoToUserSubmissions.html",[3,0.032,4,0.032,5,0.032,10,0.157,11,0.87,13,0.914,14,0.4,15,0.005,16,0.069,20,1.917,22,0.943,59,0.035,60,0.148,91,2.389,98,2.924,117,1.966,121,1.207,143,2.924,192,3.812,207,1.714,238,0.003,239,0.003,293,0.42,296,0.738,297,0.825,334,3.665,336,3.535,337,2.299,344,4.281,350,2.155,422,2.353,472,2.735,538,0.995,542,1.941,546,0.591,549,1.112,609,3.034,678,2.714,679,3.023,682,1.879,688,2.983,768,2.35,773,3.034,891,1.351,896,1.777,987,1.718,1076,4.458,1268,2.626,1329,1.235,1461,2.583,1482,3.751,1484,1.798,1593,3.178,1615,2.583,1625,3.271,1626,3.381,1632,2.763,1635,2.735,1636,1.405,1637,1.405,1638,3.359,1658,3.034,1660,3.881,1674,3.482,1675,3.482,1680,3.292,1688,2.542,1689,3.616,1690,3.474,1692,2.626,1693,3.552,1694,1.859,1695,3.474,1696,3.529,1698,2.611,1709,2.626,1710,3.303,1711,3.463,1712,2.776,1717,2.865,1718,2.502,1719,3.096,1720,2.974,1721,2.473,1773,2.813,1796,2.865,1834,3.638,1868,3.097,1878,3.463,2121,5.643,2137,4.281,2138,2.98,2165,4.369,2166,7.344,2167,8.389,2168,4.369,2169,4.369,2170,4.369,2171,6.276,2172,4.369,2173,4.369,2174,4.369,2175,4.369,2176,4.369,2177,4.369,2178,4.369,2179,4.369,2180,4.369,2181,4.369,2182,3.928]],["title/entities/DbRepoToUserVotes.html",[340,3.242,1329,1.004]],["body/entities/DbRepoToUserVotes.html",[3,0.033,4,0.033,5,0.033,10,0.166,11,0.903,13,0.93,14,0.401,15,0.005,16,0.07,20,1.99,22,0.993,59,0.037,60,0.156,91,2.48,98,2.994,117,1.901,121,1.272,143,2.976,192,3.889,207,1.741,238,0.003,239,0.003,293,0.418,296,0.76,297,0.796,334,3.753,336,3.62,337,2.423,340,4.14,350,2.272,472,2.096,538,0.99,542,1.92,546,0.623,549,1.089,609,3.15,678,2.794,679,3.112,682,1.908,688,2.978,768,2.397,891,1.424,896,1.845,987,1.769,1268,2.726,1329,1.282,1461,2.682,1484,1.895,1593,3.234,1615,2.432,1625,3.328,1626,3.51,1632,2.602,1635,2.645,1636,1.481,1637,1.481,1638,3.44,1658,3.15,1660,3.975,1674,3.585,1675,3.585,1680,3.389,1688,2.639,1689,3.658,1690,3.226,1692,2.726,1693,3.688,1694,1.959,1695,3.535,1696,3.591,1698,2.752,1709,2.726,1710,3.429,1711,3.596,1712,2.926,1717,2.974,1718,2.597,1719,3.214,1720,3.062,1721,2.606,1773,2.921,1796,2.974,1868,3.16,1878,3.596,2137,4.444,2138,3.141,2183,4.604,2184,7.5,2185,4.604,2186,4.604,2187,4.604,2188,4.604,2189,4.604,2190,4.604,2191,4.604,2192,4.604,2193,4.604,2194,4.604,2195,4.604,2196,4.604,2197,4.14]],["title/entities/DbSubscription.html",[383,3.792,1329,1.004]],["body/entities/DbSubscription.html",[3,0.022,4,0.022,5,0.022,10,0.112,11,0.674,13,0.7,14,0.399,15,0.005,16,0.048,22,0.672,37,3.58,59,0.025,60,0.105,76,0.993,91,1.852,98,3.493,117,2.253,121,0.86,143,3.389,186,1.15,207,0.915,238,0.002,239,0.002,293,0.42,296,0.313,297,0.848,383,3.617,472,1.565,538,0.995,542,2.007,546,0.421,549,1.181,678,2.214,682,1.514,688,2.984,773,3.275,891,0.963,896,2.759,959,3.15,960,5.791,964,3.925,991,2.592,1066,1.015,1087,4.304,1329,0.958,1461,4.01,1484,3.564,1593,3.444,1615,2.364,1625,2.503,1631,2.143,1632,3.237,1634,1.396,1635,2.506,1636,1.002,1637,1.002,1638,2.036,1646,2.592,1664,3.649,1688,3.507,1689,3.882,1690,3.824,1692,2.834,1693,5.514,1694,1.325,1695,3.765,1696,3.824,1704,5.984,1718,1.94,1720,3.586,1868,2.182,2198,7.987,2199,3.113,2200,5.386,2201,5.386,2202,5.386,2203,5.386,2204,5.386,2205,5.386,2206,4.691,2207,5.386,2208,6.119,2209,5.013,2210,5.386,2211,5.386,2212,4.866,2213,3.113,2214,6.596,2215,3.113,2216,4.866,2217,3.113,2218,3.113,2219,6.773,2220,3.113,2221,3.113,2222,3.113,2223,3.113,2224,3.113,2225,3.113,2226,4.375,2227,3.113,2228,3.113,2229,3.113,2230,3.113,2231,3.113,2232,3.113,2233,6.773,2234,3.113,2235,3.113,2236,3.113,2237,3.113,2238,3.113,2239,3.113,2240,3.113,2241,3.113]],["title/classes/DbTimezone.html",[60,0.173,2242,3.995]],["body/classes/DbTimezone.html",[3,0.055,4,0.055,5,0.055,6,3.657,10,0.273,11,1.251,14,0.296,15,0.004,16,0.061,59,0.061,60,0.257,76,1.176,238,0.004,239,0.004,293,0.335,534,1.906,538,0.795,542,1.777,549,0.954,688,2.73,715,7.236,891,2.349,1615,2.443,1635,2.905,1636,2.443,1637,2.443,2242,7.071,2243,7.593,2244,9.03,2245,7.593]],["title/classes/DbTopUser.html",[60,0.173,2246,4.248]],["body/classes/DbTopUser.html",[3,0.054,4,0.054,5,0.054,10,0.271,11,1.245,14,0.294,15,0.004,16,0.061,59,0.061,60,0.255,76,1.059,88,5.015,207,1.689,238,0.004,239,0.004,293,0.333,297,0.794,411,5.086,534,1.89,538,0.788,542,1.769,549,0.946,688,2.72,891,2.33,1448,4.959,1615,2.423,1635,2.891,1636,2.423,1637,2.423,1817,6.771,1822,6.771,2246,7.482,2247,8.986]],["title/entities/DbUserCollaboration.html",[414,3.624,1329,1.004]],["body/entities/DbUserCollaboration.html",[3,0.025,4,0.025,5,0.025,10,0.123,11,0.723,13,0.734,14,0.399,15,0.005,16,0.057,22,0.735,59,0.028,60,0.115,76,0.952,91,3.075,98,2.587,117,2.006,121,0.941,143,3.166,207,1.87,238,0.002,239,0.002,293,0.414,296,0.637,297,0.847,336,3.703,393,2.706,414,3.705,472,2.599,538,0.98,542,1.969,546,0.461,549,1.14,619,4.373,678,2.342,679,2.609,682,1.902,688,2.967,876,4.451,891,1.053,896,2.571,987,1.89,1066,1.11,1268,2.182,1329,1.026,1353,3.505,1439,7.435,1442,4.689,1449,2.419,1459,4.514,1461,3.325,1484,3.152,1593,3.258,1615,2.464,1617,4.021,1618,4.021,1625,1.927,1631,2.297,1632,2.894,1634,2.338,1635,2.599,1636,1.095,1637,1.095,1638,2.652,1658,2.521,1660,3.435,1663,2.627,1674,3.005,1675,3.005,1680,2.841,1688,3.102,1689,3.751,1690,3.562,1692,2.182,1694,1.449,1695,3.562,1696,3.618,1704,3.705,1709,3.38,1717,2.381,1718,2.079,1719,2.573,1720,3.272,1764,1.979,1773,2.338,1785,3.314,1796,2.381,1798,2.238,1804,4.689,1808,4.342,1810,4.084,1829,3.117,1841,4.373,1842,3.211,1853,3.117,1854,2.096,1868,2.789,1869,3.061,1870,4.712,1874,2.666,1883,6.387,1884,5.915,1887,3.428,2209,5.224,2248,6.024,2249,3.405,2250,6.339,2251,6.339,2252,5.699,2253,7.659,2254,5.215,2255,3.405,2256,3.405,2257,3.405,2258,3.405,2259,5.215,2260,4.689,2261,5.215,2262,3.405,2263,3.405,2264,3.405,2265,5.215,2266,3.405,2267,3.405,2268,3.405,2269,3.405,2270,5.215,2271,3.405,2272,5.215,2273,3.405,2274,2.163,2275,3.405]],["title/entities/DbUserHighlight.html",[395,2.887,1329,1.004]],["body/entities/DbUserHighlight.html",[3,0.021,4,0.041,5,0.021,10,0.103,11,0.631,13,0.668,14,0.405,15,0.005,16,0.057,22,0.618,59,0.023,60,0.097,76,1.131,88,3.482,91,2.861,98,2.355,117,1.998,121,0.791,143,3.117,196,2.847,198,4.251,200,1.58,207,1.736,238,0.002,239,0.002,293,0.424,296,0.868,297,0.87,336,2.847,393,2.165,395,2.578,405,3.981,406,5.258,407,1.882,411,2.578,422,2.819,455,2.226,472,3.087,538,1.005,542,2.011,546,0.387,549,1.185,678,2.096,679,2.335,682,1.624,688,2.994,698,3.482,768,1.259,773,3.956,781,2.454,855,4.218,882,1.819,891,0.886,964,4.122,984,3.483,986,2.16,987,1.066,1066,0.933,1329,0.897,1414,3.492,1448,1.58,1454,4.442,1458,4.096,1459,5.199,1460,6.407,1461,3.368,1464,4.369,1465,3.793,1466,4.096,1467,4.096,1472,2.574,1477,5.814,1481,4.096,1484,2.661,1486,2.574,1593,2.937,1615,2.888,1621,2.034,1625,2.389,1631,2.006,1632,2.816,1633,3.236,1635,2.931,1636,0.921,1637,0.921,1638,2.374,1658,1.384,1660,3.126,1664,2.454,1674,2.689,1675,2.16,1680,2.543,1688,2.619,1689,3.538,1690,3.211,1692,1.906,1694,1.218,1695,3.211,1696,3.262,1704,2.034,1717,2.08,1718,1.816,1719,2.247,1720,2.859,1730,4.369,1764,1.664,1773,2.899,1777,4.217,1790,3.793,1796,2.08,1819,3.793,1820,2.384,1829,2.723,1836,5.014,1841,2.804,1842,1.763,1853,2.723,1854,1.763,1868,2.571,1887,1.882,1889,2.574,1897,2.128,2039,5.063,2128,2.128,2248,6.143,2274,1.819,2276,2.863,2277,7.058,2278,4.724,2279,2.863,2280,2.863,2281,5.384,2282,4.555,2283,2.863,2284,2.863,2285,4.096,2286,2.863,2287,2.863,2288,2.863,2289,2.863,2290,2.863,2291,2.863,2292,2.863,2293,2.863,2294,3.793,2295,2.863,2296,2.863,2297,2.863,2298,4.555,2299,2.863,2300,2.863,2301,2.863,2302,2.863,2303,2.863,2304,2.863,2305,2.863,2306,2.863,2307,4.555,2308,2.863,2309,2.863,2310,2.863,2311,2.863,2312,2.574,2313,2.863]],["title/entities/DbUserHighlightReaction.html",[405,3.141,1329,1.004]],["body/entities/DbUserHighlightReaction.html",[3,0.028,4,0.028,5,0.028,10,0.138,11,0.792,13,0.874,14,0.402,15,0.005,16,0.068,22,0.829,59,0.031,60,0.13,76,0.89,91,3.661,98,2.751,117,1.747,121,1.062,143,2.795,207,1.591,238,0.002,239,0.002,293,0.42,296,0.759,297,0.867,336,3.004,395,3.861,397,2.297,403,4.653,404,3.455,405,4.97,406,5.258,472,3.155,538,0.994,542,1.893,546,0.52,549,1.063,609,2.763,678,2.521,679,2.808,682,1.895,688,2.923,891,1.189,896,1.618,964,2.879,987,2.152,1268,2.391,1329,1.125,1461,2.352,1484,1.582,1593,3.037,1615,2.43,1625,3.326,1626,3.078,1632,2.778,1635,2.722,1636,1.236,1637,1.236,1638,3.378,1658,3.298,1660,4.091,1663,3.436,1674,3.581,1675,3.581,1680,3.058,1688,2.314,1689,3.51,1690,2.964,1692,2.391,1693,3.234,1694,1.635,1695,3.321,1696,3.373,1698,2.297,1709,2.391,1710,3.008,1711,3.154,1712,2.442,1717,2.609,1718,2.278,1719,2.819,1720,2.763,1721,2.175,1730,3.321,1773,2.562,1778,7.53,1781,6.321,1785,4.799,1786,3.2,1796,2.609,1798,3.756,1868,2.94,2248,6.11,2274,2.442,2294,6.722,2314,3.843,2315,6.321,2316,5.341,2317,3.843,2318,3.843,2319,3.843,2320,3.843,2321,3.843,2322,3.843,2323,3.843,2324,3.843,2325,3.843,2326,3.843,2327,3.843,2328,3.843,2329,3.843,2330,3.843,2331,3.843,2332,3.843,2333,3.455,2334,3.843,2335,3.843,2336,3.843,2337,3.843,2338,3.843]],["title/classes/DbUserHighlightReactionResponse.html",[60,0.173,2339,3.624]],["body/classes/DbUserHighlightReactionResponse.html",[3,0.047,4,0.047,5,0.047,10,0.235,11,1.142,14,0.352,15,0.004,16,0.077,31,2.879,59,0.067,60,0.305,76,1.175,85,3.832,119,2.068,207,1.229,238,0.003,239,0.003,293,0.289,297,0.728,396,4.155,405,4.025,406,4.644,407,4.298,422,2.452,455,3.234,528,2.602,534,1.641,538,0.685,542,1.864,546,0.884,547,3.606,548,1.947,549,1.133,768,2.277,781,3.522,882,4.155,986,3.906,1014,2.19,1015,1.764,1066,2.686,1098,3.701,1121,2.931,1129,4.246,1131,4.099,1209,4.298,1781,6.452,2315,5.12,2316,5.12,2339,5.853,2340,7.409,2341,7.512,2342,6.452,2343,6.861,2344,6.539,2345,5.879,2346,6.539,2347,5.879,2348,4.298,2349,5.236,2350,7.409,2351,5.879,2352,5.879]],["title/classes/DbUserHighlightRepo.html",[60,0.173,2353,3.624]],["body/classes/DbUserHighlightRepo.html",[3,0.054,4,0.054,5,0.054,10,0.268,11,1.236,14,0.29,15,0.004,16,0.06,59,0.06,60,0.252,76,1.051,238,0.004,239,0.004,293,0.329,296,0.896,297,0.788,406,5.099,422,3.345,534,1.868,538,0.779,542,1.756,549,0.934,688,2.706,768,2.465,781,4.805,891,2.301,1414,5.882,1464,5.184,1613,5.53,1615,2.393,1635,2.87,1636,2.393,1637,2.393,2353,6.337,2354,8.92,2355,7.439]],["title/entities/DbUserList.html",[432,3.48,1329,1.004]],["body/entities/DbUserList.html",[3,0.029,4,0.029,5,0.029,6,3.846,8,4.181,10,0.147,11,0.828,13,0.617,14,0.392,15,0.005,16,0.063,22,0.881,59,0.033,60,0.138,76,0.917,91,2.274,98,3.149,117,2.118,121,1.128,143,2.857,207,1.626,238,0.002,239,0.002,293,0.413,296,0.898,297,0.764,336,3.425,337,2.149,432,4.075,433,7.059,455,2.345,472,2.782,538,0.978,542,1.978,546,0.552,549,1.15,678,2.611,679,2.908,682,1.841,688,2.965,773,3.76,891,1.263,896,2.449,987,0.955,1066,1.331,1076,5.525,1077,6.09,1222,4.244,1223,4.49,1268,2.5,1329,1.176,1353,2.948,1404,4.821,1461,3.559,1484,2.908,1593,3.104,1615,2.663,1617,3.382,1618,3.382,1619,3.928,1625,2.208,1631,2.631,1632,2.849,1634,2.678,1635,2.782,1636,1.313,1637,1.313,1638,2.5,1658,1.974,1660,2.889,1663,2.056,1664,3.219,1674,2.832,1675,2.832,1680,3.168,1688,2.862,1689,3.651,1690,3.393,1692,2.5,1694,1.737,1695,3.393,1696,3.447,1709,3.618,1717,2.727,1718,2.382,1719,2.948,1720,3.15,1764,2.373,1773,2.678,1785,3.796,1796,2.727,1798,2.684,1825,6.354,1829,3.571,1834,4.975,1836,4.244,1841,3.678,1842,2.513,1853,3.571,1854,2.513,1868,3.014,1874,3.196,1887,2.684,2356,4.082,2357,7.067,2358,4.082,2359,4.082,2360,4.082,2361,4.082,2362,4.082,2363,5.975,2364,4.082,2365,4.441,2366,4.082,2367,4.082,2368,4.082,2369,4.082,2370,4.082,2371,4.082]],["title/entities/DbUserListContributor.html",[27,3.354,1329,1.004]],["body/entities/DbUserListContributor.html",[3,0.033,4,0.054,5,0.033,6,3.878,8,4.957,10,0.269,11,0.89,13,0.663,14,0.394,15,0.005,16,0.066,22,0.974,27,4.223,31,2.829,59,0.036,60,0.153,76,1.109,88,4.248,91,3.102,98,2.34,117,1.486,121,1.247,143,2.692,198,4.223,207,1.826,212,2.868,238,0.003,239,0.003,293,0.416,296,0.646,297,0.832,336,3.588,337,2.376,411,3.636,433,7.119,465,4.638,472,2.879,538,0.985,542,1.953,546,0.611,549,1.124,678,2.764,682,1.774,688,2.973,768,1.775,891,1.396,896,1.819,964,4.105,987,1.056,1226,3.355,1329,1.264,1448,2.491,1461,2.644,1484,1.858,1593,2.925,1615,2.77,1625,3.307,1632,2.963,1634,2.88,1635,2.879,1636,1.452,1637,1.452,1638,3.129,1658,2.182,1660,3.106,1674,3.045,1675,3.045,1680,3.353,1688,1.828,1689,3.356,1690,2.521,1693,3.636,1694,1.92,1695,3.198,1696,3.248,1698,2.698,1717,2.933,1718,2.561,1720,2.602,1730,3.734,1773,2.88,1785,5.177,1796,2.933,1798,4.223,1868,3.136,1874,3.534,1878,2.491,2127,5.03,2128,3.355,2372,4.514,2373,6.724,2374,7.479,2375,4.514,2376,4.514,2377,4.514,2378,4.514,2379,4.514,2380,4.514,2381,4.514,2382,4.514,2383,4.514,2384,4.514,2385,4.514,2386,4.514]],["title/entities/DbUserListContributorStat.html",[30,3.354,1329,1.004]],["body/entities/DbUserListContributorStat.html",[3,0.035,4,0.035,5,0.035,8,3.269,10,0.175,11,0.937,13,1.08,14,0.411,15,0.004,16,0.055,22,1.047,30,4.444,59,0.039,60,0.164,76,0.797,88,5.058,91,3.827,93,3.54,121,1.341,207,1.96,212,3.084,238,0.003,239,0.003,293,0.405,296,0.488,297,0.598,472,3.4,538,0.959,542,1.979,549,1.15,688,2.203,891,1.501,907,5.18,964,3.406,987,2.07,1184,4.882,1186,5.307,1329,1.331,1427,5.816,1448,2.679,1615,2.947,1632,3.235,1635,3.024,1636,1.561,1637,1.561,1663,4.457,1664,5.312,1727,6.092,1728,6.092,1729,6.508,1730,5.843,1733,4.444,1734,5.531,1737,5.294,2127,5.294,2128,3.608,2387,9.399,2388,4.854,2389,4.854,2390,4.854,2391,4.854,2392,4.854,2393,4.854,2394,4.854]],["title/entities/DbUserListContributorStat-1.html",[30,2.789,186,1.568,1329,0.835]],["body/entities/DbUserListContributorStat-1.html",[3,0.034,4,0.034,5,0.034,6,3.787,8,4.688,10,0.172,11,0.925,13,1.078,14,0.41,15,0.004,16,0.054,22,1.028,30,4.388,31,4.118,59,0.039,60,0.161,76,0.787,88,5.045,91,3.815,93,3.527,121,1.317,207,1.884,212,3.028,238,0.003,239,0.003,293,0.402,296,0.479,297,0.59,433,6.951,472,3.394,538,0.953,542,1.972,549,1.144,688,2.182,891,1.474,907,5.139,964,3.363,987,2.056,1184,4.85,1186,5.255,1329,1.314,1427,5.777,1448,2.63,1615,2.93,1632,3.218,1635,3.008,1636,1.533,1637,1.533,1663,4.427,1664,5.292,1727,6.032,1728,6.032,1729,6.47,1730,5.824,1733,4.388,1734,5.487,1737,5.226,2127,5.226,2128,3.542,2395,4.766,2396,4.766,2397,4.766,2398,4.766,2399,4.766,2400,4.766,2401,4.766]],["title/entities/DbUserNotification.html",[412,3.624,1329,1.004]],["body/entities/DbUserNotification.html",[3,0.03,4,0.051,5,0.03,10,0.15,11,0.838,13,0.898,14,0.409,15,0.005,16,0.067,22,0.896,59,0.034,60,0.141,76,1.025,98,2.203,117,1.399,121,1.147,143,2.874,207,1.905,238,0.003,239,0.003,293,0.415,296,0.608,297,0.843,336,3.452,406,3.113,412,4.297,538,0.982,542,1.984,546,0.562,549,1.156,682,1.991,688,2.969,876,4.843,891,1.284,896,1.713,987,1.669,1066,1.353,1075,3.976,1132,3.423,1329,1.19,1353,4.291,1418,5.438,1448,3.338,1459,3.843,1461,3.227,1484,2.489,1593,2.814,1615,2.798,1617,4.923,1618,4.923,1625,2.235,1627,3.086,1631,2.664,1632,3.09,1634,1.861,1635,2.889,1636,1.335,1637,1.335,1638,2.531,1642,2.832,1658,2.007,1660,2.924,1663,3.047,1664,4.223,1674,2.867,1675,2.867,1688,2.45,1689,3.451,1690,3.077,1692,2.531,1694,1.766,1695,3.077,1696,3.125,1704,2.949,1709,2.531,1718,2.411,1720,2.89,1773,2.711,1774,5.438,1851,5.438,1868,2.599,1884,5.036,2248,6.058,2274,2.638,2402,4.151,2403,6.415,2404,7.492,2405,6.415,2406,6.415,2407,5.941,2408,4.151,2409,4.151,2410,6.048,2411,4.151,2412,8.782,2413,4.151,2414,4.297,2415,4.151,2416,4.151,2417,4.151,2418,6.048,2419,4.151,2420,6.048,2421,4.151,2422,5.438,2423,4.151,2424,4.151,2425,5.587,2426,4.151,2427,4.151,2428,3.733,2429,4.151,2430,3.733,2431,4.151,2432,4.151]],["title/entities/DbUserOrganization.html",[416,3.624,1329,1.004]],["body/entities/DbUserOrganization.html",[3,0.035,4,0.035,5,0.035,10,0.282,11,0.946,13,0.95,14,0.401,15,0.005,16,0.068,22,1.061,59,0.04,60,0.167,91,2.598,98,2.485,117,1.578,121,1.359,143,2.796,198,4.486,207,1.878,238,0.003,239,0.003,293,0.417,296,0.787,297,0.748,336,4.154,411,3.862,416,4.847,472,2.195,538,0.988,542,1.893,546,0.665,549,1.063,678,2.895,682,1.944,688,2.975,768,1.886,891,1.522,896,1.933,987,1.833,1329,1.343,1461,2.809,1484,2.024,1593,3.038,1615,2.521,1625,3.399,1626,3.676,1632,2.697,1635,2.722,1636,1.582,1637,1.582,1638,3.541,1658,3.299,1660,4.092,1674,3.715,1675,3.715,1680,3.512,1688,1.992,1689,3.45,1690,2.678,1693,3.862,1694,2.093,1695,3.321,1696,3.373,1698,2.94,1717,3.115,1718,2.72,1720,2.764,1773,3.059,1796,3.115,1868,3.238,1878,3.766,2137,4.654,2138,3.355,2248,6.111,2274,3.125,2433,4.919,2434,8.89,2435,7.045,2436,4.919,2437,4.919,2438,8.463,2439,4.919,2440,4.919,2441,6.824,2442,4.919,2443,4.919,2444,4.919,2445,4.919,2446,6.824]],["title/entities/DbUserRepo.html",[374,3.792,1329,1.004]],["body/entities/DbUserRepo.html",[3,0.04,4,0.04,5,0.04,6,3.868,10,0.201,11,1.03,13,0.986,14,0.381,15,0.004,16,0.06,22,1.203,59,0.045,60,0.189,76,0.876,98,2.706,117,1.719,121,1.541,143,2.455,192,3.747,207,1.795,238,0.003,239,0.003,293,0.41,296,0.84,297,0.657,372,7.099,374,5.524,422,2.787,538,0.972,542,1.993,549,1.166,678,3.089,682,1.722,688,2.958,768,2.639,781,3.004,891,1.725,896,2.105,964,3.744,1066,1.818,1329,1.463,1414,5.146,1461,3.059,1464,4.319,1484,2.295,1593,2.668,1613,4.145,1615,2.868,1625,3.529,1631,3.273,1632,2.558,1634,2.499,1635,2.987,1636,1.794,1637,1.794,1642,3.803,1688,2.258,1689,3.343,1690,2.916,1692,3.109,1694,2.372,1695,2.916,1696,2.962,1709,3.109,1718,2.962,1720,3.01,1768,5.013,1773,3.747,1868,3.044,1897,4.145,1901,5.013,2312,6.682,2447,5.576,2448,5.576,2449,7.431,2450,5.576,2451,5.576,2452,5.576]],["title/entities/DbUserToUserFollows.html",[399,3.48,1329,1.004]],["body/entities/DbUserToUserFollows.html",[3,0.036,4,0.036,5,0.036,10,0.181,11,0.958,13,0.956,14,0.402,15,0.005,16,0.064,22,1.082,59,0.041,60,0.17,91,2.632,98,3.107,117,1.973,121,1.385,143,3.057,207,1.866,238,0.003,239,0.003,293,0.409,296,0.504,297,0.818,399,4.716,472,2.224,538,0.969,542,1.953,546,0.678,549,1.124,609,3.343,678,2.925,679,3.257,682,1.631,688,2.954,891,1.551,896,1.958,987,1.852,1268,2.893,1329,1.361,1461,2.846,1484,2.063,1593,3.322,1615,2.546,1625,3.419,1626,3.724,1632,2.724,1635,2.745,1636,1.613,1637,1.613,1638,2.893,1680,3.548,1688,2.8,1689,3.722,1690,3.348,1692,2.893,1693,3.913,1694,2.133,1695,3.631,1696,3.689,1698,2.996,1709,2.893,1710,3.639,1711,3.816,1712,3.185,1717,3.156,1718,2.756,1719,3.411,1720,3.205,1721,2.837,1773,3.099,1796,3.156,1868,2.882,1878,3.816,2137,4.716,2138,3.419,2248,6.025,2453,5.013,2454,6.59,2455,6.312,2456,5.013,2457,5.013,2458,6.216,2459,5.013,2460,5.013,2461,5.013,2462,5.013,2463,4.507]],["title/entities/DbUserTopRepo.html",[410,3.995,1329,1.004]],["body/entities/DbUserTopRepo.html",[3,0.032,4,0.032,5,0.032,10,0.267,11,0.881,13,0.92,14,0.399,15,0.005,16,0.069,20,1.941,22,0.96,59,0.036,60,0.151,91,2.42,98,2.948,117,1.872,121,1.229,143,2.942,192,3.838,198,4.179,207,1.723,238,0.003,239,0.003,293,0.414,296,0.745,297,0.787,334,3.695,335,2.341,336,3.564,410,4.978,411,5.729,472,2.045,538,0.981,542,1.906,546,0.602,549,1.075,609,3.074,678,2.741,679,3.053,682,1.889,688,2.968,768,2.708,891,1.376,896,1.8,987,1.736,1268,2.66,1329,1.251,1461,2.617,1484,1.831,1593,3.197,1613,3.307,1615,2.387,1625,3.291,1626,3.425,1632,2.553,1635,2.604,1636,1.431,1637,1.431,1638,3.387,1658,3.074,1660,3.913,1674,3.517,1675,3.517,1680,3.326,1688,2.575,1689,3.631,1690,3.177,1693,3.598,1694,1.892,1695,3.495,1696,3.55,1698,2.658,1709,2.66,1710,3.346,1711,3.508,1712,2.826,1717,2.902,1718,2.534,1719,3.136,1720,3.005,1721,2.518,1773,2.85,1796,2.902,1868,3.118,1878,3.508,1895,3.999,1898,3.999,2137,4.336,2138,3.034,2248,6.064,2274,2.826,2464,4.448,2465,5.293,2466,4.448,2467,4.448,2468,4.448,2469,4.448,2470,4.448,2471,4.448,2472,4.448,2473,4.448,2474,4.448,2475,4.448]],["title/entities/DbWorkspace.html",[441,3.141,1329,1.004]],["body/entities/DbWorkspace.html",[3,0.029,4,0.029,5,0.029,10,0.144,11,0.817,14,0.389,15,0.005,16,0.072,22,0.865,59,0.032,60,0.136,76,1.013,98,3.129,117,1.987,121,1.108,143,2.839,202,2.879,207,1.109,238,0.002,239,0.002,293,0.429,296,0.863,297,0.76,402,2.397,441,3.631,443,5.478,445,5.733,446,3.34,447,5.733,448,3.34,449,5.478,450,3.141,538,0.99,542,1.909,546,0.542,549,1.204,678,2.585,679,2.879,682,1.441,688,2.978,891,1.241,896,2.434,1066,1.308,1268,2.468,1329,1.161,1353,3.805,1461,3.537,1484,2.879,1495,4.969,1496,6.695,1593,3.085,1615,2.25,1617,4.365,1618,4.365,1619,5.07,1621,5.478,1625,2.179,1631,2.597,1632,2.407,1633,5.837,1634,2.644,1635,2.481,1636,1.29,1637,1.29,1638,3.438,1680,3.136,1688,2.833,1689,3.638,1690,3.372,1692,2.468,1694,1.706,1695,3.372,1696,3.425,1709,3.595,1717,2.692,1718,2.351,1719,2.91,1720,3.123,1752,4.023,1764,2.331,1796,2.692,1827,3.34,1829,3.525,1841,5.611,1842,5.611,1853,3.525,1854,2.469,1861,4.598,2476,4.011,2477,5.824,2478,4.011,2479,4.011,2480,4.011,2481,4.011,2482,4.384,2483,2.982,2484,4.011,2485,5.898,2486,5.898,2487,4.011,2488,5.898,2489,5.898,2490,4.011,2491,5.898,2492,4.011,2493,4.011,2494,5.898,2495,5.898,2496,4.011,2497,5.898,2498,5.898,2499,4.011,2500,4.011,2501,2.982,2502,4.011]],["title/entities/DbWorkspaceInsight.html",[449,3.624,1329,1.004]],["body/entities/DbWorkspaceInsight.html",[3,0.031,4,0.031,5,0.031,10,0.156,11,0.866,13,0.645,14,0.388,15,0.005,16,0.069,22,0.937,59,0.035,60,0.147,76,0.944,98,3.217,117,2.043,121,1.2,143,2.919,238,0.003,239,0.003,293,0.412,296,0.736,297,0.781,368,4.653,369,3.616,441,4.929,449,4.439,538,0.975,542,1.939,546,0.587,549,1.109,678,2.705,679,3.013,682,1.876,688,2.961,891,1.343,896,2.502,987,1.016,1066,1.416,1268,2.615,1329,1.23,1404,4.994,1417,5.439,1461,3.636,1484,3.013,1496,6.63,1593,3.171,1615,2.355,1625,3.264,1631,2.752,1632,2.519,1634,2.801,1635,2.576,1636,1.397,1637,1.397,1638,3.063,1658,3.021,1660,3.871,1674,3.47,1675,3.47,1680,3.281,1688,2.965,1689,3.695,1690,3.467,1692,2.615,1694,1.848,1695,3.467,1696,3.521,1709,3.696,1717,2.853,1718,2.491,1719,3.083,1720,3.242,1764,2.524,1773,2.801,1796,2.853,1829,3.735,1841,3.847,1842,2.674,1853,3.735,1854,2.674,1865,4.993,1868,2.276,1878,2.397,1887,2.855,2482,5.951,2483,3.228,2501,4.645,2503,7.053,2504,4.343,2505,6.306,2506,4.343,2507,4.343,2508,4.343,2509,6.249,2510,4.343,2511,4.343,2512,4.343,2513,3.4,2514,4.343,2515,3.4,2516,4.343,2517,3.4,2518,4.343,2519,3.4]],["title/entities/DbWorkspaceMember.html",[443,3.624,1329,1.004]],["body/entities/DbWorkspaceMember.html",[3,0.029,4,0.029,5,0.029,10,0.146,11,0.825,13,0.615,14,0.39,15,0.005,16,0.067,22,0.877,59,0.048,60,0.138,76,0.915,98,3.144,117,1.997,121,1.123,143,2.852,207,1.459,238,0.002,239,0.002,293,0.412,296,0.708,297,0.763,336,3.418,337,2.139,441,4.778,443,4.23,538,0.977,542,1.95,546,0.55,549,1.12,674,5.431,678,2.605,679,2.901,682,1.838,688,2.963,891,1.257,896,2.445,987,0.951,1066,1.325,1132,2.3,1268,2.492,1329,1.172,1353,2.938,1417,6.144,1461,3.553,1484,2.901,1496,6.707,1503,5.24,1507,3.287,1593,3.099,1615,2.497,1617,3.371,1618,3.371,1619,3.915,1625,3.19,1631,2.622,1632,2.671,1634,2.67,1635,2.658,1636,1.307,1637,1.307,1638,2.949,1658,2.879,1660,3.752,1674,3.341,1675,3.341,1680,3.16,1688,2.855,1689,3.648,1690,3.388,1692,2.492,1694,1.729,1695,3.388,1696,3.441,1709,3.612,1717,2.719,1718,2.374,1719,2.938,1720,3.143,1764,2.362,1773,2.67,1796,2.719,1829,3.559,1841,3.666,1842,2.502,1853,3.559,1854,2.502,1863,3.384,1868,3.009,1878,2.243,1887,2.672,1966,3.654,2482,5.769,2483,3.021,2501,4.427,2503,7.052,2505,6.141,2513,3.182,2515,3.182,2517,3.182,2519,3.182,2520,4.064,2521,4.064,2522,4.064,2523,5.354,2524,4.064,2525,4.064,2526,4.064,2527,4.064,2528,4.064,2529,4.064,2530,5.354,2531,5.354,2532,3.654,2533,3.654]],["title/entities/DbWorkspaceOrg.html",[445,3.792,1329,1.004]],["body/entities/DbWorkspaceOrg.html",[3,0.031,4,0.031,5,0.031,10,0.156,11,0.866,13,0.645,14,0.388,15,0.005,16,0.069,22,0.937,59,0.035,60,0.147,76,0.944,98,3.217,117,2.043,121,1.2,143,2.919,187,5.732,207,1.175,238,0.003,239,0.003,293,0.412,296,0.736,297,0.781,336,3.526,337,2.286,441,4.929,445,4.645,538,0.975,542,1.939,546,0.587,549,1.109,678,2.705,679,3.013,682,1.876,688,2.961,891,1.343,896,2.502,987,1.016,1066,1.416,1268,2.615,1329,1.23,1461,3.636,1484,3.013,1496,6.63,1593,3.171,1615,2.355,1625,3.264,1631,2.752,1632,2.519,1634,2.801,1635,2.576,1636,1.397,1637,1.397,1638,3.063,1658,3.021,1660,3.871,1674,3.47,1675,3.47,1680,3.281,1688,2.965,1689,3.695,1690,3.467,1692,2.615,1694,1.848,1695,3.467,1696,3.521,1709,3.696,1717,2.853,1718,2.491,1719,3.083,1720,3.242,1748,8.277,1764,2.524,1773,2.801,1796,2.853,1829,3.735,1841,3.847,1842,2.674,1853,3.735,1854,2.674,1868,2.276,1878,2.397,1887,2.855,2482,5.951,2483,3.228,2501,4.645,2503,7.053,2505,6.306,2513,3.4,2515,3.4,2517,3.4,2519,3.4,2523,5.619,2534,4.343,2535,4.343,2536,4.343,2537,4.343,2538,4.343,2539,4.343,2540,4.343,2541,4.343,2542,4.343,2543,4.343]],["title/entities/DbWorkspaceRepo.html",[447,3.792,1329,1.004]],["body/entities/DbWorkspaceRepo.html",[3,0.031,4,0.031,5,0.031,10,0.156,11,0.866,13,0.645,14,0.388,15,0.005,16,0.069,22,0.937,59,0.035,60,0.147,76,0.944,98,3.217,117,2.043,121,1.2,143,2.919,192,3.281,238,0.003,239,0.003,293,0.412,296,0.736,297,0.781,334,3.655,335,2.286,441,4.929,447,4.645,538,0.975,542,1.939,546,0.587,549,1.109,678,2.705,679,3.013,682,1.876,688,2.961,768,2.622,891,1.343,896,2.502,987,1.016,1066,1.416,1268,2.615,1329,1.23,1417,5.439,1461,3.636,1484,3.013,1496,6.63,1593,3.171,1615,2.355,1625,3.264,1631,2.752,1632,2.519,1634,2.801,1635,2.576,1636,1.397,1637,1.397,1638,3.063,1658,3.021,1660,3.871,1674,3.47,1675,3.47,1680,3.281,1688,2.965,1689,3.695,1690,3.467,1692,2.615,1694,1.848,1695,3.467,1696,3.521,1709,3.696,1717,2.853,1718,2.491,1719,3.083,1720,3.242,1764,2.524,1773,2.801,1796,2.853,1829,3.735,1841,3.847,1842,2.674,1853,3.735,1854,2.674,1868,2.276,1878,2.397,1887,2.855,2482,5.951,2483,3.228,2501,4.645,2503,7.053,2505,6.306,2513,3.4,2515,3.4,2517,3.4,2519,3.4,2544,4.343,2545,4.343,2546,4.343,2547,4.343,2548,6.249,2549,4.343,2550,4.343,2551,4.343,2552,4.343,2553,4.343,2554,4.343]],["title/controllers/EmojiController.html",[551,1.194,2555,4.248]],["body/controllers/EmojiController.html",[3,0.048,4,0.048,5,0.048,10,0.24,14,0.326,15,0.005,16,0.081,19,0.891,59,0.054,60,0.226,71,1.268,72,1.876,119,2.515,238,0.003,239,0.003,289,1.7,293,0.295,295,1.313,296,0.67,297,0.589,299,1.359,403,5.691,538,0.698,546,0.902,549,0.838,551,1.56,553,1.843,555,2.465,568,2.953,639,3.809,640,3.379,641,3.129,642,2.465,668,2.328,671,2.501,799,2.063,810,2.394,1014,2.233,1015,1.799,1236,4.849,1240,2.745,1241,3.102,1242,3.162,1243,3.102,1244,3.162,1797,8.831,2555,6.947,2556,6.669,2557,9.54,2558,6.669,2559,4.549,2560,5.691,2561,6.669,2562,6.669,2563,4.294,2564,6.669,2565,6.768,2566,5.996,2567,5.553,2568,6.669,2569,6.669,2570,6.669,2571,6.669,2572,6.669]],["title/modules/EmojiModule.html",[240,1.281,265,3.792]],["body/modules/EmojiModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.082,19,0.984,24,2.112,59,0.06,60,0.249,64,2.221,238,0.004,239,0.004,240,2.226,242,2.721,243,3.427,248,3.427,249,2.803,250,2.762,253,3.591,265,7.628,288,3.031,303,3.362,403,5.024,553,2.45,2555,7.921,2565,7.628,2566,6.622,2567,6.132,2573,6.622,2574,6.622,2575,7.365,2576,7.365,2577,7.365]],["title/injectables/EmojiService.html",[17,0.905,2565,3.792]],["body/injectables/EmojiService.html",[3,0.047,4,0.047,5,0.047,10,0.232,14,0.319,15,0.005,16,0.082,17,1.449,19,0.861,20,2.878,22,1.391,23,2.53,24,1.849,25,2.13,26,2.25,59,0.052,60,0.218,62,2.23,64,1.944,65,1.697,67,3.943,68,2.231,71,1.553,72,1.847,82,2.611,83,2.79,102,2.176,118,4.299,119,2.494,121,1.782,122,2.125,124,4.649,238,0.003,239,0.003,289,1.664,293,0.396,295,1.607,296,0.821,297,0.722,299,1.664,403,4.397,799,1.994,822,2.047,1014,2.735,1015,1.739,1093,3.473,1137,5.57,1145,5.57,1172,4.397,1173,3.969,1174,3.853,2565,6.071,2567,5.368,2578,6.447,2579,6.447,2580,6.447,2581,8.167,2582,6.447,2583,6.447,2584,6.447,2585,6.447,2586,6.447,2587,5.368]],["title/controllers/EndorsementController.html",[551,1.194,2588,4.248]],["body/controllers/EndorsementController.html",[3,0.025,4,0.025,5,0.025,10,0.123,14,0.384,15,0.005,16,0.072,19,0.455,59,0.028,60,0.115,65,0.896,68,1.235,71,1.691,72,2.104,76,1.207,102,1.39,119,2.634,122,1.357,207,1.581,238,0.002,239,0.002,289,1.062,293,0.383,295,1.707,296,0.872,297,0.767,299,1.767,419,6.3,465,4.673,528,1.39,538,0.908,546,0.461,549,0.655,551,0.797,553,0.941,555,1.258,568,3.477,580,3.877,583,1.834,596,4.689,603,2.627,635,2.573,636,1.526,638,2.745,639,2.894,640,3.602,641,3.404,642,1.258,644,3.498,645,2.666,668,1.188,671,3.335,682,1.665,768,2.551,799,2.684,810,1.222,885,2.531,944,3.557,1014,1.14,1015,0.918,1236,5.275,1240,3.325,1241,1.584,1242,1.614,1243,1.584,1244,1.614,1374,6.611,1381,7.228,1507,4.459,1748,4.342,1752,2.322,1814,7.333,2559,2.322,2563,3.657,2588,4.342,2589,3.405,2590,7.659,2591,7.104,2592,7.659,2593,7.104,2594,6.886,2595,7.659,2596,7.659,2597,7.104,2598,3.405,2599,3.405,2600,3.405,2601,3.405,2602,3.405,2603,5.215,2604,3.405,2605,3.061,2606,5.366,2607,5.215,2608,3.405,2609,3.405,2610,3.405,2611,3.405,2612,6.886,2613,3.405,2614,4.689,2615,3.405,2616,3.405,2617,3.061,2618,3.405,2619,3.405,2620,3.405,2621,3.405,2622,5.915,2623,3.405,2624,3.405,2625,3.405,2626,3.405,2627,3.405,2628,3.405,2629,3.877,2630,2.531,2631,3.405,2632,3.405,2633,1.584,2634,4.324,2635,3.061,2636,3.061,2637,2.835,2638,2.835,2639,2.666,2640,3.061,2641,3.405,2642,3.061,2643,3.405,2644,2.835,2645,3.405,2646,3.061,2647,3.405,2648,6.886,2649,3.405,2650,3.405,2651,3.405,2652,3.405,2653,3.405,2654,3.405,2655,3.705,2656,3.557,2657,3.405,2658,3.405,2659,4.689,2660,3.405,2661,3.405,2662,3.405,2663,3.405,2664,3.405,2665,3.405,2666,4.342,2667,4.084,2668,3.405,2669,3.405,2670,3.405,2671,3.061,2672,3.405,2673,3.405]],["title/modules/EndorsementModule.html",[240,1.281,266,3.792]],["body/modules/EndorsementModule.html",[3,0.047,4,0.047,5,0.047,15,0.005,16,0.084,19,0.878,24,1.885,59,0.053,60,0.223,64,1.982,238,0.003,239,0.003,240,2.075,241,5.966,242,2.429,243,3.195,248,3.195,249,2.502,250,2.465,253,3.348,254,3.459,259,7.091,266,7.86,283,5.966,288,3.403,303,3.001,355,5.911,361,4.484,419,4.321,553,2.285,1381,5.147,2588,7.531,2634,7.181,2635,5.911,2638,5.474,2639,6.474,2640,5.911,2674,5.911,2675,6.574,2676,5.911,2677,5.911,2678,6.574,2679,4.484,2680,4.484,2681,5.911,2682,6.574]],["title/injectables/EndorsementService.html",[17,0.905,2634,3.48]],["body/injectables/EndorsementService.html",[3,0.028,4,0.028,5,0.028,10,0.142,13,0.882,14,0.368,15,0.005,16,0.071,17,1.034,18,2.71,19,0.527,20,2.337,22,0.851,23,1.549,24,1.132,59,0.032,60,0.134,62,1.591,64,1.19,65,1.534,67,3.201,68,2.147,71,1.761,72,2.15,76,1.208,82,4.074,83,3.697,85,2.71,87,3.286,90,2.692,102,1.052,119,2.677,122,1.516,202,2.852,203,5.151,207,1.096,238,0.002,239,0.002,247,4.761,289,1.187,293,0.422,295,1.854,296,0.947,297,0.833,299,1.919,419,2.594,577,3.024,600,3.703,682,1.577,768,2.603,799,2.806,814,1.502,822,1.253,1014,1.321,1015,1.064,1016,2.429,1021,5.259,1023,3.49,1024,1.947,1137,3.975,1145,3.975,1187,4.563,1374,6.068,1507,3.216,1641,4.965,1814,4.563,2594,5.24,2614,3.548,2617,5.24,2634,3.975,2636,3.548,2637,3.286,2638,3.286,2659,5.24,2683,3.946,2684,5.828,2685,5.828,2686,5.828,2687,3.588,2688,3.975,2689,3.946,2690,3.946,2691,5.828,2692,3.946,2693,5.828,2694,3.946,2695,3.946,2696,5.828,2697,3.946,2698,5.828,2699,3.946,2700,5.828,2701,3.946,2702,3.946,2703,5.828,2704,3.946,2705,3.588,2706,3.946,2707,5.828,2708,3.946,2709,3.946,2710,3.946,2711,3.946,2712,3.946,2713,3.946,2714,8.163,2715,3.946,2716,6.929,2717,3.946,2718,6.929,2719,5.828,2720,5.828,2721,3.946,2722,5.828,2723,3.946,2724,3.946,2725,3.946,2726,3.946,2727,3.946,2728,3.946]],["title/guards/EndorsementTokenGuard.html",[2639,3.995,2729,4.587]],["body/guards/EndorsementTokenGuard.html",[3,0.049,4,0.049,5,0.049,10,0.244,14,0.329,15,0.005,16,0.068,17,1.494,19,0.904,59,0.055,60,0.229,62,1.848,68,2.335,71,1.743,238,0.004,239,0.004,289,1.715,293,0.372,295,1.657,296,0.846,297,0.744,299,1.379,305,5.691,306,3.735,393,2.266,455,2.656,461,5.299,472,2.708,773,3.272,810,2.43,885,5.031,1572,5.635,1752,4.616,2639,6.592,2644,5.635,2646,8.24,2730,6.768,2731,9.165,2732,6.768,2733,9.59,2734,5.299,2735,6.768,2736,8.419,2737,8.622,2738,6.768,2739,9.165,2740,6.768,2741,6.768,2742,6.768,2743,6.768,2744,6.768,2745,8.419]],["title/classes/FilterListContributorsDto.html",[60,0.173,2746,3.995]],["body/classes/FilterListContributorsDto.html",[3,0.034,4,0.034,5,0.034,6,3.847,10,0.169,11,0.913,13,1.022,14,0.408,15,0.005,16,0.062,31,3.36,59,0.038,60,0.258,71,0.89,76,1.209,100,2.994,117,2.094,142,2.804,186,3.617,189,4.682,200,3.637,238,0.003,239,0.003,293,0.411,297,0.883,455,3.728,528,2.413,534,1.175,538,0.948,542,1.87,546,0.633,547,3.152,548,1.393,549,0.828,694,5.974,715,5.42,842,2.955,896,2.472,986,4.138,987,1.938,990,2.464,1069,3.548,1070,2.7,1103,3.447,1111,3.393,1112,3.32,1119,2.409,1129,4.171,1131,4.026,1195,5.015,1209,4.333,1268,2.758,1365,2.797,1366,2.797,1448,2.583,1593,1.68,1702,4.9,2032,5.488,2345,5.926,2746,5.161,2747,9.5,2748,3.897,2749,7.629,2750,4.9,2751,5.42,2752,4.682,2753,4.208,2754,4.681,2755,4.208,2756,4.681,2757,6.591,2758,6.591,2759,6.591,2760,8.281,2761,4.681,2762,4.681,2763,6.591,2764,6.591,2765,5.161,2766,4.681,2767,4.681,2768,4.681,2769,3.665,2770,4.681,2771,6.859,2772,4.333,2773,4.9,2774,4.208,2775,4.681,2776,4.681,2777,4.681,2778,6.591,2779,6.591,2780,4.681,2781,4.681,2782,3.665,2783,3.479,2784,3.479]],["title/classes/FilterOptionsDto.html",[60,0.173,2785,3.792]],["body/classes/FilterOptionsDto.html",[3,0.036,4,0.036,5,0.036,10,0.182,11,0.964,13,0.927,14,0.402,15,0.005,16,0.069,59,0.041,60,0.235,76,1.172,78,3.413,93,2.496,100,2.729,117,2.341,119,2.43,140,2.351,142,3.642,186,3.164,238,0.003,239,0.003,293,0.434,297,0.923,422,2.607,528,2.814,534,1.269,538,1.028,542,1.368,546,0.684,547,3.259,548,1.505,768,2.197,781,2.723,842,2.266,896,1.431,959,2.351,1015,1.875,1066,2.267,1069,3.234,1070,2.813,1078,4.836,1098,2.861,1100,3.837,1101,3.66,1103,3.417,1105,3.746,1106,4.282,1110,2.601,1111,3.579,1112,2.546,1113,2.723,1114,2.937,1115,4.004,1116,2.601,1117,2.789,1118,2.861,1119,2.601,1120,2.861,1121,3.117,1122,2.66,1123,2.789,1124,2.789,1125,3.579,1126,2.861,1127,2.601,1128,2.861,1129,4.024,1130,3.021,1131,3.885,1132,2.861,1391,4.208,2349,5.05,2752,4.939,2785,5.169,2786,8.977,2787,5.05,2788,5.422,2789,5.894,2790,3.757,2791,4.208,2792,3.957,2793,4.208,2794,3.59,2795,3.957,2796,4.544,2797,3.447,2798,3.757]],["title/classes/FilteredUsersDto.html",[60,0.173,2799,4.248]],["body/classes/FilteredUsersDto.html",[3,0.042,4,0.042,5,0.042,8,3.705,10,0.21,11,1.062,13,1.018,14,0.406,15,0.005,16,0.069,59,0.047,60,0.29,71,1.111,76,1.07,85,3.564,117,2.28,186,3.774,238,0.003,239,0.003,293,0.401,297,0.803,465,5.079,528,2.696,534,1.466,538,0.895,539,2.224,545,2.791,546,0.79,548,1.739,549,0.734,842,3.435,896,2.67,987,1.793,990,3.075,1069,3.978,1070,3.027,1103,3.256,1111,3.945,1112,3.861,1119,3.007,1129,3.834,1131,3.702,1195,5.623,1240,3.154,1365,3.491,1366,3.491,1447,4.864,1483,5.252,2349,4.87,2750,5.697,2751,6.076,2755,5.252,2769,4.574,2772,5.038,2773,5.697,2774,5.252,2783,4.343,2784,4.343,2799,6.381,2800,9.428,2801,4.864,2802,5.252,2803,5.252,2804,5.697,2805,5.842,2806,5.252,2807,5.252]],["title/classes/FollowManyUsersDto.html",[60,0.173,2808,4.248]],["body/classes/FollowManyUsersDto.html",[3,0.052,4,0.052,5,0.052,10,0.26,11,1.214,14,0.368,15,0.004,16,0.071,59,0.058,60,0.297,76,1.156,238,0.004,239,0.004,293,0.319,455,3.702,534,1.812,538,0.756,539,2.748,542,1.724,545,3.191,546,0.977,547,3.335,548,2.15,549,0.907,688,2.671,882,4.588,984,4.719,986,4.649,1209,4.746,1448,3.985,1468,6.492,2342,7.867,2455,5.976,2801,6.012,2808,7.295,2809,8.761,2810,6.512,2811,7.22,2812,7.22,2813,7.22]],["title/classes/GenerateCodeExplanationDto.html",[60,0.173,910,3.995]],["body/classes/GenerateCodeExplanationDto.html",[3,0.043,4,0.043,5,0.043,10,0.216,11,1.081,13,0.948,14,0.406,15,0.004,16,0.063,59,0.049,60,0.264,76,1.17,117,1.804,140,2.793,238,0.003,239,0.003,293,0.405,534,1.507,538,0.961,539,3.493,541,5.169,542,1.919,545,3.464,546,0.812,547,3.299,548,1.788,549,1.288,835,5.855,879,6.252,904,4.188,910,6.109,987,2.147,1194,3.49,1338,4.463,1341,6.443,1342,4.463,1343,5.8,1344,5.8,1345,5.8,1346,5.8,1347,5.8,1348,5.8,1349,5.8,1350,5.8,1351,5.8,1353,3.849,1354,4.265,1356,4.265,1364,5.507,1365,3.589,1366,3.589,1367,4.265,1368,4.265,1369,4.265,1370,4.265,1371,4.265,1373,4.463,2814,7.447,2815,6.004,2816,6.787,2817,6.004,2818,6.004,2819,6.004,2820,6.004]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[60,0.173,941,3.995]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[3,0.043,4,0.043,5,0.043,10,0.214,11,1.076,13,0.945,14,0.405,15,0.004,16,0.063,59,0.048,60,0.263,76,1.168,117,1.795,140,2.77,238,0.003,239,0.003,293,0.404,534,1.495,538,0.958,539,3.482,541,5.162,542,1.914,545,3.455,546,0.806,547,3.286,548,1.773,549,1.222,835,5.84,879,6.236,904,4.178,925,6.24,938,7.428,941,6.077,987,2.14,1194,3.461,1338,4.427,1341,6.418,1342,4.427,1343,5.769,1344,5.769,1345,5.769,1346,5.769,1347,5.769,1348,5.769,1349,5.769,1350,5.769,1351,5.769,1353,3.829,1354,4.231,1356,4.231,1364,5.486,1365,3.559,1366,3.559,1367,4.231,1368,4.231,1369,4.231,1370,4.231,1371,4.231,1373,4.427,2814,7.428,2816,6.76,2821,5.355,2822,5.956,2823,5.355,2824,5.956,2825,5.355]],["title/classes/GenerateCodeTestSuggestionDto.html",[60,0.173,969,3.995]],["body/classes/GenerateCodeTestSuggestionDto.html",[3,0.047,4,0.047,5,0.047,10,0.236,11,1.143,13,0.979,14,0.403,15,0.004,16,0.067,59,0.053,60,0.279,76,1.064,140,3.047,238,0.003,239,0.003,293,0.399,534,1.644,538,0.945,539,3.437,541,5.206,542,1.866,545,3.452,546,0.886,547,3.14,548,1.95,549,1.227,879,6.422,904,4.174,925,5.627,969,6.459,972,7.046,987,2.218,1338,4.869,1353,4.07,1354,4.653,1356,4.653,1364,5.738,1365,3.915,1366,3.915,1367,4.653,1368,4.653,1369,4.653,1370,4.653,1371,4.653,2814,7.421,2816,7.07,2821,5.889,2823,5.889,2825,5.889,2826,6.55]],["title/classes/GeneratePullRequestDescriptionDto.html",[60,0.173,2827,3.995]],["body/classes/GeneratePullRequestDescriptionDto.html",[3,0.037,4,0.037,5,0.037,10,0.186,11,0.977,13,0.891,14,0.408,15,0.004,16,0.057,59,0.042,60,0.239,76,1.218,117,1.63,140,2.397,196,4.207,200,4.764,238,0.003,239,0.003,293,0.412,297,0.763,393,3.199,455,2.765,534,1.294,538,0.977,539,3.286,542,1.964,545,3.292,546,0.697,547,3.286,548,1.534,549,1.292,833,6.421,835,5.564,879,5.942,893,5.517,904,4.207,986,3.34,987,2.02,996,4.632,1121,3.159,1129,3.599,1131,3.475,1194,2.995,1341,5.969,1342,3.831,1343,5.238,1344,5.238,1345,5.238,1346,5.238,1347,5.238,1348,5.238,1349,5.238,1350,5.238,1351,5.238,1353,3.476,1354,3.661,1356,3.661,1358,4.291,1359,5.867,1360,5.867,1361,5.867,1362,6.686,1364,5.102,1365,3.08,1366,3.08,1367,3.661,1368,3.661,1369,3.661,1370,3.661,1371,3.661,1372,4.291,1373,3.831,1962,3.831,2814,7.48,2816,6.287,2827,5.517,2828,5.153,2829,8.03,2830,8.127,2831,5.153,2832,5.153,2833,5.153,2834,5.153,2835,5.153,2836,5.153,2837,5.153,2838,5.153,2839,5.153,2840,5.153,2841,5.153,2842,4.633,2843,5.153,2844,5.153,2845,5.153,2846,5.153]],["title/controllers/HealthController.html",[551,1.194,2847,4.248]],["body/controllers/HealthController.html",[3,0.041,4,0.041,5,0.041,10,0.203,15,0.005,16,0.072,19,0.753,59,0.046,60,0.191,62,1.539,65,2.522,71,1.423,72,2.17,238,0.003,239,0.003,289,1.525,293,0.331,299,1.525,305,4.756,306,3.11,310,4.693,422,3.357,469,4.413,521,4.693,525,6.232,526,6.619,528,1.502,538,0.784,546,0.762,551,1.319,553,1.557,555,2.083,568,3.169,640,3.403,641,3.151,642,2.083,668,3.411,671,2.807,799,2.315,1482,5.351,2847,6.232,2848,5.636,2849,9.579,2850,9.579,2851,5.636,2852,7.484,2853,7.484,2854,5.636,2855,5.636,2856,7.484,2857,5.636,2858,7.484,2859,7.484,2860,7.484,2861,8.403,2862,7.484,2863,7.484,2864,5.636,2865,5.636,2866,5.636,2867,5.636,2868,5.636,2869,6.729,2870,7.484,2871,5.636,2872,5.636,2873,5.636,2874,5.636,2875,5.636,2876,5.636,2877,7.484,2878,5.636,2879,5.636,2880,5.636,2881,5.636,2882,5.636,2883,5.636,2884,5.636,2885,5.636,2886,5.636,2887,5.636,2888,5.636,2889,5.636,2890,5.636,2891,5.636,2892,5.636,2893,5.636]],["title/modules/HealthModule.html",[240,1.281,267,3.792]],["body/modules/HealthModule.html",[3,0.057,4,0.057,5,0.057,15,0.004,16,0.079,19,1.049,59,0.063,60,0.266,238,0.004,239,0.004,240,2.312,242,2.902,267,6.847,288,3.232,309,8.282,310,6.539,553,2.546,2847,8.139,2894,7.853,2895,7.853]],["title/controllers/HighlightController.html",[551,1.194,2896,4.248]],["body/controllers/HighlightController.html",[3,0.026,4,0.026,5,0.026,8,2.659,10,0.132,13,1.012,14,0.394,15,0.005,16,0.076,19,0.488,25,1.207,26,1.274,28,1.802,59,0.03,60,0.124,71,1.638,72,2.091,77,3.085,78,2.193,119,2.46,202,2.264,207,1.034,238,0.002,239,0.002,289,1.12,293,0.381,295,1.696,296,0.929,297,0.761,299,1.755,350,1.802,393,2.216,395,5.134,396,2.32,397,2.183,406,4.896,411,3.113,528,0.973,538,0.902,546,0.494,549,1.043,551,0.854,553,1.009,555,1.349,568,3.438,573,4.962,577,3.323,583,1.967,635,1.802,636,1.637,637,3.021,639,3.362,640,3.591,641,3.325,642,1.349,662,1.554,668,1.274,670,2.511,671,3.231,682,1.96,795,4.37,801,3.79,802,1.698,810,1.311,987,1.942,1014,1.223,1015,1.483,1236,5.153,1240,1.503,1241,1.698,1242,1.731,1243,1.698,1244,1.731,1684,4.945,1777,4.919,1836,5.897,1916,4.089,2339,3.907,2348,5.663,2353,4.7,2606,5.018,2629,4.089,2633,1.698,2688,3.752,2896,4.58,2897,3.652,2898,6.404,2899,6.617,2900,7.364,2901,6.621,2902,7.364,2903,7.364,2904,7.364,2905,6.617,2906,3.652,2907,3.652,2908,5.5,2909,3.386,2910,5.5,2911,4.307,2912,5.474,2913,4.945,2914,4.7,2915,3.652,2916,3.652,2917,3.041,2918,5.949,2919,3.652,2920,3.283,2921,3.283,2922,3.652,2923,3.652,2924,3.652,2925,3.041,2926,3.652,2927,3.652,2928,3.283,2929,3.652,2930,3.652,2931,3.283,2932,3.283,2933,3.283,2934,3.283,2935,3.652,2936,3.652,2937,3.652,2938,5.5,2939,3.652,2940,4.168,2941,3.876,2942,1.922,2943,4.513,2944,3.652,2945,2.859,2946,3.652,2947,3.652,2948,3.652,2949,3.041,2950,5.509,2951,3.652,2952,3.283,2953,3.041,2954,3.652,2955,3.652,2956,3.652,2957,3.386,2958,3.652,2959,3.652,2960,3.652,2961,3.283,2962,3.283,2963,3.652,2964,3.283,2965,3.283,2966,3.652,2967,3.283,2968,3.283,2969,3.652,2970,3.652]],["title/modules/HighlightModule.html",[240,1.281,268,3.792]],["body/modules/HighlightModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.082,19,0.984,24,2.112,59,0.06,60,0.249,64,2.221,238,0.004,239,0.004,240,2.226,242,2.721,243,3.427,248,3.427,249,2.803,250,2.762,268,7.628,283,6.133,288,3.649,303,3.362,361,5.024,395,4.168,396,4.68,397,4.402,553,2.45,2896,7.921,2971,7.365,2972,7.365,2973,7.365,2974,6.622,2975,7.365]],["title/classes/HighlightOptionsDto.html",[60,0.173,2348,3.354]],["body/classes/HighlightOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.185,11,0.973,13,0.932,14,0.396,15,0.005,16,0.07,31,3.526,59,0.057,60,0.271,76,1.098,78,3.433,85,2.383,93,2.52,100,2.755,117,2.305,119,2.438,140,2.383,142,3.664,186,3.182,207,1.32,238,0.003,239,0.003,293,0.421,297,0.908,396,3.256,405,3.155,406,4.643,407,3.369,422,2.632,455,2.755,528,2.776,534,1.286,538,0.999,542,1.775,546,0.693,547,3.278,548,1.526,549,1.005,768,2.493,781,2.761,842,2.297,896,1.451,959,2.383,986,2.429,1014,1.716,1015,1.382,1066,2.61,1069,3.265,1070,2.484,1078,4.859,1098,2.9,1100,3.874,1101,3.695,1103,3.434,1105,2.761,1106,2.761,1109,4.267,1110,2.638,1111,3.613,1112,2.582,1113,2.761,1114,2.978,1115,4.033,1116,2.638,1117,2.828,1118,2.9,1119,2.638,1120,2.9,1121,3.86,1122,2.697,1123,2.828,1124,2.828,1125,3.613,1126,2.9,1127,2.638,1128,2.9,1129,3.86,1131,3.727,1209,3.369,1781,4.013,2315,4.013,2316,4.013,2339,3.64,2340,7.198,2341,4.267,2342,4.013,2343,4.267,2347,4.608,2348,4.614,2349,5.472,2350,6.311,2351,4.608,2352,4.608,2792,4.013,2976,5.125,2977,5.125]],["title/injectables/HttpLoggerMiddleware.html",[17,0.905,362,4.248]],["body/injectables/HttpLoggerMiddleware.html",[3,0.045,4,0.045,5,0.045,10,0.227,11,1.114,14,0.246,15,0.005,16,0.075,17,1.427,19,0.841,59,0.065,60,0.213,65,2.333,68,2.211,71,1.685,102,2.143,117,1.86,148,5.75,238,0.003,239,0.003,289,1.638,293,0.355,295,1.238,296,0.632,297,0.556,299,1.282,300,4.292,318,5.239,319,5.239,320,5.239,362,7.379,393,3.305,474,6.371,523,5.978,822,1.998,849,6.93,876,4.674,1103,2.395,1571,5.657,1572,5.239,1808,5.239,2978,8.863,2979,5.978,2980,8.042,2981,9.34,2982,6.292,2983,8.042,2984,6.292,2985,8.042,2986,5.657,2987,5.657,2988,6.292,2989,6.292,2990,5.657,2991,6.292,2992,6.292,2993,8.042,2994,8.397,2995,8.042,2996,6.292,2997,6.292,2998,6.292,2999,6.292,3000,6.292,3001,6.292]],["title/controllers/InsightController.html",[551,1.194,3002,4.248]],["body/controllers/InsightController.html",[3,0.034,4,0.034,5,0.034,10,0.171,13,1,14,0.387,15,0.005,16,0.078,19,0.633,25,1.566,26,1.655,59,0.038,60,0.161,68,1.574,71,1.265,72,1.996,77,2.887,102,1.263,119,1.67,122,1.73,207,1.444,238,0.003,239,0.003,289,1.355,293,0.339,295,1.512,296,0.881,297,0.679,299,1.565,368,4.84,393,2.573,528,1.263,538,0.804,546,0.641,549,1.101,551,1.109,553,1.31,555,1.752,568,3.218,570,3.501,571,3.117,573,3.975,577,3.305,583,2.554,636,2.125,637,3.036,638,3.501,639,3.507,640,3.373,641,3.123,642,1.752,662,2.017,668,1.655,670,2.164,671,2.881,682,1.996,795,4.384,796,2.683,801,3.954,802,2.205,810,1.702,814,1.805,987,1.949,1015,1.279,1070,3.305,1240,1.951,1404,5.098,1836,4.724,1861,4.372,2563,2.44,2606,4.714,2630,3.524,2633,2.205,2688,4.536,2917,3.947,2940,4.348,2941,4.044,2942,2.495,2953,3.947,3002,5.538,3003,4.741,3004,8.328,3005,8.328,3006,8.328,3007,4.741,3008,5.916,3009,4.741,3010,4.741,3011,4.741,3012,4.741,3013,3.712,3014,5.538,3015,4.741,3016,5.98,3017,5.208,3018,4.741,3019,4.741,3020,4.741,3021,3.712,3022,4.724,3023,4.263,3024,4.263,3025,4.741,3026,4.724,3027,6.651,3028,5.208,3029,3.712,3030,3.947,3031,3.524,3032,5.24,3033,3.368,3034,3.712,3035,4.741,3036,3.947,3037,3.712,3038,4.741,3039,3.947,3040,4.741,3041,4.741,3042,3.712,3043,4.741,3044,4.741,3045,6.651,3046,4.741,3047,4.741,3048,4.741,3049,3.234,3050,4.741]],["title/injectables/InsightMemberService.html",[17,0.905,3051,3.624]],["body/injectables/InsightMemberService.html",[3,0.032,4,0.032,5,0.032,10,0.158,13,0.982,14,0.356,15,0.005,16,0.074,17,1.116,18,2.924,19,0.585,20,2.454,21,3.871,22,0.945,23,1.719,24,1.256,25,1.447,26,1.528,59,0.035,60,0.148,62,1.716,64,1.32,65,1.655,67,3.363,68,2.16,69,2.87,71,1.808,72,2.114,76,1.163,77,2.813,82,3.588,83,3.183,85,2.037,102,1.167,117,1.013,119,2.224,122,1.913,234,3.387,238,0.003,239,0.003,247,4.916,289,1.281,293,0.412,295,1.796,296,0.917,297,0.807,299,1.859,401,4.834,402,2.617,455,3.154,472,1.409,577,3.135,682,1.754,685,5.454,799,2.275,814,1.667,822,1.39,1014,1.466,1015,1.181,1016,2.696,1021,2.696,1023,4.287,1024,3.101,1103,1.667,1187,3.429,1839,7.598,1861,2.879,1865,2.987,1868,1.595,2587,3.646,2687,3.87,2705,3.87,3051,4.466,3052,8.548,3053,4.379,3054,5.652,3055,7.354,3056,5.652,3057,6.287,3058,5.652,3059,4.379,3060,4.379,3061,5.652,3062,6.287,3063,4.379,3064,4.379,3065,4.379,3066,8.133,3067,8.511,3068,8.037,3069,4.379,3070,6.287,3071,4.379,3072,4.379,3073,6.287,3074,4.379,3075,5.652,3076,4.379,3077,3.255,3078,3.937,3079,4.379,3080,4.379,3081,4.379,3082,4.379,3083,4.379,3084,4.379,3085,4.379,3086,6.287,3087,4.379,3088,4.379,3089,3.646,3090,4.379,3091,4.379,3092,4.379,3093,4.379,3094,4.379,3095,4.379,3096,4.379]],["title/classes/InsightOptionsDto.html",[60,0.173,3097,4.587]],["body/classes/InsightOptionsDto.html",[3,0.036,4,0.036,5,0.036,10,0.179,11,0.951,13,0.921,14,0.399,15,0.005,16,0.064,37,2.964,59,0.055,60,0.232,76,1.136,78,3.385,93,2.463,100,2.693,117,2.35,119,2.419,140,2.306,142,3.613,186,3.138,202,2.041,238,0.003,239,0.003,293,0.432,297,0.921,411,2.806,528,2.809,534,1.245,538,1.024,546,0.671,547,3.233,548,1.476,768,2.175,842,2.223,896,1.404,959,2.306,983,2.964,1014,1.66,1015,1.337,1066,2.237,1069,3.191,1070,2.429,1075,3.26,1078,4.803,1098,2.806,1100,3.787,1101,3.612,1103,3.511,1105,3.697,1106,4.239,1109,4.129,1110,2.552,1111,3.532,1112,2.498,1113,2.671,1114,2.882,1115,3.964,1116,2.552,1117,2.736,1118,2.806,1119,2.552,1120,2.806,1121,3.076,1122,2.61,1123,2.736,1124,2.736,1125,3.532,1126,2.806,1127,2.552,1128,2.806,1129,3.997,1130,2.964,1131,3.858,1132,3.884,1266,5.101,1975,3.151,2349,5,2752,3.522,2772,3.26,2787,5,2788,5.367,2789,5.86,2790,3.686,2794,4.875,2798,3.686,3097,6.17,3098,7.423,3099,4.959,3100,4.959,3101,7.869,3102,4.959,3103,4.959,3104,4.129,3105,4.129,3106,4.129,3107,4.129,3108,4.129]],["title/classes/InsightPageOptionsDto.html",[60,0.173,3008,3.624]],["body/classes/InsightPageOptionsDto.html",[3,0.044,4,0.044,5,0.044,10,0.221,11,1.098,13,0.989,14,0.399,15,0.004,16,0.05,59,0.05,60,0.208,78,3.69,93,2.843,100,3.108,117,2.382,119,2.538,140,2.858,142,3.939,186,3.421,238,0.003,239,0.003,293,0.423,297,0.91,528,2.745,534,1.543,538,1.003,842,2.755,896,1.74,959,2.858,1014,2.058,1015,1.657,1066,2.582,1069,3.684,1070,3.102,1078,5.161,1098,3.478,1100,4.371,1101,4.169,1103,3.647,1105,3.31,1106,3.31,1110,3.163,1111,4.077,1112,3.096,1113,3.31,1114,3.571,1115,4.415,1116,3.163,1117,3.391,1118,3.478,1119,3.163,1120,3.478,1121,3.55,1122,3.234,1123,3.391,1124,3.391,1125,4.077,1126,3.478,1127,3.163,1128,3.478,3008,5.626,3098,5.116]],["title/injectables/InsightRepoService.html",[17,0.905,3109,3.792]],["body/injectables/InsightRepoService.html",[3,0.042,4,0.042,5,0.042,10,0.211,13,1,14,0.334,15,0.005,16,0.08,17,1.363,19,0.783,20,2.776,22,1.264,23,2.3,24,1.68,59,0.047,60,0.198,62,2.097,64,1.767,65,2.022,68,1.387,71,1.46,72,1.996,122,1.525,192,2.627,202,2.412,238,0.003,239,0.003,289,1.565,293,0.378,295,1.686,296,0.861,297,0.757,299,1.565,350,2.891,370,4.163,428,4.589,472,1.885,668,2.045,682,1.208,687,3.234,698,2.891,706,3.234,707,5.238,764,5.456,767,4.589,768,2.512,775,3.997,799,2.65,822,1.861,864,3.234,865,3.608,899,3.317,996,3.853,1089,4.589,1404,3.085,1408,6.201,1410,3.997,1411,4.88,1414,3.608,1865,3.997,3052,8.174,3066,6.395,3077,4.356,3109,5.709,3110,5.861,3111,7.68,3112,7.68,3113,5.861,3114,6.731,3115,5.861,3116,7.68,3117,7.68,3118,5.861,3119,7.68,3120,5.861,3121,4.589,3122,5.269,3123,4.589,3124,5.861,3125,5.269,3126,5.861,3127,5.269,3128,5.269,3129,5.861,3130,4.88,3131,5.861,3132,5.269,3133,5.269,3134,5.269,3135,4.88,3136,4.88,3137,5.269,3138,5.861,3139,4.88,3140,5.269,3141,5.861]],["title/modules/InsightsModule.html",[240,1.281,269,3.792]],["body/modules/InsightsModule.html",[3,0.043,4,0.043,5,0.043,15,0.005,16,0.085,19,0.789,24,1.694,59,0.048,60,0.2,64,1.781,207,1.451,238,0.003,239,0.003,240,1.938,241,5.801,242,2.183,243,2.984,248,2.984,249,2.249,250,2.215,253,3.127,254,3.23,269,7.891,273,6.895,283,5.801,288,3.178,303,2.697,350,2.915,361,4.03,368,3.434,370,5.484,401,5.075,402,3.531,428,4.626,429,5.312,553,2.133,1404,4.527,2679,4.03,2680,4.03,3002,7.161,3031,4.392,3032,7.075,3033,4.197,3051,6.895,3077,5.739,3109,7.71,3142,5.312,3143,5.312,3144,5.312,3145,5.908,3146,5.908,3147,7.161,3148,7.161,3149,7.72,3150,4.626,3151,5.908,3152,4.919,3153,5.908]],["title/injectables/InsightsService.html",[17,0.905,3032,3.48]],["body/injectables/InsightsService.html",[3,0.026,4,0.026,5,0.026,10,0.129,13,1.029,14,0.352,15,0.005,16,0.074,17,0.96,18,3.037,19,0.477,20,2.612,21,3.437,22,0.771,23,1.403,24,1.025,25,1.181,26,1.247,59,0.029,60,0.121,62,1.477,64,1.632,65,1.719,67,3.047,68,2.31,69,2.47,71,1.675,72,2.085,76,0.77,77,2.796,82,3.567,83,2.342,91,2.06,102,2.194,118,3.834,119,1.828,121,1.495,122,2.346,124,4.219,234,3.924,238,0.002,239,0.002,289,1.102,293,0.406,295,1.775,296,0.906,297,0.797,299,1.837,300,2.438,368,4.785,401,2.349,402,2.136,428,2.798,472,1.15,577,3.424,668,1.247,682,1.815,685,5.069,687,1.972,698,2.67,706,1.972,707,3.691,764,3.844,767,2.798,768,0.988,775,2.438,799,2.253,814,2.06,822,1.135,864,1.972,865,2.2,1014,1.197,1015,0.964,1023,4.308,1024,2.67,1070,1.265,1089,2.798,1093,1.925,1172,3.691,1173,3.331,1174,3.234,1404,4.636,1495,4.639,1641,3.145,1680,1.602,1864,4.022,1865,3.691,1868,2.378,1870,2.657,1893,7.036,1902,6.549,2687,3.331,2705,3.331,3008,6.075,3031,2.657,3032,3.691,3034,2.798,3049,3.691,3061,5.872,3077,2.657,3078,3.213,3114,5.833,3121,2.798,3122,3.213,3123,2.798,3130,2.976,3132,3.213,3133,3.213,3134,3.213,3135,2.976,3136,2.976,3137,3.213,3154,3.574,3155,5.411,3156,3.691,3157,4.506,3158,5.411,3159,5.411,3160,5.411,3161,5.411,3162,3.574,3163,3.574,3164,5.411,3165,5.411,3166,3.574,3167,3.574,3168,4.022,3169,3.574,3170,4.506,3171,3.574,3172,3.574,3173,5.411,3174,3.574,3175,5.411,3176,3.574,3177,5.411,3178,3.574,3179,5.411,3180,3.574,3181,3.574,3182,6.53,3183,3.574,3184,3.574,3185,5.411,3186,5.411,3187,7.284,3188,7.284,3189,6.53,3190,6.53,3191,5.411,3192,3.574,3193,4.865,3194,3.574,3195,3.574,3196,3.574,3197,3.574,3198,2.976,3199,3.574,3200,3.574,3201,3.574,3202,3.574,3203,5.411,3204,3.213,3205,3.574,3206,3.574,3207,3.574,3208,3.574,3209,5.411,3210,5.411,3211,3.574,3212,3.574]],["title/controllers/IssueSummaryController.html",[551,1.194,3213,4.248]],["body/controllers/IssueSummaryController.html",[3,0.047,4,0.047,5,0.047,10,0.233,14,0.32,15,0.005,16,0.079,19,0.864,59,0.052,60,0.219,68,1.531,71,1.23,72,1.85,102,1.724,122,1.683,238,0.003,239,0.003,289,1.667,293,0.286,295,1.273,296,0.65,297,0.572,299,1.318,393,2.166,528,1.724,538,0.677,546,0.875,549,0.812,551,1.514,553,1.788,555,2.391,568,3.616,603,3.259,635,3.192,636,2.9,637,3.736,638,4.308,641,3.069,642,2.391,662,2.753,668,2.258,670,2.953,671,2.426,784,5.817,789,5.817,791,5.201,795,4.308,796,3.662,797,5.817,799,2.001,800,5.039,801,4.213,802,3.009,803,3.009,805,5.066,807,5.066,810,2.323,811,5.817,814,2.463,820,6.378,1422,7.785,1733,4.253,3213,6.815,3214,6.815,3215,8.484,3216,6.47,3217,6.47,3218,8.185,3219,6.674,3220,6.47,3221,6.47,3222,6.47,3223,6.47]],["title/modules/IssueSummaryModule.html",[240,1.281,270,3.792]],["body/modules/IssueSummaryModule.html",[3,0.051,4,0.051,5,0.051,15,0.004,16,0.079,19,0.948,59,0.057,60,0.24,238,0.004,239,0.004,240,2.176,242,2.622,243,3.35,248,3.35,249,2.701,250,2.661,253,3.51,254,3.627,270,7.786,272,6.686,288,3.568,422,2.661,423,4.015,424,5.555,553,2.395,807,5.555,819,6.379,820,6.157,821,6.379,3213,7.793,3214,5.907,3219,7.904,3224,6.379,3225,6.379,3226,6.379,3227,7.095]],["title/injectables/IssueSummaryService.html",[17,0.905,3219,3.792]],["body/injectables/IssueSummaryService.html",[3,0.042,4,0.042,5,0.042,10,0.21,13,0.883,14,0.334,15,0.005,16,0.069,17,1.36,19,0.781,59,0.047,60,0.198,62,1.595,65,2.252,68,1.814,71,1.457,72,1.762,74,3.224,76,1.14,238,0.003,239,0.003,289,1.561,293,0.378,295,1.683,296,0.859,297,0.756,299,1.561,422,2.191,423,3.306,522,4.15,549,0.734,568,3.337,687,3.224,706,3.224,791,3.712,799,2.371,803,2.717,805,4.574,810,2.097,820,6.873,822,1.855,824,5.252,825,5.444,826,4.15,827,5.783,828,5.252,831,5.697,832,5.969,833,6.697,834,5.252,835,5.266,836,3.985,837,4.15,838,4.15,839,3.84,840,4.343,842,2.619,843,4.15,844,4.343,845,4.343,846,4.343,847,4.343,848,4.864,849,3.985,850,4.574,851,5.252,852,5.252,853,4.15,854,5.038,855,3.491,858,5.444,859,4.15,860,4.343,861,5.252,862,4.864,863,4.15,864,5.011,865,3.596,866,4.15,867,4.15,961,3.985,1122,3.075,1422,7.11,1427,5.038,1733,3.84,3214,7.56,3215,6.891,3219,5.697,3228,7.664,3229,5.842,3230,5.252,3231,5.842,3232,5.252,3233,7.664,3234,5.842,3235,5.842,3236,5.842,3237,5.842]],["title/modules/LogModule.html",[240,1.281,271,3.792]],["body/modules/LogModule.html",[3,0.051,4,0.051,5,0.051,15,0.004,16,0.082,19,0.946,24,2.03,59,0.057,60,0.24,238,0.004,239,0.004,240,2.173,242,2.617,243,3.346,248,3.346,249,2.695,250,2.655,253,3.506,254,3.622,271,7.784,288,2.914,303,3.232,304,7.784,306,3.908,385,5.264,474,4.83,491,5.896,1508,8.323,1519,7.558,1534,6.366,3238,6.366,3239,6.366,3240,6.366,3241,7.081,3242,6.366,3243,7.081,3244,7.081]],["title/injectables/LogService.html",[17,0.905,1519,3.792]],["body/injectables/LogService.html",[3,0.05,4,0.05,5,0.05,10,0.248,14,0.332,15,0.005,16,0.08,17,1.51,19,0.919,20,2.946,22,1.485,23,2.701,24,1.973,59,0.056,60,0.233,62,2.322,65,1.812,68,1.629,71,1.309,72,1.903,122,1.79,238,0.004,239,0.004,289,1.733,293,0.376,295,1.674,296,0.855,297,0.752,299,1.402,385,5.116,455,2.701,491,5.73,799,2.129,803,3.201,822,2.185,899,3.895,1429,8.032,1514,5.73,1519,6.324,3242,6.187,3245,6.882,3246,8.507,3247,6.882,3248,6.882,3249,8.507,3250,8.507,3251,6.882,3252,6.882,3253,6.882,3254,8.507,3255,6.882,3256,6.882,3257,6.882]],["title/classes/NewMember.html",[60,0.173,1505,3.995]],["body/classes/NewMember.html",[3,0.047,4,0.047,5,0.047,10,0.234,11,1.137,13,0.929,14,0.394,15,0.005,16,0.076,59,0.066,60,0.32,76,1.191,88,4.807,102,1.73,238,0.003,239,0.003,293,0.397,296,0.824,402,3.88,455,2.548,534,1.63,542,1.77,545,3.441,546,0.878,547,3.423,548,1.933,549,1.224,674,6.405,682,2.008,984,3.498,986,4.263,990,3.417,1224,4.612,1225,5.084,1226,4.826,1417,3.997,1492,4.826,1493,8.495,1494,5.837,1495,4.612,1496,6.211,1497,5.837,1503,7.023,1504,5.084,1505,7.041,1506,5.837,1507,3.583,3258,6.493,3259,6.493,3260,6.493]],["title/modules/OpenAiModule.html",[240,1.281,272,3.354]],["body/modules/OpenAiModule.html",[3,0.054,4,0.054,5,0.054,15,0.004,16,0.072,19,1,59,0.06,60,0.253,238,0.004,239,0.004,240,2.247,242,2.766,243,3.46,248,3.46,249,2.849,250,2.807,253,3.626,254,3.746,272,6.844,422,2.807,423,4.236,827,6.396,836,5.105,869,6.232,3261,6.73,3262,6.73,3263,6.73,3264,7.485]],["title/injectables/OpenAiService.html",[17,0.905,827,3.049]],["body/injectables/OpenAiService.html",[0,3.589,3,0.043,4,0.043,5,0.043,10,0.216,13,0.895,14,0.338,15,0.005,16,0.07,17,1.385,19,0.802,59,0.049,60,0.203,62,1.639,68,2.052,71,1.142,72,1.786,76,1.17,102,1.6,122,2.03,146,4.463,147,4.463,148,3.696,149,4.463,186,2.219,207,1.129,238,0.003,239,0.003,289,1.589,293,0.345,295,1.536,296,0.784,297,0.69,299,1.223,305,5.518,306,3.314,423,4.906,523,4.463,603,3.025,635,2.962,674,5.129,799,1.857,810,2.155,814,2.286,822,1.906,827,4.663,849,4.095,854,6.032,868,6.497,869,7.217,870,5.398,871,5.398,873,8.765,874,5.398,875,5.398,876,3.49,877,7.015,878,8.25,879,6.252,880,5.398,881,5.398,882,3.815,883,5.398,884,5.398,885,4.463,886,5.398,887,4.999,888,5.398,889,5.398,890,5.398,891,1.857,892,5.398,893,4.701,894,5.398,895,7.015,896,1.701,897,5.398,898,5.398,899,3.398,900,5.398,901,5.398,902,5.398,2734,4.701,3265,7.802,3266,6.004,3267,6.004]],["title/classes/PageDto.html",[25,1.685,60,0.173]],["body/classes/PageDto.html",[3,0.048,4,0.048,5,0.048,10,0.237,11,1.147,14,0.396,15,0.005,16,0.077,25,2.735,59,0.053,60,0.306,62,1.798,124,5.058,238,0.003,239,0.003,293,0.4,295,1.296,296,0.662,297,0.582,455,3.248,528,2.661,534,1.653,538,0.867,545,3.297,546,0.891,548,1.961,899,5.538,984,3.548,986,4.291,990,3.466,1070,2.331,1091,7.535,1093,3.548,1199,7.442,1200,6.674,1202,5.921,1203,5.921,1204,5.921,1206,5.921,1207,5.921,1208,8.139,1209,4.329,1210,5.921,1211,5.921,3268,6.586,3269,8.277,3270,6.586]],["title/classes/PageMetaDto.html",[60,0.173,124,2.517]],["body/classes/PageMetaDto.html",[3,0.038,4,0.038,5,0.038,10,0.189,11,0.99,13,1.065,14,0.405,15,0.005,16,0.058,59,0.042,60,0.178,62,1.95,118,4.79,119,1.32,124,3.524,148,4.397,186,3.216,238,0.003,239,0.003,293,0.424,295,1.035,296,0.528,297,0.465,455,2.803,472,2.298,528,2.794,534,1.32,538,0.983,539,3.573,542,2.005,545,3.497,546,0.711,549,1.179,773,4.208,896,2.578,987,2.286,1067,7.294,1068,7.294,1069,3.773,1070,3.606,1071,7.294,1072,4.726,1073,6.815,1075,4.695,1076,6.183,1077,6.815,1080,5.309,1082,7.247,1083,7.825,1085,5.947,1087,4.538,1089,5.592,1091,3.908,1092,4.726,2783,6.03,2784,5.309,3271,8.136,3272,5.257,3273,7.142,3274,5.257,3275,5.257,3276,5.257,3277,5.257,3278,5.257,3279,5.257,3280,5.257,3281,5.257,3282,5.257,3283,5.257,3284,5.257,3285,5.257]],["title/interfaces/PageMetaParameters.html",[0,3.049,1073,3.995]],["body/interfaces/PageMetaParameters.html",[0,4.624,2,5.752,3,0.056,4,0.056,5,0.056,10,0.279,11,1.265,13,1.003,14,0.356,15,0.004,16,0.063,59,0.063,118,5.282,119,2.65,238,0.004,239,0.004,1015,2.087,1070,2.738,1073,7.15,1091,5.752,3271,6.442,3286,7.737]],["title/classes/PageOptionsDto.html",[60,0.173,119,1.281]],["body/classes/PageOptionsDto.html",[3,0.036,4,0.036,5,0.036,10,0.18,11,0.955,13,1.063,14,0.407,15,0.005,16,0.069,59,0.04,60,0.267,71,0.948,78,3.774,93,3.056,100,3.34,117,2.38,119,1.729,140,3.203,142,4.105,186,3.664,238,0.003,239,0.003,293,0.408,297,0.876,528,2.742,534,1.252,538,0.935,546,0.674,548,1.484,549,0.865,842,3.088,896,1.951,959,3.203,987,1.991,990,2.624,1069,3.67,1070,2.793,1098,2.822,1100,4.355,1101,4.154,1103,3.4,1105,2.686,1106,3.71,1110,4.062,1111,3.545,1112,3.47,1113,2.686,1115,4.77,1116,4.062,1117,2.751,1119,2.566,1121,3.088,1122,3.625,1123,3.801,1124,2.751,1125,3.545,1127,2.566,1129,4.141,1130,2.98,1131,3.998,1132,2.822,1155,3.904,1194,2.898,1195,5.872,1196,3.904,1197,5.393,1365,2.98,1366,2.98,2750,5.12,2751,5.606,2769,3.904,2772,4.528,2773,5.12,2783,3.706,2784,3.706,2793,4.151,2795,3.904,3271,7.884,3287,4.985,3288,4.985,3289,4.985,3290,4.985,3291,4.985,3292,4.151,3293,4.985,3294,4.985]],["title/injectables/PagerService.html",[17,0.905,247,2.748]],["body/injectables/PagerService.html",[0,4.067,3,0.049,4,0.049,5,0.049,10,0.245,14,0.33,15,0.005,16,0.081,17,1.499,19,0.909,21,4.447,22,1.468,25,2.248,59,0.055,60,0.23,68,2,71,1.294,72,1.893,82,3.422,102,2.251,118,4.447,119,2.48,121,1.881,122,1.77,124,4.74,238,0.004,239,0.004,247,4.551,289,1.721,293,0.301,295,1.663,296,0.684,297,0.602,299,1.386,799,2.105,822,2.161,1015,1.835,1020,4.642,1093,3.666,1173,4.19,1174,4.067,1329,1.339,3295,6.119,3296,8.261,3297,6.805,3298,8,3299,6.805,3300,6.119,3301,6.119,3302,5.059,3303,7.596,3304,6.119,3305,6.119]],["title/interfaces/PaginationInput.html",[0,3.049,3298,4.248]],["body/interfaces/PaginationInput.html",[0,4.121,2,5.125,3,0.05,4,0.05,5,0.05,10,0.248,11,1.18,14,0.332,15,0.005,16,0.082,17,1.512,19,0.921,21,5.081,22,1.488,25,2.278,59,0.056,60,0.233,68,2.016,71,1.311,72,1.421,82,4.016,102,2.27,118,4.483,119,2.634,121,1.905,122,1.794,124,4.762,238,0.004,239,0.004,247,3.714,1015,1.86,1020,4.703,1093,3.714,1173,4.245,1174,4.121,3295,6.199,3296,6.199,3298,7.695,3300,6.199,3301,6.199,3302,5.125,3303,7.658,3304,6.199,3305,6.199]],["title/controllers/PizzaOvenController.html",[551,1.194,3306,4.248]],["body/controllers/PizzaOvenController.html",[3,0.024,4,0.024,5,0.024,10,0.12,13,0.995,14,0.399,15,0.005,16,0.075,19,0.446,20,2.147,25,1.102,26,1.164,59,0.027,60,0.113,62,0.911,65,1.648,68,0.79,71,1.588,72,2.091,77,3.03,102,0.889,119,2.516,122,0.868,202,2.114,238,0.002,239,0.002,289,1.046,293,0.381,295,1.696,296,0.949,297,0.762,299,1.756,348,4.795,350,1.646,351,4.795,353,4.621,393,1.117,528,1.668,538,0.902,546,0.451,549,0.883,551,0.781,553,0.922,555,1.233,568,3.439,603,1.681,635,2.533,638,2.703,639,3.209,640,3.491,641,3.316,642,1.233,668,1.164,671,3.232,682,2.134,764,5.693,768,1.943,775,4.27,795,2.703,796,1.889,800,3.161,801,2.643,814,1.27,987,2.112,996,6.206,997,5.093,1001,3.817,1005,6.32,1012,3,1014,1.117,1015,0.9,1017,2.778,1033,4.653,1037,6.32,1046,3,1048,2.778,1184,3.879,1236,5.009,1240,2.576,1241,1.552,1242,1.582,1243,1.552,1244,1.582,1624,7.176,2563,3.222,2606,5.402,2630,4.653,2633,1.552,2921,3,2940,4.536,2941,4.219,2957,3.161,2961,3,2994,4.617,3114,4.27,3121,2.613,3123,2.613,3128,5.628,3135,5.212,3306,4.276,3307,7.361,3308,3.337,3309,6.32,3310,7.029,3311,7.029,3312,7.589,3313,7.589,3314,5.628,3315,3,3316,3.337,3317,3.337,3318,4.901,3319,3.337,3320,3.337,3321,3.337,3322,3.337,3323,3.337,3324,3.337,3325,3.337,3326,3.337,3327,3.337,3328,3.337,3329,3.337,3330,3.337,3331,3.337,3332,3.337,3333,4.617,3334,3.337,3335,3.337,3336,3.337,3337,3.337,3338,5.135,3339,5.135,3340,3.337,3341,3.337,3342,3.337,3343,3.337,3344,3.337,3345,3.337,3346,2.37,3347,5.135,3348,3.337,3349,3.337,3350,5.135,3351,5.135,3352,3,3353,2.778,3354,3,3355,3,3356,3.337,3357,3.337,3358,3.337,3359,3.337,3360,3.337,3361,3.337,3362,3.337,3363,3.337,3364,3.337,3365,3.337,3366,3.337,3367,3.337,3368,3.337,3369,3.337,3370,3.337,3371,3.337,3372,3.337,3373,3.337,3374,3.337,3375,3.337,3376,3.337,3377,3.337,3378,3.337,3379,3.337,3380,3.337,3381,5.135,3382,3.337,3383,3.337,3384,3.337,3385,3.337]],["title/modules/PizzaOvenModule.html",[240,1.281,273,3.624]],["body/modules/PizzaOvenModule.html",[3,0.045,4,0.045,5,0.045,15,0.005,16,0.084,19,0.828,24,1.777,59,0.05,60,0.21,64,1.868,238,0.003,239,0.003,240,1.999,241,5.876,242,2.29,243,3.077,248,3.077,249,2.359,250,2.324,253,3.225,254,3.332,273,7.512,288,3.277,303,2.829,307,7.16,308,5.16,348,4.227,350,3.057,351,5.432,353,5.235,553,2.201,775,5.432,996,4.074,1001,7.763,1017,5.16,1033,7.763,1048,5.16,2679,4.227,2680,4.227,3114,7.124,3121,4.852,3306,7.326,3307,5.16,3353,5.16,3354,5.572,3355,5.572,3386,5.572,3387,6.197,3388,5.572,3389,5.572,3390,6.197,3391,6.197,3392,6.197]],["title/injectables/PizzaOvenService.html",[17,0.905,3114,3.48]],["body/injectables/PizzaOvenService.html",[3,0.038,4,0.038,5,0.038,10,0.188,13,0.835,14,0.339,15,0.005,16,0.082,17,1.263,18,3.309,19,0.698,20,2.652,22,1.128,23,2.051,24,1.499,25,1.727,26,1.824,59,0.042,60,0.177,62,1.942,64,1.576,65,2.286,67,3.633,68,2.27,69,3.248,71,1.651,72,2.039,76,0.839,77,2.975,82,3.276,83,3.079,102,1.393,119,2.352,122,1.36,238,0.003,239,0.003,247,5.165,289,1.449,293,0.401,295,1.709,296,0.872,297,0.767,299,1.769,305,5.427,306,2.884,308,4.352,348,3.565,350,2.579,461,4.092,463,4.092,528,1.393,682,1.667,698,2.579,764,6.168,767,4.092,814,1.99,822,1.659,899,2.958,1014,1.75,1015,1.41,1016,3.218,1020,3.565,1021,3.218,1022,4.092,1023,4.075,1024,2.579,3114,4.853,3123,4.092,3130,4.352,3136,4.352,3307,7.803,3309,6.397,3314,6.397,3315,6.397,3352,4.699,3353,4.352,3393,5.227,3394,7.115,3395,5.227,3396,9.589,3397,5.227,3398,7.115,3399,5.227,3400,7.115,3401,5.227,3402,5.227,3403,7.115,3404,5.227,3405,5.227,3406,5.227,3407,5.227,3408,5.227,3409,5.227,3410,5.227,3411,5.227,3412,5.227,3413,5.227,3414,5.227,3415,5.227]],["title/classes/PullRequestContributorInsightsDto.html",[60,0.173,1263,3.995]],["body/classes/PullRequestContributorInsightsDto.html",[3,0.04,4,0.04,5,0.04,10,0.199,11,1.024,13,1.005,14,0.403,15,0.005,16,0.072,31,3.253,59,0.045,60,0.282,76,0.871,78,3.541,93,2.652,100,2.899,117,2.358,119,2.481,140,2.57,142,3.779,186,3.421,238,0.003,239,0.003,293,0.421,297,0.908,393,2.474,528,2.717,534,1.387,538,0.997,546,0.747,547,2.812,548,1.645,842,3.311,896,2.092,904,3.253,959,2.57,987,1.293,990,2.908,1014,1.85,1015,1.49,1066,2.408,1069,3.87,1070,2.614,1078,4.987,1100,4.076,1101,3.888,1103,3.524,1105,2.977,1106,2.977,1110,3.802,1111,3.802,1112,3.721,1113,2.977,1115,4.192,1116,2.844,1117,3.049,1118,3.127,1119,2.844,1120,3.127,1121,3.311,1122,2.908,1123,3.049,1124,3.049,1125,3.802,1126,3.127,1127,2.844,1128,3.127,1129,3.73,1131,3.601,1195,4.856,1247,5.038,1263,5.784,1365,3.302,1366,3.302,2772,3.632,2773,4.107,2787,5.287,2794,3.925,3292,4.601,3416,5.526,3417,5.526,3418,5.526]],["title/classes/PullRequestContributorOptionsDto.html",[60,0.173,1231,3.995]],["body/classes/PullRequestContributorOptionsDto.html",[3,0.036,4,0.036,5,0.036,10,0.178,11,0.95,13,0.92,14,0.401,15,0.004,16,0.069,31,3.924,59,0.04,60,0.232,76,1.167,78,3.383,93,2.461,100,2.691,117,2.29,119,2.418,140,2.303,142,3.611,186,3.136,238,0.003,239,0.003,293,0.432,297,0.921,393,2.984,422,2.571,528,2.808,534,1.243,538,1.024,542,1.67,546,0.67,547,3.231,548,1.474,768,2.173,781,2.668,842,2.22,896,1.402,904,3.924,959,2.303,1014,1.658,1015,1.849,1066,2.235,1069,3.188,1070,2.426,1078,4.801,1098,2.803,1100,3.783,1101,3.608,1103,3.392,1105,3.693,1106,4.236,1110,2.549,1111,3.529,1112,2.495,1113,2.668,1114,2.878,1115,3.961,1116,2.549,1117,2.733,1118,2.803,1119,2.549,1120,2.803,1121,3.073,1122,2.606,1123,2.733,1124,2.733,1125,3.529,1126,2.803,1127,2.549,1128,2.803,1129,3.995,1130,2.96,1131,3.857,1132,2.803,1231,5.368,1247,6.078,2349,4.996,2365,3.681,2752,4.87,2787,4.996,2788,5.364,2789,5.857,2790,3.681,2791,4.123,2792,3.877,2793,4.123,2794,3.518,2795,3.877,2796,4.452,2797,3.378,2798,3.681,3419,4.452]],["title/controllers/PullRequestController.html",[551,1.194,3420,4.248]],["body/controllers/PullRequestController.html",[3,0.033,4,0.033,5,0.033,10,0.163,13,0.774,14,0.379,15,0.005,16,0.081,19,0.605,25,1.497,26,1.581,59,0.037,60,0.153,62,1.237,65,1.973,71,1.552,72,2.046,76,0.759,77,2.991,99,2.633,119,2.469,142,1.927,189,4.575,196,4.41,197,4.645,238,0.003,239,0.003,289,1.312,293,0.361,295,1.606,296,0.866,297,0.721,299,1.663,387,4.88,389,4.88,391,2.708,392,4.575,393,3.293,394,3.547,408,4.575,409,3.218,528,1.997,538,0.854,546,0.613,551,1.06,553,1.252,555,1.674,568,3.334,640,3.492,641,3.234,642,1.674,668,1.581,671,3.061,682,1.777,882,2.879,904,3.797,907,2.789,921,3.368,922,3.368,1014,1.517,1015,2.021,1070,1.603,1232,3.547,1233,5.791,1234,4.788,1235,4.234,1236,4.744,1240,1.865,1241,2.107,1242,2.148,1243,2.107,1244,2.148,1245,4.927,1246,3.368,1251,3.547,1268,2.695,1861,4.234,2606,3.645,2630,3.368,2633,2.107,2765,5.043,2785,6.067,2912,6.067,2925,3.772,2940,3.645,2941,3.39,2949,3.772,3033,3.218,3420,5.363,3421,4.53,3422,8.162,3423,8.162,3424,8.162,3425,8.162,3426,4.53,3427,4.53,3428,4.53,3429,4.53,3430,4.53,3431,4.53,3432,6.441,3433,4.53,3434,4.53,3435,4.53,3436,6.441,3437,4.53,3438,4.53,3439,6.391,3440,4.53,3441,4.073,3442,5.571,3443,4.073,3444,4.788,3445,5.571,3446,4.073,3447,4.53,3448,5.791,3449,4.53,3450,4.53,3451,4.53,3452,4.53,3453,4.53,3454,3.547,3455,4.53,3456,4.53,3457,4.53,3458,4.53,3459,4.53,3460,4.53,3461,4.53]],["title/controllers/PullRequestDescriptionController.html",[551,1.194,3462,4.248]],["body/controllers/PullRequestDescriptionController.html",[3,0.046,4,0.046,5,0.046,10,0.229,14,0.316,15,0.005,16,0.078,19,0.848,59,0.051,60,0.215,68,1.502,71,1.207,72,1.834,102,1.691,122,1.651,196,3.561,197,3.419,200,4.462,238,0.003,239,0.003,289,1.647,293,0.28,295,1.249,296,0.638,297,0.561,299,1.293,387,4.576,393,3.24,538,0.664,546,0.858,549,1.242,551,1.485,553,1.754,555,2.345,568,2.862,603,3.197,608,4.329,635,3.131,636,2.845,637,3.691,638,4.256,641,3.032,642,2.345,662,2.7,668,2.215,670,2.897,671,2.38,795,4.256,796,3.592,799,1.963,800,4.978,801,4.162,802,2.952,803,2.952,810,2.278,814,2.416,904,3.561,907,3.907,908,7.336,913,6.011,915,4.978,921,4.718,922,4.718,924,4.969,944,5.515,2827,7.969,3462,6.733,3463,6.347,3464,6.347,3465,6.347,3466,6.347,3467,6.347,3468,5.706,3469,6.615,3470,5.706,3471,6.347,3472,6.347]],["title/injectables/PullRequestDescriptionService.html",[17,0.905,3469,3.792]],["body/injectables/PullRequestDescriptionService.html",[3,0.041,4,0.041,5,0.041,10,0.207,13,0.876,14,0.331,15,0.005,16,0.069,17,1.345,19,0.767,59,0.046,60,0.194,62,1.567,65,2.233,68,1.794,71,1.441,72,1.748,74,3.169,76,1.135,196,3.337,200,3.169,238,0.003,239,0.003,289,1.544,293,0.375,295,1.669,296,0.852,297,0.75,299,1.544,387,5.104,393,3.225,422,2.153,423,3.25,522,4.079,541,2.892,549,1.133,687,3.169,706,3.169,791,3.648,799,2.344,803,2.67,810,2.061,822,1.823,825,5.382,826,4.079,827,5.755,831,5.632,832,5.929,833,6.66,835,5.221,836,3.916,837,4.079,838,4.079,839,3.774,840,4.268,842,2.574,843,4.079,844,4.268,845,4.268,846,4.268,847,4.268,848,4.781,849,3.916,853,4.079,854,4.981,858,5.382,859,4.079,860,4.268,862,4.781,863,4.079,864,4.977,865,3.535,866,4.079,867,4.079,893,5.933,904,3.971,933,3.774,936,4.781,952,6.812,954,6.812,961,3.916,2827,7.062,2830,5.162,3230,5.162,3232,5.162,3468,5.162,3469,5.632,3473,5.741,3474,5.741,3475,5.741,3476,5.741,3477,5.741,3478,5.741,3479,5.741,3480,5.741,3481,5.741,3482,5.741,3483,5.741,3484,5.741,3485,5.741]],["title/injectables/PullRequestGithubEventsService.html",[17,0.905,3486,3.792]],["body/injectables/PullRequestGithubEventsService.html",[3,0.041,4,0.041,5,0.041,10,0.203,14,0.292,15,0.005,16,0.08,17,1.33,19,0.754,20,2.736,22,1.218,23,2.215,24,1.619,25,1.865,26,1.97,59,0.046,60,0.191,62,2.045,65,1.486,67,3.748,68,2.35,69,3.42,71,1.425,72,1.733,76,0.991,77,2.379,78,2.986,91,2.149,93,2.026,99,3.28,100,2.215,101,3.85,102,1.996,104,4.42,118,3.943,119,2.493,121,1.56,122,1.468,124,4.42,156,3.475,200,3.115,224,4.01,238,0.003,239,0.003,289,1.526,293,0.372,295,1.475,296,0.753,297,0.662,299,1.526,439,3.85,483,4.42,822,1.792,896,1.599,907,4.612,944,3.85,997,4.76,1014,2.509,1015,1.522,1087,3.586,1093,3.041,1152,3.71,1153,3.85,1168,4.42,1174,3.373,1191,5.322,1240,2.323,1265,4.196,1464,3.28,1783,6.585,1958,4.42,2038,4.196,2071,6.736,2075,6.736,2765,4.42,2810,4.196,3486,5.569,3487,5.644,3488,7.492,3489,5.644,3490,5.644,3491,7.492,3492,5.644,3493,7.492,3494,5.644,3495,5.075,3496,5.644,3497,5.644,3498,4.196,3499,5.644,3500,5.644,3501,5.644,3502,5.644,3503,5.644,3504,5.644,3505,5.644,3506,5.644,3507,5.644,3508,5.644,3509,5.644,3510,5.644,3511,5.644,3512,5.644,3513,5.644,3514,5.644,3515,5.644,3516,5.644,3517,5.644,3518,5.644,3519,5.644]],["title/injectables/PullRequestInsightsService.html",[17,0.905,3444,3.792]],["body/injectables/PullRequestInsightsService.html",[3,0.03,4,0.03,5,0.03,10,0.151,13,0.953,14,0.373,15,0.005,16,0.075,17,1.081,18,2.832,19,0.56,20,2.404,21,4.402,22,0.904,23,1.644,24,1.201,59,0.034,60,0.142,62,1.662,64,1.263,65,1.888,67,3.294,68,2.131,71,1.497,72,1.255,74,4.969,76,1.061,77,1.33,78,3.334,82,2.905,83,3.104,93,3.232,99,5.977,100,3.09,102,1.116,106,4.526,108,4.325,110,5.095,117,2.018,122,1.09,142,1.782,143,2.601,156,4.416,186,2.25,202,1.724,203,3.114,238,0.003,239,0.003,289,1.24,293,0.398,295,1.717,296,0.84,297,0.739,299,1.778,305,5.096,306,2.312,387,5.221,393,3.149,408,4.325,409,2.976,814,1.595,822,1.33,882,2.662,896,1.724,904,4.062,1015,1.13,1023,3.613,1103,2.997,1122,2.205,1152,2.754,1153,2.858,1200,2.858,1235,2.754,1268,2.547,1464,2.435,1916,6.486,1918,3.767,2785,6.486,2787,2.662,3302,3.114,3441,3.767,3442,3.114,3444,4.526,3454,4.767,3520,4.189,3521,6.089,3522,6.089,3523,7.873,3524,6.089,3525,6.089,3526,4.189,3527,5.919,3528,4.189,3529,6.089,3530,4.189,3531,4.189,3532,4.189,3533,6.089,3534,4.189,3535,4.189,3536,4.189,3537,4.189,3538,4.189,3539,4.189,3540,4.526,3541,2.976,3542,3.114,3543,4.189,3544,4.189,3545,5.474,3546,5.474,3547,5.474,3548,5.474,3549,5.474,3550,4.189,3551,3.767,3552,4.189,3553,3.767,3554,5.07,3555,5.972,3556,6.089,3557,5.474,3558,3.767,3559,3.767,3560,5.972,3561,3.767,3562,6.089,3563,4.189,3564,4.189,3565,4.189,3566,4.189,3567,5.474,3568,4.189,3569,4.189,3570,5.07,3571,4.189,3572,6.089,3573,4.189,3574,4.189,3575,4.189,3576,4.189,3577,4.189,3578,4.189,3579,4.189,3580,3.767,3581,3.767,3582,4.189]],["title/modules/PullRequestModule.html",[240,1.281,274,3.48]],["body/modules/PullRequestModule.html",[3,0.038,4,0.038,5,0.038,15,0.005,16,0.085,19,0.702,24,1.507,59,0.042,60,0.178,64,1.585,196,4.134,238,0.003,239,0.003,240,1.793,242,1.942,243,2.76,248,2.76,249,2.001,250,1.971,253,2.893,254,2.988,272,6.171,274,7.259,288,2.94,303,2.4,387,2.975,389,2.975,391,3.142,392,5.074,393,3.144,394,4.116,408,5.074,409,3.734,422,1.971,423,2.975,424,4.116,541,4.729,553,1.974,903,6.755,904,2.315,919,6.978,920,4.726,937,6.755,938,5.592,947,6.978,948,5.947,966,6.755,972,3.908,974,6.978,1245,6.697,1246,3.908,1296,4.726,3033,3.734,3420,6.755,3442,6.03,3444,6.978,3445,7.573,3446,4.726,3462,6.755,3469,6.978,3470,4.726,3541,3.734,3583,4.726,3584,4.726,3585,4.726,3586,4.726,3587,6.668,3588,5.257,3589,4.726,3590,5.257,3591,5.257,3592,5.257,3593,5.257,3594,5.257]],["title/classes/PullRequestPageOptionsDto.html",[60,0.173,3439,3.995]],["body/classes/PullRequestPageOptionsDto.html",[3,0.029,4,0.029,5,0.029,10,0.145,11,0.821,13,0.851,14,0.401,15,0.005,16,0.063,31,3.092,59,0.057,60,0.201,75,5.22,76,1.196,78,3.084,93,2.128,100,2.326,117,2.269,119,2.292,140,1.878,142,3.291,186,2.859,238,0.002,239,0.002,293,0.433,297,0.922,393,3.12,422,2.901,528,2.822,534,1.013,538,1.027,542,1.797,546,0.546,547,3.279,548,1.202,678,2.19,679,2.439,768,1.94,781,2.175,842,1.81,896,1.143,904,4.103,959,1.878,1014,1.352,1015,1.598,1066,1.932,1069,2.756,1070,3.399,1078,4.439,1098,2.285,1099,4.461,1100,3.271,1101,3.119,1103,3.279,1105,4.168,1106,4.795,1110,2.078,1111,3.05,1112,2.034,1113,2.175,1114,2.346,1115,3.537,1116,2.078,1117,2.228,1118,2.285,1119,2.078,1120,2.285,1121,2.657,1122,2.125,1123,2.228,1124,2.228,1125,3.05,1126,2.285,1127,2.078,1128,2.285,1129,4.177,1130,2.413,1131,4.032,1132,4.664,1247,6.355,1448,2.228,1785,3.766,1798,2.654,1945,4.935,1953,4.935,2038,4.405,2209,4.789,2349,4.461,2365,3.001,2752,5.496,2753,3.63,2787,4.461,2788,4.789,2789,5.473,2790,3.001,2792,3.161,2794,2.868,2795,3.161,2797,2.754,2798,3.001,3419,3.63,3439,4.64,3595,4.037,3596,4.037,3597,4.037,3598,8.003,3599,7.022,3600,4.037,3601,3.63,3602,4.037,3603,4.037,3604,7.744,3605,4.037,3606,4.037,3607,4.037,3608,4.037,3609,4.037]],["title/injectables/PullRequestReviewService.html",[17,0.905,3445,3.792]],["body/injectables/PullRequestReviewService.html",[3,0.05,4,0.05,5,0.05,10,0.247,13,0.953,14,0.332,15,0.005,16,0.078,17,1.508,19,0.918,20,2.944,22,1.482,23,2.696,24,1.97,59,0.056,60,0.233,62,2.32,64,2.071,65,1.808,71,1.306,72,1.901,77,2.698,238,0.004,239,0.004,289,1.731,293,0.375,295,1.672,296,0.854,297,0.751,299,1.399,387,5.222,392,4.879,393,3.228,394,5.378,682,1.415,822,2.181,904,4.063,2104,6.176,3442,5.106,3445,6.317,3610,6.869,3611,8.497,3612,6.869,3613,6.869,3614,8.497,3615,8.497,3616,6.869,3617,8.497,3618,6.869,3619,6.869]],["title/injectables/PullRequestService.html",[17,0.905,1245,3.354]],["body/injectables/PullRequestService.html",[3,0.02,4,0.02,5,0.02,10,0.097,13,0.757,14,0.339,15,0.005,16,0.076,17,0.773,19,0.361,20,1.912,22,0.584,23,1.062,24,0.776,25,0.894,26,0.944,31,3.021,59,0.022,60,0.092,62,1.188,64,0.816,65,1.806,67,2.619,68,2.458,69,1.987,71,1.394,72,1.972,76,1.023,77,2.755,78,4.009,82,3.812,83,2.364,85,1.258,93,2.247,94,4.359,99,5.138,100,3.247,101,5.256,102,1.953,106,3.236,108,3.092,110,3.092,117,1.263,118,4.056,119,2.402,121,1.509,122,1.628,124,4.189,142,2.324,143,1.805,156,5.093,159,4.901,160,3.88,186,1.609,191,3.624,202,3.017,203,5.449,213,1.778,224,3.092,226,4.277,227,6.416,228,2.011,238,0.002,239,0.002,289,0.887,293,0.397,295,1.708,296,0.872,297,0.767,299,1.801,305,4.362,306,1.493,387,5.156,389,1.531,391,1.617,393,2.096,606,1.719,679,1.113,800,1.665,822,0.859,896,1.547,904,4.011,1014,1.458,1015,1.688,1069,1.258,1070,0.957,1080,2.011,1087,1.719,1093,1.457,1103,1.03,1115,1.363,1116,2.241,1137,2.969,1142,3.914,1145,1.845,1152,1.778,1153,1.845,1154,2.252,1155,2.118,1162,2.432,1170,3.624,1171,3.624,1172,1.845,1173,1.665,1174,3.264,1181,2.432,1191,3.092,1231,6.275,1235,2.862,1238,4.06,1245,2.862,1248,2.252,1263,5.739,1268,1.821,1281,2.432,1297,4.901,1301,2.252,1302,2.432,1464,1.572,1868,0.985,1916,4.653,2751,1.922,2787,5.395,2789,1.719,2797,1.845,3439,4.277,3442,2.011,3443,5.628,3454,3.408,3498,5.728,3527,4.115,3540,5.449,3541,1.922,3542,2.011,3545,3.914,3546,3.914,3547,3.914,3548,3.914,3549,3.914,3551,2.432,3553,2.432,3554,3.624,3555,3.624,3557,2.432,3558,2.432,3559,2.432,3560,4.548,3561,2.432,3570,5.212,3620,2.705,3621,5.462,3622,5.462,3623,4.353,3624,4.353,3625,4.353,3626,3.914,3627,5.462,3628,4.353,3629,4.353,3630,6.26,3631,2.705,3632,4.911,3633,2.705,3634,2.705,3635,2.705,3636,2.705,3637,2.705,3638,2.705,3639,2.705,3640,2.705,3641,2.705,3642,2.705,3643,2.705,3644,2.705,3645,2.705,3646,2.432,3647,2.705,3648,2.705,3649,2.705,3650,2.705,3651,4.353,3652,5.462,3653,2.705,3654,2.705,3655,4.353,3656,2.705,3657,2.705,3658,2.705,3659,2.432,3660,2.705,3661,2.705,3662,2.705,3663,7.33,3664,4.353,3665,4.353,3666,4.353,3667,2.705,3668,2.705,3669,2.705,3670,3.914,3671,3.914,3672,4.353,3673,4.353,3674,6.26,3675,5.628,3676,2.705,3677,2.705,3678,2.705,3679,2.705,3680,2.705,3681,2.252,3682,2.705,3683,6.26,3684,2.705,3685,6.26,3686,2.705,3687,2.705,3688,2.705,3689,4.911,3690,5.462,3691,6.26,3692,2.705,3693,4.353,3694,4.353,3695,4.353,3696,4.353,3697,2.705]],["title/controllers/RepoContributionsController.html",[551,1.194,1059,4.248]],["body/controllers/RepoContributionsController.html",[3,0.026,4,0.026,5,0.026,10,0.129,13,1.008,14,0.389,15,0.005,16,0.073,19,0.477,25,1.181,26,1.247,59,0.029,60,0.121,65,0.941,68,1.724,71,1.385,72,1.951,76,1.193,77,2.796,78,4.015,88,4.219,93,2.615,100,3.457,117,1.251,119,2.067,122,1.895,142,3.099,143,2.406,194,5.79,202,1.471,207,1.228,238,0.002,239,0.002,289,1.102,293,0.322,295,1.434,296,0.906,297,0.644,299,1.484,338,4.454,455,1.403,472,2.649,528,1.442,538,0.763,546,0.483,549,1.189,551,0.836,553,0.988,555,1.321,568,3.117,639,3.572,640,3.169,641,2.935,642,1.321,668,1.888,671,2.731,682,1.697,768,2.898,810,1.283,933,3.557,959,3.388,986,2.565,987,2.151,1015,0.964,1023,3.669,1057,4.854,1059,4.506,1060,2.976,1061,3.213,1070,1.265,1080,5.414,1096,6.696,1101,4.983,1103,2.06,1138,7.036,1156,3.213,1157,5.703,1158,3.213,1159,3.213,1240,2.688,1241,1.662,1242,1.694,1243,1.662,1244,1.694,1507,5.225,1691,2.976,1933,6.549,2560,6.008,2563,4.028,2606,4.66,2633,1.662,2655,4.639,2656,4.454,2912,4.022,2940,3.063,2941,2.848,2957,2.2,3127,6.549,3318,2.798,3698,7.825,3699,3.574,3700,7.825,3701,7.825,3702,6.53,3703,3.574,3704,3.574,3705,8.233,3706,5.411,3707,5.411,3708,3.574,3709,3.574,3710,3.574,3711,3.574,3712,3.574,3713,5.411,3714,6.896,3715,5.411,3716,3.574,3717,3.574,3718,3.574,3719,3.574,3720,3.574,3721,3.574,3722,5.411,3723,3.574,3724,3.574,3725,3.574,3726,7.036,3727,3.696,3728,2.349,3729,2.539,3730,2.539,3731,3.574,3732,5.411,3733,2.539,3734,5.411,3735,5.411,3736,3.574,3737,4.639,3738,3.574,3739,5.411,3740,5.411,3741,3.574,3742,3.574,3743,3.574,3744,3.574]],["title/controllers/RepoController.html",[551,1.194,3745,4.248]],["body/controllers/RepoController.html",[3,0.035,4,0.035,5,0.035,10,0.176,13,0.808,14,0.386,15,0.005,16,0.078,19,0.655,20,2.58,25,1.619,26,1.71,59,0.04,60,0.166,71,1.607,72,2.075,76,1.083,77,3.051,119,2.121,202,3.654,238,0.003,239,0.003,289,1.386,293,0.373,295,1.663,296,0.892,297,0.747,299,1.721,334,4.302,528,1.305,538,0.884,546,0.663,549,0.855,551,1.146,553,1.354,555,1.81,568,3.401,639,3.569,640,3.595,641,3.329,642,1.81,668,1.71,671,3.168,682,1.829,768,2.696,810,1.759,987,1.592,1015,1.835,1070,1.734,1137,5.762,1145,3.342,1232,3.836,1234,5.058,1235,4.473,1236,4.91,1240,2.016,1241,2.278,1242,2.322,1243,2.278,1244,2.322,1251,3.836,1507,4.662,2563,4.025,2606,5.438,2630,3.642,2633,2.278,2656,3.342,2687,5.201,2705,3.016,2804,3.642,2925,4.079,2940,3.851,2941,3.582,2949,4.079,3013,3.836,3037,3.836,3150,3.836,3318,3.836,3727,4.425,3729,3.48,3730,3.48,3733,3.48,3737,3.48,3745,5.666,3746,4.899,3747,8.448,3748,7.596,3749,5.368,3750,4.834,3751,4.899,3752,4.899,3753,6.615,3754,4.899,3755,6.118,3756,4.899,3757,4.405,3758,4.899,3759,4.899,3760,4.899,3761,4.079,3762,6.118,3763,4.899,3764,4.899,3765,4.899,3766,4.642,3767,4.899,3768,3.48,3769,4.899,3770,4.899]],["title/modules/RepoFilterModule.html",[240,1.281,3587,3.624]],["body/modules/RepoFilterModule.html",[3,0.054,4,0.054,5,0.054,15,0.004,16,0.072,19,1.002,59,0.061,60,0.254,238,0.004,239,0.004,240,2.25,242,2.772,243,3.464,248,3.464,249,2.855,250,2.813,253,3.63,254,3.75,768,2.073,3527,7.037,3542,5.575,3587,7.399,3771,6.743,3772,6.743,3773,6.743,3774,6.743,3775,7.5]],["title/injectables/RepoFilterService.html",[17,0.905,3527,3.354]],["body/injectables/RepoFilterService.html",[3,0.037,4,0.037,5,0.037,10,0.289,13,0.728,14,0.314,15,0.005,16,0.07,17,1.252,19,0.69,21,4.546,22,1.113,59,0.042,60,0.175,68,1.222,71,0.981,74,3.892,76,1.066,78,3.605,82,2.857,91,2.685,93,2.885,94,3.279,98,2.569,99,2.999,100,2.025,117,1.631,156,4.947,160,5.01,202,2.124,223,5.873,238,0.003,239,0.003,289,1.437,293,0.312,295,1.582,296,0.709,297,0.623,299,1.437,300,3.52,569,7.765,768,2.221,822,1.638,899,4.548,915,4.342,944,5.891,1015,1.902,1069,2.4,1103,2.685,1112,4.048,1200,3.52,1234,5.243,1235,6.562,1240,2.903,1641,2.999,1783,4.041,1937,4.64,1975,3.279,2633,4.342,2785,6.42,2787,4.482,2788,3.52,2789,3.279,2797,3.52,3302,3.836,3527,4.637,3540,5.243,3567,6.341,3580,4.64,3581,4.64,3774,7.225,3776,5.161,3777,7.053,3778,7.053,3779,7.053,3780,5.161,3781,7.053,3782,5.161,3783,7.053,3784,4.297,3785,6.691,3786,5.161,3787,5.161,3788,5.161,3789,5.161,3790,5.161,3791,5.161,3792,8.035,3793,5.161,3794,5.161,3795,5.161,3796,6.341,3797,5.161,3798,5.161,3799,7.053,3800,5.161,3801,5.161,3802,5.161,3803,5.161,3804,4.64,3805,4.64,3806,5.161,3807,5.161]],["title/classes/RepoInfo.html",[60,0.173,1408,3.48]],["body/classes/RepoInfo.html",[3,0.051,4,0.051,5,0.051,10,0.253,11,1.193,13,0.889,14,0.396,15,0.004,16,0.07,59,0.057,60,0.291,76,1.144,238,0.004,239,0.004,293,0.38,296,0.865,422,3.228,534,1.761,538,0.901,539,3.276,542,1.911,545,3.391,546,0.949,547,3.276,548,2.088,549,1.081,682,2.054,768,2.683,771,6.306,781,3.778,987,2.014,1364,5.469,1408,5.871,1464,5.002,1818,8.373,3808,7.291,3809,7.013,3810,7.013,3811,7.013,3812,7.013,3813,6.306]],["title/modules/RepoModule.html",[240,1.281,275,3.049]],["body/modules/RepoModule.html",[3,0.05,4,0.05,5,0.05,15,0.005,16,0.082,19,0.933,24,2.003,59,0.056,60,0.237,64,2.107,238,0.004,239,0.004,240,2.156,242,2.582,243,3.318,248,3.318,249,2.659,250,2.62,253,3.478,254,3.593,275,6.244,288,3.534,303,3.189,334,3.189,553,2.373,1063,4.963,3150,5.47,3541,4.963,3587,7.199,3589,6.282,3727,6.006,3745,7.741,3761,5.817,3814,6.282,3815,6.282,3816,6.987,3817,6.282,3818,6.987,3819,6.987]],["title/classes/RepoPageOptionsDto.html",[60,0.173,3749,3.242]],["body/classes/RepoPageOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.185,11,0.974,13,0.932,14,0.389,15,0.005,16,0.065,37,3.067,59,0.065,60,0.238,78,3.435,93,2.522,100,2.757,117,2.363,119,2.439,140,2.387,142,3.666,186,3.184,202,2.112,238,0.003,239,0.003,293,0.412,296,0.706,297,0.897,411,2.905,528,2.723,534,1.288,538,0.976,546,0.694,548,1.528,678,2.596,679,2.892,842,2.3,896,1.453,959,2.387,983,3.067,1014,1.718,1015,1.384,1066,2.29,1069,3.268,1070,3.05,1075,3.373,1078,4.862,1098,2.905,1099,5.091,1100,3.878,1101,3.698,1103,3.548,1105,3.785,1106,4.316,1107,7.093,1110,2.641,1111,3.617,1112,2.585,1113,2.764,1114,2.983,1115,4.036,1116,2.641,1117,2.832,1118,2.905,1119,2.641,1120,2.905,1121,3.15,1122,2.701,1123,2.832,1124,2.832,1125,3.617,1126,2.905,1127,2.641,1128,2.905,1129,3.15,1130,3.067,1131,3.041,1132,4.535,1266,5.223,1733,4.619,1975,3.261,2772,3.373,3104,4.273,3105,4.273,3106,4.273,3107,4.273,3108,4.273,3749,4.464,3808,5.501,3820,6.671,3821,4.614,3822,5.132,3823,4.614,3824,5.501,3825,6.317,3826,6.317,3827,5.85,3828,5.85,3829,5.85,3830,5.85,3831,5.85,3832,5.132]],["title/classes/RepoSearchOptionsDto.html",[60,0.173,3753,3.995]],["body/classes/RepoSearchOptionsDto.html",[3,0.035,4,0.035,5,0.035,10,0.177,11,0.945,13,0.918,14,0.401,15,0.005,16,0.068,59,0.04,60,0.231,76,1.133,78,3.372,93,2.447,100,2.676,117,2.362,119,2.231,140,2.285,142,3.598,186,3.125,238,0.003,239,0.003,293,0.437,297,0.926,528,2.819,534,1.233,538,1.035,546,0.664,547,3.22,548,1.462,768,2.337,842,2.202,896,1.391,959,2.285,1015,1.839,1066,2.222,1069,3.171,1070,2.771,1078,4.954,1098,2.78,1099,4.332,1100,3.762,1101,3.588,1103,3.5,1105,4.218,1106,4.556,1107,5.82,1110,2.528,1111,3.509,1112,2.474,1113,2.646,1114,2.855,1115,3.944,1116,2.528,1117,2.711,1118,2.78,1119,2.528,1120,2.78,1121,3.056,1122,2.586,1123,2.711,1124,2.711,1125,3.509,1126,2.78,1127,2.528,1128,2.78,1129,3.983,1130,2.936,1131,3.845,1132,2.78,1391,4.09,2349,4.975,2752,3.489,2787,4.975,2788,5.341,2789,5.843,2790,3.651,2791,4.09,2794,4.843,2797,3.351,2798,3.651,2804,6.605,3601,4.416,3749,5.374,3753,5.338,3808,6.957,3820,4.09,3821,4.416,3833,4.912,3834,4.912,3835,4.912]],["title/injectables/RepoService.html",[17,0.905,3727,2.887]],["body/injectables/RepoService.html",[3,0.019,4,0.019,5,0.019,10,0.096,13,0.909,14,0.337,15,0.005,16,0.073,17,0.763,18,2.514,19,0.356,20,1.895,21,3.583,22,0.575,23,1.045,24,0.764,25,0.88,26,0.93,59,0.022,60,0.09,62,1.174,64,0.803,65,2.098,67,2.596,68,2.339,69,1.963,71,1.515,72,1.933,76,1.147,77,2.613,78,3.972,82,3.566,83,2.339,85,1.239,88,1.314,90,1.817,91,1.637,93,1.543,94,2.732,98,1.969,99,5.919,100,3.715,101,2.933,102,1.94,106,1.98,108,1.892,110,3.054,117,1.435,118,3.266,119,2.21,121,1.188,122,1.771,124,3.778,142,2.64,156,3.819,160,5.846,186,2.945,192,1.194,194,2.826,205,2.218,207,0.501,209,4.501,213,1.751,226,2.086,238,0.002,239,0.002,289,0.876,293,0.382,295,1.7,296,0.885,297,0.747,299,1.721,305,4.334,306,1.47,334,1.216,338,2.933,340,1.693,342,1.817,344,1.817,346,1.817,422,0.999,507,4.233,577,2.912,626,1.98,682,1.403,768,1.881,799,0.824,814,1.637,822,0.846,896,2.331,1014,1.44,1015,1.673,1023,3.667,1024,2.121,1070,0.943,1093,1.435,1103,2.058,1107,1.98,1115,1.342,1116,2.213,1137,3.687,1145,1.817,1147,2.933,1152,1.751,1153,1.817,1154,2.218,1155,2.086,1164,3.866,1165,3.866,1167,2.395,1168,2.086,1170,3.58,1171,3.58,1172,1.817,1173,2.647,1174,2.57,1191,3.054,1200,1.817,1235,1.751,1329,1.064,1507,1.47,1724,2.395,1868,0.97,1916,5.924,2149,2.395,2164,2.395,2182,2.395,2197,2.395,2644,2.218,2687,2.647,2705,1.64,2788,1.817,2789,1.693,2797,1.817,2804,1.98,3139,3.58,3302,1.98,3454,6.24,3498,3.196,3527,4.078,3540,3.196,3541,1.892,3542,1.98,3554,6.635,3555,6.635,3560,2.218,3570,3.58,3626,3.866,3632,4.86,3646,3.866,3670,2.395,3671,2.395,3681,2.218,3727,2.433,3748,3.866,3749,3.942,3753,4.858,3757,3.866,3761,2.218,3762,3.866,3804,3.866,3820,2.218,3824,4.233,3827,2.218,3828,2.218,3829,2.218,3830,2.218,3831,2.218,3836,2.664,3837,4.3,3838,4.3,3839,4.3,3840,4.3,3841,5.406,3842,2.664,3843,2.664,3844,4.3,3845,4.3,3846,2.664,3847,2.664,3848,5.406,3849,2.664,3850,2.664,3851,2.664,3852,2.664,3853,4.3,3854,2.664,3855,4.3,3856,2.664,3857,2.664,3858,2.664,3859,2.664,3860,5.406,3861,2.664,3862,2.664,3863,4.3,3864,2.664,3865,4.3,3866,2.664,3867,2.664,3868,2.664,3869,2.664,3870,2.664,3871,4.3,3872,2.664,3873,2.664,3874,2.664,3875,2.664,3876,2.664,3877,2.664,3878,6.807,3879,6.807,3880,2.395,3881,2.395,3882,2.395,3883,2.664,3884,2.664,3885,2.664,3886,2.664,3887,2.664,3888,2.664,3889,2.664,3890,2.664,3891,2.664,3892,2.664,3893,4.3,3894,4.3,3895,4.3,3896,4.3,3897,4.3,3898,4.3,3899,4.3,3900,2.664,3901,2.664,3902,2.664,3903,2.664,3904,2.664,3905,2.664,3906,2.664,3907,2.664,3908,2.664,3909,2.664,3910,2.664,3911,2.664,3912,2.664,3913,2.664,3914,2.395,3915,5.406,3916,2.664,3917,2.664,3918,2.664,3919,4.3,3920,2.218,3921,2.664,3922,4.3,3923,2.664,3924,2.664,3925,2.664,3926,2.664,3927,2.664,3928,2.664,3929,2.664,3930,2.218,3931,2.664,3932,2.664,3933,4.3,3934,2.664,3935,2.664,3936,2.664,3937,2.664,3938,2.664]],["title/controllers/RepoStarController.html",[551,1.194,3939,4.248]],["body/controllers/RepoStarController.html",[3,0.026,4,0.026,5,0.026,10,0.128,13,1.044,14,0.389,15,0.005,16,0.075,19,0.473,25,1.17,26,1.236,59,0.029,60,0.12,65,0.933,68,1.716,71,1.482,72,2.008,76,1.114,77,2.912,119,1.349,122,1.886,202,2.674,207,1.011,238,0.002,239,0.002,289,1.095,293,0.344,295,1.534,296,0.857,297,0.689,299,1.948,334,2.965,335,1.865,342,5.317,343,2.774,528,1.432,538,0.816,546,0.479,549,1.187,551,0.829,553,0.979,555,1.309,568,3.246,570,2.829,577,3.642,583,1.908,636,1.588,637,3.746,639,3.559,640,3.323,641,3.077,642,1.309,662,1.507,668,1.876,670,3.559,671,2.923,682,1.947,768,2.918,802,1.648,810,1.272,987,1.697,1015,0.956,1023,3.653,1070,1.254,1236,3.124,1240,2.213,1241,1.648,1242,1.68,1243,1.648,1244,1.68,1410,2.416,1507,4.848,2151,8.513,2563,3.732,2606,5.191,2633,1.648,2655,3.819,2656,3.667,2940,3.677,2941,3.419,2942,1.865,3022,5.151,3727,3.677,3728,2.329,3729,2.517,3730,2.517,3733,3.819,3737,3.819,3749,4.608,3750,2.517,3766,2.416,3768,2.517,3824,2.774,3939,4.476,3940,8.206,3941,3.543,3942,7.251,3943,7.795,3944,7.795,3945,7.251,3946,7.795,3947,3.543,3948,3.543,3949,6.038,3950,7.251,3951,7.251,3952,5.39,3953,5.105,3954,5.151,3955,3.543,3956,3.543,3957,3.543,3958,3.543,3959,3.543,3960,3.543,3961,3.543,3962,7.378,3963,3.543,3964,3.543,3965,3.543,3966,4.767,3967,2.774,3968,3.543,3969,3.543,3970,3.543,3971,3.543,3972,2.634,3973,5.317,3974,4.829,3975,3.185,3976,2.774,3977,3.543,3978,3.543,3979,3.543,3980,5.376,3981,3.543,3982,3.543,3983,3.543,3984,5.376,3985,3.543]],["title/controllers/RepoStargazeController.html",[551,1.194,3986,4.248]],["body/controllers/RepoStargazeController.html",[3,0.026,4,0.026,5,0.026,10,0.129,13,1.045,14,0.389,15,0.005,16,0.075,19,0.477,25,1.18,26,1.246,59,0.029,60,0.121,65,0.94,68,1.723,71,1.487,72,2.011,76,1.116,77,2.918,119,1.357,122,1.894,202,2.686,207,1.017,238,0.002,239,0.002,289,1.102,293,0.346,295,1.54,296,0.859,297,0.691,299,1.951,334,2.979,335,1.879,346,5.335,347,2.796,528,1.441,538,0.819,546,0.483,549,1.189,551,0.835,553,0.987,555,1.319,568,3.252,570,2.846,577,3.645,583,1.923,636,1.6,637,3.757,639,3.571,640,3.333,641,3.086,642,1.319,662,1.519,668,1.887,670,3.571,671,2.933,682,1.951,768,2.93,802,1.661,810,1.282,987,1.703,1015,0.963,1023,3.667,1070,1.264,1236,3.143,1240,2.226,1241,1.661,1242,1.693,1243,1.661,1244,1.693,1410,2.435,1507,4.859,2134,5.868,2414,5.846,2455,6.598,2563,3.747,2606,5.201,2633,1.661,2655,3.841,2656,3.688,2940,3.694,2941,3.435,2942,1.879,2957,3.329,3727,3.694,3728,2.347,3729,2.536,3730,2.536,3733,3.841,3737,3.841,3749,4.626,3750,2.536,3766,2.435,3768,2.536,3882,3.21,3952,5.412,3953,5.117,3967,4.234,3972,2.654,3973,5.335,3976,2.796,3986,4.502,3987,8.23,3988,3.57,3989,7.822,3990,7.822,3991,7.822,3992,7.822,3993,7.822,3994,3.57,3995,3.57,3996,5.407,3997,7.28,3998,6.546,3999,3.57,4000,3.57,4001,3.57,4002,3.57,4003,3.57,4004,3.57,4005,3.57,4006,3.57,4007,3.57,4008,5.407,4009,3.57,4010,3.57,4011,3.57,4012,3.57,4013,4.852,4014,3.21,4015,3.57,4016,3.57,4017,4.234,4018,5.407,4019,3.57,4020,3.57,4021,4.862,4022,5.407,4023,3.57]],["title/controllers/RepoSubmitController.html",[551,1.194,4024,4.248]],["body/controllers/RepoSubmitController.html",[3,0.025,4,0.025,5,0.025,10,0.127,13,1.043,14,0.388,15,0.005,16,0.075,19,0.472,25,1.166,26,1.232,59,0.029,60,0.119,65,0.929,68,1.713,71,1.48,72,2.007,76,1.113,77,2.909,119,1.345,122,1.883,202,2.667,207,1.008,238,0.002,239,0.002,289,1.092,293,0.344,295,1.532,296,0.856,297,0.688,299,1.946,334,2.958,335,1.858,344,5.308,345,2.763,528,1.428,538,0.815,546,0.477,549,1.186,551,0.826,553,0.975,555,1.304,568,3.243,570,2.821,577,3.64,583,1.901,636,1.582,637,3.74,639,3.553,640,3.318,641,3.073,642,1.304,662,1.501,668,1.871,670,3.553,671,2.918,682,1.946,768,2.917,802,1.641,810,1.267,987,1.693,1015,0.952,1023,3.646,1070,1.249,1236,3.115,1240,2.206,1241,1.641,1242,1.673,1243,1.641,1244,1.673,1410,2.407,1507,4.842,2167,9.156,2563,3.725,2606,5.186,2633,1.641,2655,3.807,2656,3.656,2940,3.668,2941,3.411,2942,1.858,2957,3.3,3022,5.141,3727,3.668,3728,2.32,3729,2.507,3730,2.507,3733,3.807,3737,3.807,3749,4.598,3750,2.507,3766,2.407,3768,2.507,3881,3.173,3949,6.026,3952,5.38,3953,5.099,3954,5.141,3966,4.757,3967,2.763,3972,2.623,3973,5.308,3976,2.763,4024,4.463,4025,8.194,4026,3.529,4027,7.782,4028,7.782,4029,7.782,4030,7.782,4031,7.782,4032,3.529,4033,3.529,4034,7.237,4035,7.237,4036,3.529,4037,3.529,4038,3.529,4039,3.529,4040,3.529,4041,3.529,4042,3.529,4043,8.194,4044,3.529,4045,3.529,4046,3.529,4047,3.529,4048,3.529,4049,3.529,4050,3.529,4051,4.817,4052,3.173,4053,3.173,4054,3.529,4055,3.529,4056,5.36,4057,3.529,4058,3.529,4059,5.36,4060,3.529]],["title/controllers/RepoVoteController.html",[551,1.194,4061,4.248]],["body/controllers/RepoVoteController.html",[3,0.023,4,0.023,5,0.023,10,0.117,13,1.055,14,0.391,15,0.005,16,0.075,19,0.433,25,1.071,26,1.132,59,0.026,60,0.11,65,0.854,68,1.639,71,1.507,72,2.022,76,1.091,77,2.844,80,5.208,119,1.261,122,1.801,202,2.53,207,1.553,238,0.002,239,0.002,289,1.023,293,0.35,295,1.559,296,0.881,297,0.7,299,1.999,334,2.806,335,1.707,340,4.759,341,2.303,528,1.338,538,0.829,546,0.439,549,1.191,551,0.759,553,0.896,555,1.198,568,3.277,570,4.17,577,3.655,583,1.747,636,1.453,637,3.772,639,3.419,640,3.347,641,3.099,642,1.198,662,1.38,668,1.753,670,3.617,671,2.971,682,1.908,768,2.905,799,1.003,802,1.508,810,1.164,987,1.854,1015,0.875,1023,3.488,1070,1.148,1236,2.919,1240,2.067,1241,1.508,1242,1.537,1243,1.508,1244,1.537,1410,2.212,1507,4.712,2184,8.419,2563,3.564,2606,5.24,2633,1.508,2655,3.568,2656,3.426,2940,3.919,2941,3.644,2942,1.707,3022,4.918,3727,3.48,3728,2.132,3729,2.303,3730,2.303,3733,3.568,3737,3.568,3749,4.399,3750,2.303,3766,2.212,3768,2.303,3880,2.915,3949,5.765,3952,5.146,3953,4.963,3954,4.918,3966,4.551,3967,2.539,3972,2.41,3973,5.109,3976,2.539,4061,4.182,4062,8.263,4063,3.242,4064,6.923,4065,7.49,4066,7.49,4067,6.225,4068,6.923,4069,7.49,4070,3.242,4071,3.242,4072,6.923,4073,6.923,4074,3.242,4075,3.242,4076,3.242,4077,3.242,4078,3.242,4079,3.242,4080,3.242,4081,7.013,4082,3.242,4083,2.915,4084,3.242,4085,3.242,4086,4.814,4087,3.242,4088,3.242,4089,3.242,4090,3.242,4091,3.242,4092,3.242,4093,3.242,4094,3.242,4095,2.539,4096,3.242,4097,4.57,4098,2.915,4099,3.242,4100,3.242,4101,3.242,4102,3.242,4103,3.242,4104,3.242,4105,5.023,4106,3.242,4107,3.242,4108,3.242,4109,5.023,4110,3.242]],["title/modules/StarModule.html",[240,1.281,276,3.792]],["body/modules/StarModule.html",[3,0.05,4,0.05,5,0.05,15,0.005,16,0.083,19,0.923,24,1.981,59,0.056,60,0.234,64,2.083,238,0.004,239,0.004,240,2.141,242,2.553,243,3.295,248,3.295,249,2.629,250,2.59,253,3.453,254,3.568,275,6.04,276,7.752,288,3.51,303,3.153,332,4.712,334,3.153,335,3.636,342,5.816,343,5.409,553,2.356,768,1.909,1063,4.907,3939,7.702,3974,7.877,3975,6.211,4111,6.211,4112,6.908,4113,6.211,4114,6.211,4115,6.908,4116,6.908]],["title/injectables/StarService.html",[17,0.905,3974,3.792]],["body/injectables/StarService.html",[3,0.041,4,0.041,5,0.041,10,0.203,13,1.064,14,0.328,15,0.005,16,0.072,17,1.328,18,2.621,19,0.753,20,2.734,22,1.216,23,2.212,24,1.616,59,0.046,60,0.191,62,2.043,64,1.699,65,1.484,67,3.746,68,2.206,69,3.417,71,1.702,72,1.974,77,2.842,80,6.425,82,3.031,83,3.239,102,2.239,122,2.329,192,2.526,238,0.003,239,0.003,289,1.525,293,0.396,295,1.654,296,0.844,297,0.743,299,1.712,342,3.844,343,4.413,577,3.621,768,2.068,814,3.199,822,1.789,1024,3.692,1868,2.052,2151,4.693,3953,4.35,3954,4.003,3962,6.729,3974,5.564,4117,5.636,4118,7.484,4119,7.484,4120,5.636,4121,5.636,4122,7.484,4123,5.636,4124,7.484,4125,5.636,4126,7.484,4127,5.636,4128,3.581,4129,5.636,4130,5.636,4131,7.484,4132,7.484,4133,9.579,4134,7.484,4135,5.105,4136,5.636,4137,5.636,4138,4.189,4139,5.636]],["title/modules/StargazeModule.html",[240,1.281,277,3.792]],["body/modules/StargazeModule.html",[3,0.05,4,0.05,5,0.05,15,0.005,16,0.083,19,0.923,24,1.981,59,0.056,60,0.234,64,2.083,238,0.004,239,0.004,240,2.141,242,2.553,243,3.295,248,3.295,249,2.629,250,2.59,253,3.453,254,3.568,275,6.04,277,7.752,288,3.51,303,3.153,332,4.712,334,3.153,335,3.636,346,5.816,347,5.409,553,2.356,768,1.909,1063,4.907,3986,7.702,4013,7.877,4014,6.211,4140,6.211,4141,6.211,4142,6.908,4143,6.211,4144,6.908,4145,6.908]],["title/injectables/StargazeService.html",[17,0.905,4013,3.792]],["body/injectables/StargazeService.html",[3,0.04,4,0.04,5,0.04,10,0.202,13,1.063,14,0.327,15,0.005,16,0.072,17,1.323,18,2.605,19,0.748,20,2.727,22,1.209,23,2.198,24,1.606,59,0.045,60,0.19,62,2.035,64,1.689,65,1.475,67,3.737,68,2.201,69,3.403,71,1.698,72,1.97,77,2.835,80,6.416,82,3.617,83,3.226,102,2.232,122,2.323,192,2.511,238,0.003,239,0.003,289,1.518,293,0.395,295,1.649,296,0.842,297,0.74,299,1.707,346,3.821,347,4.386,577,3.617,768,2.315,814,3.189,822,1.778,1024,3.677,1868,2.04,2414,3.979,3953,4.332,3998,6.702,4013,5.541,4128,3.559,4135,5.084,4138,4.164,4146,5.601,4147,7.454,4148,7.454,4149,5.601,4150,5.601,4151,7.454,4152,5.601,4153,7.454,4154,5.601,4155,7.454,4156,5.601,4157,5.601,4158,5.601,4159,7.454,4160,7.454,4161,9.562,4162,7.454,4163,5.601,4164,5.601,4165,5.601]],["title/modules/StripeModule.html",[240,1.281,756,3.624]],["body/modules/StripeModule.html",[3,0.054,4,0.054,5,0.054,15,0.004,16,0.072,19,1.002,59,0.061,60,0.254,238,0.004,239,0.004,240,2.25,242,2.772,243,3.464,248,3.464,249,2.855,250,2.813,253,3.63,254,3.75,288,3.087,646,7.604,756,7.399,4166,6.743,4167,6.743,4168,6.743,4169,7.5,4170,7.5]],["title/injectables/StripeService.html",[17,0.905,646,3.624]],["body/injectables/StripeService.html",[3,0.043,4,0.043,5,0.043,10,0.215,11,1.078,13,0.893,14,0.358,15,0.005,16,0.07,17,1.38,19,0.798,59,0.048,60,0.202,62,1.631,65,2.277,68,1.414,71,1.644,72,2.006,76,1.147,102,1.592,122,1.554,186,2.208,238,0.003,239,0.003,289,1.584,293,0.42,295,1.702,296,0.869,297,0.839,299,1.584,305,5.51,306,3.297,378,6.762,455,2.345,577,2.115,590,5.372,619,5.639,646,5.525,682,1.603,724,6.476,799,2.406,810,2.145,822,1.897,1147,4.075,1551,6.993,1686,5.372,1709,2.5,2206,4.678,2208,4.975,2214,4.678,2226,5.372,2734,4.678,2750,5.782,3714,4.678,4171,5.975,4172,8.647,4173,7.778,4174,7.778,4175,7.778,4176,5.975,4177,7.778,4178,5.975,4179,5.975,4180,5.975,4181,8.647,4182,5.975,4183,5.975,4184,5.975,4185,5.975,4186,5.975,4187,5.975,4188,5.975,4189,5.975,4190,5.975,4191,5.975,4192,5.975,4193,5.372,4194,5.975,4195,5.975,4196,5.975,4197,5.975,4198,5.975,4199,5.975]],["title/modules/StripeSubscriptionModule.html",[240,1.281,278,3.624]],["body/modules/StripeSubscriptionModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.08,19,0.974,24,2.091,59,0.059,60,0.247,64,2.199,238,0.004,239,0.004,240,2.212,242,2.694,243,3.406,248,3.406,249,2.776,250,2.734,253,3.569,254,3.687,278,7.357,288,3.001,303,3.329,378,4.974,381,5.709,383,5.42,384,6.071,2198,6.071,4200,6.556,4201,6.556,4202,6.556,4203,7.931,4204,7.292,4205,6.556,4206,7.292]],["title/injectables/StripeSubscriptionService.html",[17,0.905,4203,3.792]],["body/injectables/StripeSubscriptionService.html",[3,0.05,4,0.05,5,0.05,10,0.249,14,0.333,15,0.005,16,0.078,17,1.513,19,0.923,20,2.95,22,1.49,23,2.711,24,1.981,59,0.056,60,0.234,62,2.328,64,2.083,65,1.819,67,4.041,71,1.621,72,1.906,238,0.004,239,0.004,289,1.737,293,0.409,295,1.678,296,0.857,297,0.754,299,1.737,378,4.712,383,5.135,384,5.752,685,5.694,799,2.137,822,2.193,2198,8.042,2214,5.409,4203,6.339,4207,6.908,4208,8.527,4209,6.908,4210,6.908,4211,8.527,4212,6.908,4213,8.527,4214,6.908,4215,6.908,4216,6.908,4217,6.908]],["title/modules/StripeWebHookModule.html",[240,1.281,279,3.792]],["body/modules/StripeWebHookModule.html",[3,0.049,4,0.049,5,0.049,15,0.005,16,0.081,19,0.908,59,0.055,60,0.23,238,0.004,239,0.004,240,2.118,242,2.51,243,3.261,248,3.261,249,2.586,250,2.547,253,2.751,254,3.531,264,6.865,278,7.15,279,7.891,283,6.015,288,3.473,361,4.633,377,5.656,378,4.633,381,5.319,382,6.107,553,2.332,756,7.15,761,6.107,4218,6.107,4219,6.107,4220,6.793,4221,8.196,4222,5.656,4223,6.793,4224,6.793]],["title/controllers/StripeWebhookController.html",[551,1.194,4221,3.995]],["body/controllers/StripeWebhookController.html",[3,0.033,4,0.033,5,0.033,10,0.162,14,0.251,15,0.005,16,0.077,19,0.602,37,2.694,59,0.036,60,0.153,62,1.231,65,2.521,68,2.386,71,0.857,72,1.843,76,1.158,102,2.293,122,2.327,207,1.207,238,0.003,239,0.003,289,1.307,293,0.284,295,1.263,296,0.645,297,0.567,299,1.307,305,4.23,306,2.488,378,5.098,381,3.53,474,4.378,538,0.472,546,0.61,551,1.055,553,1.246,555,1.666,577,2.882,635,2.224,640,2.599,642,1.666,644,4.125,645,3.53,646,5.309,647,4.053,648,5.309,649,4.053,668,1.573,678,1.666,682,1.323,687,2.488,706,2.488,707,4.378,726,6.72,799,1.985,800,5.014,814,2.845,864,2.488,882,5.684,896,1.818,1110,2.32,1606,4.053,1785,2.864,1868,1.642,2076,3.754,2200,4.053,2201,4.053,2202,4.053,2203,4.053,2204,4.053,2205,4.053,2206,3.53,2207,4.053,2208,3.754,2209,4.378,2210,4.053,2211,4.053,2214,7.004,3785,3.754,4203,5.556,4205,4.053,4221,5.026,4222,6.223,4225,6.72,4226,4.053,4227,6.418,4228,6.418,4229,4.508,4230,8.144,4231,4.508,4232,4.508,4233,6.223,4234,6.418,4235,4.508,4236,6.418,4237,4.053,4238,4.508,4239,4.053,4240,3.351,4241,5.771,4242,5.771,4243,5.771,4244,5.771,4245,4.508,4246,4.508,4247,4.508,4248,7.474,4249,4.508,4250,4.508,4251,4.508,4252,4.508,4253,4.508,4254,4.508,4255,4.508,4256,4.508,4257,7.474,4258,4.508,4259,6.418,4260,4.508,4261,4.508,4262,4.508,4263,4.508,4264,4.508,4265,4.508,4266,4.508,4267,4.508,4268,4.508,4269,4.508,4270,4.508,4271,4.508,4272,4.508,4273,4.508,4274,4.508,4275,4.508,4276,4.508,4277,6.418,4278,4.508,4279,4.508,4280,4.508,4281,4.508,4282,4.508,4283,4.508,4284,7.474,4285,4.508,4286,4.508,4287,4.508,4288,6.72,4289,4.508,4290,4.508,4291,4.508,4292,4.508,4293,4.508,4294,6.418,4295,4.508,4296,4.508,4297,4.508,4298,4.508,4299,4.508,4300,4.508,4301,4.508,4302,4.508,4303,4.508,4304,4.508]],["title/modules/SubmitModule.html",[240,1.281,280,3.792]],["body/modules/SubmitModule.html",[3,0.05,4,0.05,5,0.05,15,0.005,16,0.083,19,0.923,24,1.981,59,0.056,60,0.234,64,2.083,238,0.004,239,0.004,240,2.141,242,2.553,243,3.295,248,3.295,249,2.629,250,2.59,253,3.453,254,3.568,275,6.04,280,7.752,288,3.51,303,3.153,332,4.712,334,3.153,335,3.636,344,5.816,345,5.409,553,2.356,768,1.909,1063,4.907,4024,7.702,4051,7.877,4052,6.211,4305,6.211,4306,6.211,4307,6.908,4308,6.211,4309,6.908,4310,6.908]],["title/injectables/SubmitService.html",[17,0.905,4051,3.792]],["body/injectables/SubmitService.html",[3,0.041,4,0.041,5,0.041,10,0.203,13,1.064,14,0.328,15,0.005,16,0.072,17,1.328,18,2.621,19,0.753,20,2.734,22,1.216,23,2.212,24,1.616,59,0.046,60,0.191,62,2.043,64,1.699,65,1.484,67,3.746,68,2.206,69,3.417,71,1.702,72,1.974,77,2.842,80,6.425,82,3.031,83,3.239,102,2.239,122,2.329,192,2.526,238,0.003,239,0.003,289,1.525,293,0.396,295,1.654,296,0.844,297,0.743,299,1.712,344,3.844,345,4.413,577,3.621,768,2.068,814,3.199,822,1.789,1024,3.692,1868,2.052,3953,4.35,3954,4.003,4051,5.564,4053,5.067,4128,3.581,4135,5.105,4138,4.189,4311,5.636,4312,7.484,4313,7.484,4314,5.636,4315,5.636,4316,7.484,4317,5.636,4318,7.484,4319,5.636,4320,7.484,4321,5.636,4322,5.636,4323,5.636,4324,7.484,4325,7.484,4326,9.579,4327,7.484,4328,7.484,4329,5.636,4330,5.636,4331,5.636]],["title/classes/SupabaseAuthDto.html",[60,0.173,658,4.248]],["body/classes/SupabaseAuthDto.html",[3,0.02,4,0.02,5,0.02,10,0.101,11,0.62,13,0.768,14,0.395,15,0.004,16,0.023,59,0.023,60,0.095,76,1.212,88,2.206,93,1.605,189,3.177,207,1.941,238,0.002,239,0.002,293,0.438,296,0.785,297,0.925,472,2.394,477,4.021,528,2.85,534,0.702,538,1.037,539,1.065,540,3.324,541,2.253,542,2.064,545,1.629,546,0.378,549,1.244,550,3.724,556,7.397,570,4.696,581,3.724,608,6.085,609,2.162,619,4.296,643,6.669,658,3.724,674,5.135,676,5.023,677,5.023,678,2.064,679,2.299,682,1.151,683,5.023,690,5.023,691,5.023,692,5.023,693,5.81,694,5.464,695,4.652,696,5.81,697,4.652,698,4.128,699,4.652,700,4.652,701,4.652,702,5.023,703,5.023,704,5.023,773,3.598,896,2.43,961,3.051,987,1.741,1076,4.533,1121,4.42,1129,4.441,1133,4.744,1268,2.67,1404,2.354,1461,3.34,1482,2.673,1484,3.34,1593,1.605,1625,1.653,1681,4.021,1689,3.043,1690,3.184,1692,1.871,1693,4.593,1722,3.724,1752,4.353,1773,2.005,1782,3.324,1861,2.94,1975,2.842,2041,3.724,2281,5.314,2412,4.021,4332,9.951,4333,2.798,4334,2.798,4335,2.798,4336,4.472,4337,4.472,4338,2.798,4339,2.798,4340,2.798,4341,4.021,4342,4.021,4343,2.798,4344,3.502,4345,2.798,4346,4.472,4347,2.798,4348,4.021,4349,4.021,4350,2.798,4351,2.798,4352,6.382,4353,4.472,4354,2.798,4355,2.798,4356,6.382,4357,4.472,4358,2.798,4359,4.472,4360,2.798,4361,2.798,4362,4.021,4363,4.021,4364,2.798,4365,4.472,4366,4.472,4367,2.798,4368,4.472,4369,2.798,4370,2.798,4371,2.798,4372,4.021,4373,4.021,4374,2.798,4375,2.798,4376,4.472,4377,3.724,4378,2.798,4379,2.798]],["title/injectables/SupabaseGuard.html",[17,0.905,662,2.17]],["body/injectables/SupabaseGuard.html",[3,0.058,4,0.058,5,0.058,15,0.004,16,0.075,17,1.656,19,1.072,59,0.065,60,0.272,238,0.004,239,0.004,662,3.969,760,6.682,822,2.548,1066,2.616,4380,8.025,4381,8.025,4382,8.025]],["title/injectables/SupabaseStrategy.html",[17,0.905,757,3.995]],["body/injectables/SupabaseStrategy.html",[3,0.049,4,0.049,5,0.049,10,0.243,14,0.328,15,0.005,16,0.077,17,1.493,19,0.903,59,0.055,60,0.229,62,2.5,71,1.285,72,1.887,207,1.27,238,0.004,239,0.004,289,1.713,293,0.405,295,1.655,296,0.845,297,0.743,299,1.713,300,4.608,312,5.022,556,5.022,587,7.979,643,5.974,688,2.382,757,6.585,760,5.625,799,2.09,822,2.145,1066,2.202,1094,6.074,4233,5.625,4383,6.755,4384,8.41,4385,8.41,4386,6.755,4387,8.41,4388,9.157,4389,6.755,4390,8.41,4391,6.755,4392,6.755,4393,6.755,4394,6.755,4395,6.755,4396,6.755,4397,6.755,4398,6.755,4399,6.755,4400,6.755,4401,6.755,4402,6.755,4403,6.755,4404,6.755,4405,6.755,4406,6.755,4407,6.755,4408,6.755]],["title/modules/TierModule.html",[240,1.281,4409,3.792]],["body/modules/TierModule.html",[3,0.054,4,0.054,5,0.054,15,0.004,16,0.073,19,1.006,59,0.061,60,0.255,238,0.004,239,0.004,240,2.256,242,2.783,243,3.473,248,3.473,249,2.867,250,2.824,253,3.639,254,3.76,4409,7.749,4410,6.771,4411,6.771,4412,6.771,4413,8.386,4414,7.531,4415,7.531]],["title/injectables/TierService.html",[17,0.905,4413,3.995]],["body/injectables/TierService.html",[3,0.056,4,0.043,5,0.043,10,0.216,11,1.079,13,0.894,14,0.358,15,0.005,16,0.07,17,1.382,19,0.8,59,0.048,60,0.203,62,1.634,65,2.278,68,1.843,72,1.783,76,1.02,88,4.522,102,2.075,117,1.384,122,2.025,207,1.464,238,0.003,239,0.003,289,1.586,293,0.382,295,1.532,296,0.955,297,0.688,299,1.219,305,5.513,306,3.303,474,6.251,526,4.251,549,0.752,577,2.118,584,8.24,619,5.328,687,4.297,706,4.297,707,5.903,799,1.851,810,2.148,822,1.9,864,3.303,865,3.684,872,6.096,1103,2.278,1752,4.082,2206,4.686,2734,4.686,2979,4.449,4413,6.096,4416,5.985,4417,7.786,4418,7.786,4419,7.786,4420,9.165,4421,5.985,4422,7.786,4423,8.654,4424,5.985,4425,5.985,4426,5.985,4427,5.381,4428,5.985,4429,5.985,4430,7.781,4431,8.654,4432,5.985,4433,7.786,4434,5.985,4435,5.985,4436,5.985]],["title/modules/TimescaleModule.html",[240,1.281,281,3.624]],["body/modules/TimescaleModule.html",[3,0.053,4,0.053,5,0.053,15,0.004,16,0.08,19,0.98,24,2.103,59,0.059,60,0.248,238,0.004,239,0.004,240,2.22,242,2.711,243,3.418,248,3.418,249,2.792,250,2.751,253,3.582,254,3.701,281,7.366,288,3.019,303,3.349,439,5.003,483,5.744,3486,7.936,3495,6.595,4437,6.595,4438,6.595,4439,6.595,4440,7.335,4441,7.335,4442,6.595]],["title/classes/TopProjectsDto.html",[56,3.792,60,0.173]],["body/classes/TopProjectsDto.html",[3,0.048,4,0.048,5,0.048,6,3.675,10,0.238,11,1.151,13,1.033,14,0.404,15,0.004,16,0.073,56,6.174,59,0.054,60,0.307,78,3.907,100,3.259,117,2.099,142,4.255,192,4.068,238,0.003,239,0.003,293,0.367,297,0.734,528,2.418,534,1.662,538,0.869,539,2.52,542,1.635,545,3.025,546,0.896,548,1.971,549,1.043,682,1.711,768,2.295,987,2.123,990,3.485,1103,2.52,1121,2.968,1125,3.408,1127,3.408,1129,3.723,1131,3.594,1194,3.848,1195,5.46,1196,5.184,1197,5.184,1364,5.277,3813,5.953,4443,9.074,4444,6.621,4445,6.621,4446,6.621,4447,6.621]],["title/classes/TopUsersDto.html",[60,0.173,4448,4.248]],["body/classes/TopUsersDto.html",[3,0.042,4,0.042,5,0.042,8,3.713,10,0.211,11,1.064,13,1.055,14,0.407,15,0.005,16,0.069,59,0.047,60,0.29,71,1.114,93,2.757,117,2.282,186,3.776,207,1.444,238,0.003,239,0.003,293,0.402,297,0.856,528,2.698,534,1.471,538,0.897,546,0.793,548,1.745,549,0.736,577,3.032,682,1.583,842,3.443,896,2.175,987,2.004,990,3.085,1069,3.984,1070,3.032,1103,3.261,1110,4.409,1111,3.953,1112,3.869,1113,3.157,1119,3.017,1121,2.627,1129,4.075,1131,3.934,1195,5.631,1365,3.503,1366,3.503,2349,4.88,2750,5.709,2751,6.085,2769,4.589,2772,5.049,2773,5.709,2783,4.356,2784,4.356,2801,4.88,2802,5.269,2803,5.269,2806,5.269,2807,5.269,3292,4.88,4448,6.395,4449,9.438,4450,7.68,4451,5.861]],["title/classes/UpdateEndorsementDto.html",[60,0.173,4452,4.587]],["body/classes/UpdateEndorsementDto.html",[3,0.058,4,0.058,5,0.058,15,0.004,16,0.075,59,0.065,60,0.271,238,0.004,239,0.004,534,2.01,546,1.083,600,5.088,1066,2.61,1374,5.952,1376,7.199,2637,6.667,4452,8.376,4453,8.007,4454,8.007,4455,8.007]],["title/classes/UpdateInsightDto.html",[60,0.173,3028,3.995]],["body/classes/UpdateInsightDto.html",[3,0.051,4,0.051,5,0.051,10,0.255,11,1.2,14,0.397,15,0.004,16,0.057,20,2.162,59,0.057,60,0.24,76,1.02,202,3.563,238,0.004,239,0.004,293,0.413,296,0.94,455,2.779,534,1.778,538,0.979,539,3.56,542,1.841,600,4.499,608,4.83,773,4.186,778,5.264,984,3.814,986,3.357,988,5.896,1066,2.822,1070,3.064,1078,5.038,1222,5.03,1223,5.501,1224,5.03,1401,7.961,1403,6.366,1404,4.557,1406,6.366,1408,5.905,3028,6.779,3030,5.896,4456,6.366,4457,7.081,4458,7.081,4459,7.081]],["title/classes/UpdateInsightMemberDto.html",[60,0.173,4460,4.248]],["body/classes/UpdateInsightMemberDto.html",[3,0.053,4,0.053,5,0.053,10,0.264,11,1.224,14,0.37,15,0.004,16,0.071,59,0.059,60,0.299,76,1.161,238,0.004,239,0.004,293,0.323,534,1.838,538,0.766,539,2.787,542,1.739,545,3.217,546,0.99,547,3.363,548,2.18,549,0.919,1194,4.255,1404,5.186,1416,6.582,1417,5.439,1864,7.497,1870,6.567,3017,5.732,3049,6.026,4456,7.943,4460,7.356,4461,7.321,4462,7.356,4463,7.321,4464,7.321]],["title/classes/UpdateUserCollaborationDto.html",[60,0.173,4465,4.248]],["body/classes/UpdateUserCollaborationDto.html",[3,0.053,4,0.053,5,0.053,10,0.266,11,1.23,14,0.372,15,0.004,16,0.072,59,0.06,60,0.301,76,1.164,207,1.669,238,0.004,239,0.004,293,0.326,393,2.973,517,7.982,534,1.853,538,0.773,539,2.809,542,1.747,545,3.233,546,0.998,547,3.379,548,2.197,549,0.927,1194,4.289,1438,6.635,1439,6.599,2209,6.895,4465,7.392,4466,6.951,4467,7.38,4468,7.38,4469,6.635,4470,7.38]],["title/classes/UpdateUserDto.html",[60,0.173,616,4.248]],["body/classes/UpdateUserDto.html",[3,0.028,4,0.028,5,0.028,10,0.142,11,0.807,14,0.41,15,0.004,16,0.047,59,0.032,60,0.197,76,1.253,207,1.901,238,0.002,239,0.002,293,0.427,296,0.82,297,0.902,465,4.12,472,1.268,528,2.467,534,0.99,538,1.012,539,2.217,542,2.037,545,2.522,546,0.533,547,3.363,548,1.174,549,1.214,616,4.848,619,5.023,630,8.988,688,2.955,693,6.794,694,6.388,695,5.766,696,6.794,697,5.766,698,4.713,699,5.766,700,5.766,701,5.766,715,5.796,773,3.697,775,4.723,780,3.828,876,3.384,961,3.972,1000,2.93,1121,4.222,1129,4.282,1131,4.134,1419,3.544,1421,5.236,1482,2.356,1593,2.09,1752,3.972,1782,4.329,1975,2.505,2342,4.559,2782,5.988,3049,2.689,4341,5.236,4342,3.544,4344,4.559,4348,5.236,4349,5.236,4362,5.236,4363,3.544,4372,8.153,4373,3.544,4377,3.282,4466,7.647,4471,3.942,4472,5.236,4473,3.942,4474,3.942,4475,5.823,4476,3.942,4477,3.942,4478,3.942,4479,3.942,4480,3.942,4481,3.942,4482,3.942,4483,3.942,4484,3.942,4485,3.942,4486,3.942,4487,3.942,4488,3.942,4489,3.942,4490,3.942,4491,3.942,4492,7.648,4493,5.823,4494,5.823,4495,5.823,4496,5.823,4497,3.942,4498,3.942,4499,3.942,4500,3.942,4501,8.159,4502,3.942,4503,3.942,4504,3.942]],["title/classes/UpdateUserEmailPreferencesDto.html",[60,0.173,617,4.248]],["body/classes/UpdateUserEmailPreferencesDto.html",[3,0.046,4,0.046,5,0.046,10,0.229,11,1.121,14,0.401,15,0.004,16,0.065,59,0.051,60,0.274,197,4.356,207,1.947,238,0.003,239,0.003,293,0.393,472,2.863,534,1.593,538,0.932,539,3.387,542,1.947,545,3.412,546,0.858,548,1.89,549,1.117,606,5.138,617,6.733,619,6.265,688,2.952,773,5.066,778,6.615,780,6.159,1439,6.011,1782,6.011,4466,7.336,4505,6.347,4506,8.899,4507,8.899,4508,8.899,4509,6.347,4510,9.369,4511,6.347,4512,8.086,4513,6.347]],["title/classes/UpdateUserProfileInterestsDto.html",[60,0.173,624,4.248]],["body/classes/UpdateUserProfileInterestsDto.html",[3,0.053,4,0.053,5,0.053,10,0.265,11,1.227,14,0.371,15,0.004,16,0.072,59,0.059,60,0.3,76,1.163,207,1.665,238,0.004,239,0.004,293,0.325,455,3.476,534,1.845,538,0.769,539,2.798,542,1.743,545,3.225,546,0.994,548,2.188,549,0.923,624,7.374,626,7.506,688,2.692,984,4.771,986,4.677,2365,5.464,4466,6.934,4514,7.35,4515,6.12,4516,7.35,4517,5.755]],["title/controllers/UserCollaborationController.html",[551,1.194,4518,4.248]],["body/controllers/UserCollaborationController.html",[3,0.03,4,0.03,5,0.03,10,0.148,13,0.967,14,0.35,15,0.005,16,0.08,19,0.55,25,1.361,26,1.437,28,2.032,59,0.033,60,0.139,62,1.124,65,1.583,68,1.966,71,1.144,72,1.987,76,0.979,77,2.844,102,2.081,119,2.177,122,2.257,197,2.219,207,1.929,238,0.003,239,0.003,289,1.225,293,0.345,295,1.537,296,0.785,297,0.69,299,1.591,312,3.062,393,2.905,414,5.548,415,3.225,528,1.602,538,0.818,546,0.557,549,1.043,551,0.964,553,1.138,555,1.522,556,3.062,568,3.17,570,3.165,571,2.708,573,4.965,577,3.514,583,2.219,587,6.503,603,3.029,606,2.617,634,2.926,635,2.967,636,1.846,637,3.565,638,3.165,639,3.243,640,2.877,641,2.929,642,1.522,643,2.926,644,3.92,662,1.752,668,1.437,670,3.243,671,2.664,682,1.464,685,2.536,795,4.372,796,2.331,801,3.656,802,1.916,803,1.916,814,2.289,1014,1.379,1015,1.111,1240,2.475,1241,1.916,1242,1.953,1243,1.916,1244,1.953,1385,3.225,1436,7.645,1439,6.961,2209,2.809,2559,2.809,2560,4.102,2605,3.703,2633,1.916,2671,3.703,2688,4.102,2909,3.702,2912,3.062,2942,2.168,3022,4.272,3026,5.046,3029,3.225,3346,2.926,3966,3.953,3973,4.102,4128,2.617,4465,7.222,4518,5.007,4519,4.828,4520,4.119,4521,4.119,4522,7.469,4523,7.469,4524,7.81,4525,6.386,4526,4.119,4527,6.014,4528,7.103,4529,3.703,4530,5.407,4531,5.407,4532,4.119,4533,4.119,4534,3.703,4535,7.103,4536,4.119,4537,4.119,4538,4.119,4539,4.119,4540,4.119,4541,3.703,4542,4.119,4543,4.119,4544,4.119,4545,2.617,4546,5.28,4547,3.703,4548,6.014,4549,4.119,4550,2.617,4551,4.119,4552,4.119,4553,4.119,4554,4.119,4555,4.119,4556,4.119,4557,7.103,4558,4.119,4559,6.014,4560,4.119,4561,4.119,4562,4.119,4563,3.703,4564,4.119,4565,4.119]],["title/injectables/UserCollaborationService.html",[17,0.905,4546,3.792]],["body/injectables/UserCollaborationService.html",[3,0.036,4,0.036,5,0.036,10,0.182,13,0.82,14,0.362,15,0.005,16,0.077,17,1.233,18,3.231,19,0.674,20,2.613,21,4.181,22,1.089,23,1.981,24,1.447,25,1.667,26,1.761,28,2.49,59,0.041,60,0.171,62,1.896,64,1.522,65,1.829,67,3.58,68,2.025,69,3.171,71,1.763,72,2.124,76,1.158,77,2.717,82,3.465,83,3.006,102,1.345,119,2.385,122,1.313,207,0.949,234,2.719,238,0.003,239,0.003,247,5.118,289,1.415,293,0.42,295,1.825,296,0.932,297,0.82,299,1.889,414,4.934,415,3.952,577,3.175,682,1.849,685,5.709,799,2.457,814,1.921,822,1.602,1014,1.69,1015,1.361,1016,3.107,1021,3.107,1023,4.001,1024,2.49,1641,2.933,2252,4.538,2687,4.276,2705,4.276,4519,5.625,4522,6.246,4523,7.141,4525,6.246,4534,4.538,4541,6.246,4546,5.164,4563,8.067,4566,5.047,4567,6.946,4568,5.047,4569,5.047,4570,6.946,4571,6.946,4572,5.047,4573,5.047,4574,5.047,4575,5.047,4576,6.946,4577,5.047,4578,5.047,4579,5.047,4580,5.047,4581,5.047,4582,5.047,4583,5.047,4584,5.047,4585,5.047,4586,5.047,4587,5.047,4588,5.047]],["title/controllers/UserController.html",[551,1.194,4589,4.248]],["body/controllers/UserController.html",[3,0.023,4,0.023,5,0.023,8,2.414,10,0.116,14,0.377,15,0.005,16,0.081,19,0.43,25,1.063,26,1.123,28,2.463,57,2.519,59,0.026,60,0.109,62,0.878,65,2.079,68,1.448,71,1.62,72,2.082,76,1.155,77,3.065,85,2.845,119,2.612,122,1.591,196,3.478,197,3.714,202,3.391,207,1.854,238,0.002,239,0.002,289,1.017,293,0.376,295,1.676,296,0.856,297,0.753,299,1.735,334,2.279,335,1.693,336,2.198,387,1.821,389,2.825,390,1.98,391,1.923,395,2.825,397,1.923,411,4.82,416,3.546,417,2.519,439,3.405,440,2.679,465,5.241,538,0.892,546,0.435,549,1.035,551,0.753,553,0.889,555,1.189,568,3.416,572,2.679,639,3.761,640,3.542,641,3.28,642,1.189,644,3.376,668,1.123,671,3.194,688,1.414,801,2.57,1014,1.077,1015,0.868,1232,2.519,1240,3.25,1241,1.496,1242,1.525,1243,1.496,1244,1.525,1245,4.021,1246,2.391,1251,2.519,1297,5.398,1815,4.157,2246,5.093,2274,2.044,2477,4.157,2560,5.386,2563,4.757,2606,4.47,2633,1.496,2666,6.214,2667,5.398,2799,5.74,2804,3.711,2898,5.125,2911,2.519,2918,2.892,2928,2.892,2943,4.172,2945,2.519,2950,2.679,2968,2.892,3448,2.892,3486,4.547,3659,2.892,3714,3.909,3727,3.462,3728,2.115,3750,2.285,3755,2.892,3766,2.194,3768,2.285,4448,5.74,4545,2.044,4550,2.044,4589,4.157,4590,3.217,4591,7.463,4592,7.463,4593,7.463,4594,7.463,4595,7.463,4596,4.992,4597,4.992,4598,6.894,4599,3.217,4600,3.217,4601,6.575,4602,3.217,4603,3.217,4604,3.217,4605,3.217,4606,3.217,4607,3.217,4608,3.217,4609,3.217,4610,2.892,4611,3.217,4612,3.217,4613,3.217,4614,3.217,4615,3.217,4616,3.217,4617,3.217,4618,3.217,4619,3.217,4620,3.217,4621,3.217,4622,3.217,4623,3.217,4624,4.992,4625,3.217,4626,3.217,4627,3.217,4628,4.992,4629,4.992,4630,3.217,4631,3.217,4632,3.217,4633,3.217,4634,2.892,4635,3.217,4636,3.217,4637,4.992,4638,4.488,4639,3.217,4640,3.217,4641,4.547,4642,2.892,4643,3.217,4644,2.679,4645,3.217,4646,3.217,4647,4.992,4648,3.217,4649,3.217,4650,3.217,4651,3.217,4652,3.217,4653,3.217,4654,4.488,4655,3.217,4656,3.217,4657,3.217,4658,3.217,4659,3.217,4660,3.217,4661,3.217,4662,3.217,4663,3.217]],["title/controllers/UserEndorsementController.html",[551,1.194,4664,4.248]],["body/controllers/UserEndorsementController.html",[3,0.041,4,0.041,5,0.041,10,0.206,13,0.994,14,0.352,15,0.005,16,0.08,19,0.765,59,0.046,60,0.194,71,1.438,72,1.983,119,2.63,207,1.693,238,0.003,239,0.003,289,1.54,293,0.334,295,1.488,296,0.76,297,0.668,299,1.54,419,6.157,420,4.766,528,1.525,538,0.792,546,0.774,551,1.339,553,1.582,555,2.115,568,3.188,570,4.741,577,3.315,636,2.566,637,3.865,640,3.429,641,3.175,642,2.115,662,2.435,668,1.997,670,3.452,671,2.836,799,2.339,802,2.662,810,2.055,1014,1.917,1015,1.544,1236,5.235,1240,3.485,1241,2.662,1242,2.713,1243,2.662,1244,2.713,1734,4.971,1814,7.053,2606,5.098,2612,6.798,2622,6.296,2634,5.776,2642,5.146,2648,6.798,2942,3.013,4519,4.921,4664,6.296,4665,5.724,4666,5.724,4667,9.008,4668,9.008,4669,5.724,4670,5.724,4671,5.724,4672,5.724,4673,5.724,4674,5.724,4675,5.146,4676,5.724,4677,5.724,4678,5.724,4679,5.724,4680,5.724,4681,5.724,4682,5.724]],["title/injectables/UserFollowService.html",[17,0.905,4683,3.48]],["body/injectables/UserFollowService.html",[3,0.031,4,0.031,5,0.031,10,0.155,13,1.079,14,0.344,15,0.005,16,0.071,17,1.103,18,2.006,19,0.576,20,2.437,22,0.93,23,1.692,24,1.237,28,2.127,59,0.035,60,0.146,62,1.697,64,1.3,65,1.92,67,3.339,68,2.276,69,2.838,71,1.727,72,2.076,77,2.952,82,3.894,83,3.661,85,2.892,102,2.126,121,1.718,122,2.419,207,1.59,213,4.087,234,3.928,238,0.003,239,0.003,289,1.267,293,0.401,295,1.735,296,0.886,297,0.779,299,1.795,399,2.941,400,3.206,577,3.587,644,5.013,799,1.334,814,3.038,822,1.369,1024,3.597,1173,2.655,1868,1.57,2414,4.417,2454,3.591,3953,2.506,4128,2.74,4135,2.941,4138,4.622,4519,5.404,4545,2.74,4683,4.241,4684,4.312,4685,6.217,4686,6.217,4687,6.217,4688,6.217,4689,6.217,4690,4.312,4691,6.196,4692,4.312,4693,6.217,4694,6.217,4695,8.516,4696,4.312,4697,4.312,4698,6.217,4699,4.312,4700,6.217,4701,4.312,4702,6.217,4703,8.646,4704,4.312,4705,6.217,4706,4.312,4707,3.377,4708,4.312,4709,4.312,4710,6.217,4711,4.312,4712,7.291,4713,7.98,4714,4.312,4715,7.291,4716,9.298,4717,4.622,4718,6.217,4719,6.217,4720,6.217,4721,4.312,4722,4.312,4723,6.217,4724,4.312,4725,4.312,4726,4.312]],["title/controllers/UserFollowingController.html",[551,1.194,4727,4.248]],["body/controllers/UserFollowingController.html",[3,0.047,4,0.047,5,0.047,8,3.988,10,0.236,14,0.256,15,0.005,16,0.081,19,0.875,28,3.232,59,0.053,60,0.222,65,1.725,68,1.551,71,1.246,72,1.861,76,1.064,77,2.619,85,4.2,122,1.704,207,1.782,238,0.003,239,0.003,289,1.68,293,0.289,295,1.289,296,0.658,297,0.579,299,1.334,336,3.633,399,4.468,400,4.869,465,4.864,528,2.198,538,0.686,546,0.886,549,0.823,551,1.533,553,1.81,555,2.421,568,2.92,639,3.766,641,3.094,642,2.421,644,4.983,668,2.286,671,2.456,810,2.352,915,5.078,2274,4.162,2563,4.246,2633,3.047,2667,5.129,4519,4.794,4545,4.162,4550,4.162,4644,5.454,4683,6.159,4717,6.132,4727,6.869,4728,6.55,4729,9.478,4730,6.55,4731,6.55,4732,5.889,4733,6.55,4734,5.129,4735,6.55,4736,6.55,4737,6.55]],["title/controllers/UserFollowsController.html",[551,1.194,4738,4.248]],["body/controllers/UserFollowsController.html",[3,0.03,4,0.03,5,0.03,10,0.148,13,1.025,14,0.349,15,0.005,16,0.074,19,0.548,28,2.025,59,0.033,60,0.139,65,1.081,68,2.171,71,1.577,72,2.008,76,1.103,77,2.912,85,4.029,98,2.185,122,2.254,207,1.954,238,0.003,239,0.003,289,1.222,293,0.345,295,1.535,296,0.784,297,0.689,299,1.765,399,4.836,400,3.052,465,5.122,528,1.599,538,0.816,546,0.555,549,1.152,551,0.96,553,1.134,555,1.517,568,3.247,570,3.158,577,3.581,583,2.211,603,3.022,636,1.84,637,3.787,638,3.158,639,3.787,640,2.43,641,3.111,642,1.517,644,3.912,662,1.746,668,1.433,670,3.56,671,2.924,687,2.265,706,2.265,707,4.092,799,1.27,802,1.909,810,1.474,864,3.311,865,2.527,915,3.693,2414,5.539,2455,5.319,2563,4.27,2633,1.909,2666,5.903,2667,5.551,2808,7.214,2810,3.052,2942,2.161,3920,3.418,3952,5.27,3953,4.532,3972,3.052,3973,5.319,4017,7.006,4021,5.394,4519,4.821,4545,2.608,4550,2.608,4638,3.691,4644,3.418,4654,7.011,4683,4.836,4717,4.459,4732,6.374,4734,3.214,4738,4.995,4739,4.105,4740,7.089,4741,8.295,4742,8.295,4743,7.089,4744,4.105,4745,4.105,4746,5.999,4747,4.105,4748,4.105,4749,4.105,4750,4.105,4751,4.105,4752,5.999,4753,4.105,4754,4.105,4755,5.999,4756,4.105,4757,4.105,4758,4.105,4759,5.999,4760,4.105,4761,4.105,4762,4.105,4763,4.105,4764,4.105,4765,4.105,4766,4.105,4767,5.999,4768,4.105,4769,4.105,4770,5.999,4771,4.105,4772,4.105,4773,3.691,4774,5.999,4775,4.105,4776,3.691,4777,4.105,4778,4.105]],["title/controllers/UserHighlightsController.html",[551,1.194,4779,4.248]],["body/controllers/UserHighlightsController.html",[3,0.019,4,0.019,5,0.019,10,0.094,13,1.067,14,0.393,15,0.005,16,0.069,19,0.349,25,0.864,26,0.912,28,2.089,59,0.021,60,0.089,68,1.453,71,1.372,72,2.048,76,0.851,77,2.994,85,2.854,102,1.923,119,1.54,122,2.059,202,1.743,207,1.861,238,0.002,239,0.002,289,0.863,293,0.361,295,1.609,296,0.919,297,0.723,299,1.666,350,1.29,393,2.738,395,3.816,397,1.563,405,2.607,406,5.231,407,1.719,528,0.697,538,0.856,546,0.354,549,1.162,551,0.612,553,0.723,555,0.966,568,3.337,570,4.87,571,4.034,573,5.399,577,3.638,580,4.562,583,3.632,603,2.689,606,2.691,609,2.048,634,1.857,635,2.089,636,1.172,637,3.732,638,2.81,639,3.612,640,3.205,641,3.15,642,0.966,662,1.112,668,0.912,670,3.612,671,3.066,682,1.926,698,1.29,795,4.87,796,2.397,801,4.209,802,1.216,803,1.216,810,0.939,814,0.995,855,1.563,987,2.049,1015,0.705,1240,2.197,1331,2.351,1452,6.577,1454,2.047,1777,3.968,1778,5.651,2278,2.177,2339,3.008,2348,4.995,2353,3.008,2629,4.562,2633,1.216,2898,3.968,2909,3.778,2911,3.316,2913,5.517,2914,4.359,2931,2.351,2932,2.351,2933,2.351,2934,2.351,2940,4.301,2941,4,2942,1.376,2943,3.641,2945,2.047,2952,2.351,2957,4.151,2964,2.351,2965,2.351,2967,2.351,3013,2.047,3021,2.047,3037,2.047,3042,2.047,3346,1.857,3966,4.034,3973,2.889,4017,3.316,4128,1.661,4135,1.783,4517,2.047,4519,4.882,4529,2.351,4550,1.661,4779,3.526,4780,2.615,4781,2.615,4782,6.742,4783,4.799,4784,6.742,4785,6.742,4786,6.742,4787,6.742,4788,6.742,4789,6.137,4790,6.742,4791,2.615,4792,7.115,4793,2.615,4794,2.615,4795,2.615,4796,2.615,4797,2.615,4798,7.414,4799,2.615,4800,4.235,4801,2.351,4802,2.615,4803,5.338,4804,2.615,4805,3.526,4806,2.615,4807,2.615,4808,2.615,4809,2.615,4810,2.615,4811,2.615,4812,2.615,4813,2.615,4814,2.615,4815,6.137,4816,4.235,4817,2.615,4818,2.615,4819,2.615,4820,2.615,4821,2.615,4822,2.615,4823,2.615,4824,2.615,4825,2.177,4826,2.615,4827,2.615,4828,4.235,4829,2.351,4830,2.047,4831,2.177,4832,2.351,4833,2.615,4834,2.615,4835,2.615,4836,2.615,4837,2.615,4838,2.177,4839,5.338,4840,2.615,4841,2.615,4842,2.615,4843,2.615,4844,2.615,4845,2.615,4846,2.615,4847,2.615,4848,2.615,4849,2.615,4850,2.615,4851,2.615,4852,4.235,4853,2.615,4854,2.615,4855,2.615,4856,2.615,4857,2.615,4858,2.615,4859,2.615,4860,2.615,4861,2.615]],["title/injectables/UserHighlightsService.html",[17,0.905,2943,3.48]],["body/injectables/UserHighlightsService.html",[3,0.018,4,0.018,5,0.018,10,0.185,13,1.08,14,0.361,15,0.005,16,0.073,17,0.72,18,2.393,19,0.331,20,2.269,21,2.708,22,0.535,23,0.973,24,0.711,25,0.819,26,0.865,28,2.001,59,0.02,60,0.084,62,1.107,64,1.223,65,1.853,67,2.488,68,2.313,69,1.851,71,1.695,72,2.123,76,0.973,77,2.787,78,1.616,82,3.778,83,2.838,85,2.393,90,1.691,91,1.544,93,1.456,99,1.441,100,0.973,101,1.691,102,1.98,118,2.134,119,2.413,121,1.422,122,2.244,124,2.933,143,0.819,146,1.843,147,1.843,148,1.526,149,1.843,156,1.526,196,1.092,207,1.233,213,3.383,224,2.881,234,3.203,238,0.002,239,0.002,247,4.002,289,0.826,293,0.408,295,1.799,296,0.919,297,0.808,299,1.862,395,2.295,397,1.481,405,2.496,406,4.249,407,1.629,577,3.584,644,4.1,682,1.225,685,3.168,698,1.223,740,3.175,768,1.121,799,2.398,803,1.153,814,1.959,822,0.787,855,1.481,896,0.702,899,2.912,1014,1.358,1015,1.094,1016,1.526,1021,3.168,1023,3.546,1024,2.539,1093,1.335,1137,2.766,1145,2.766,1147,4.055,1152,1.629,1153,1.691,1174,1.481,1191,1.761,1235,1.629,1452,4.655,1454,1.941,1641,2.991,1680,1.818,1777,1.843,1778,1.941,1868,1.477,1962,1.843,2278,2.064,2294,2.064,2315,3.175,2316,1.941,2333,2.229,2339,2.881,2341,2.064,2348,3.908,2454,2.064,2458,2.229,2463,2.229,2687,2.496,2705,2.496,2901,3.646,2920,2.229,2943,2.766,3026,1.761,3089,2.064,3156,2.766,3157,3.376,3168,3.014,3170,3.376,3204,2.229,3498,1.843,3681,2.064,3785,2.064,3796,3.646,3805,2.229,3914,2.229,3930,3.376,3953,1.441,4128,1.575,4135,1.691,4519,5.421,4545,1.575,4683,5.068,4691,5.068,4703,5.895,4707,1.941,4734,1.941,4792,7.6,4798,7.766,4830,1.941,4832,2.229,4862,2.479,4863,4.055,4864,4.055,4865,4.055,4866,4.055,4867,4.055,4868,4.055,4869,4.055,4870,4.055,4871,4.055,4872,4.055,4873,2.479,4874,5.146,4875,2.479,4876,3.646,4877,4.055,4878,2.479,4879,4.055,4880,2.479,4881,4.055,4882,5.895,4883,2.479,4884,2.479,4885,4.055,4886,2.479,4887,4.055,4888,2.479,4889,2.479,4890,2.479,4891,2.479,4892,4.055,4893,2.479,4894,4.055,4895,2.479,4896,2.479,4897,4.055,4898,2.479,4899,4.055,4900,2.479,4901,2.479,4902,2.479,4903,4.055,4904,2.479,4905,2.229,4906,2.479,4907,2.229,4908,3.646,4909,3.646,4910,2.479,4911,2.479,4912,2.229,4913,4.055,4914,2.229,4915,2.479,4916,2.479,4917,2.479,4918,2.479,4919,2.479,4920,2.479,4921,2.479,4922,2.479,4923,2.479,4924,2.479,4925,2.479,4926,2.479,4927,2.479,4928,4.055,4929,2.479,4930,2.479,4931,2.479,4932,2.479,4933,2.479,4934,2.479,4935,2.479,4936,2.479,4937,2.479,4938,2.479,4939,2.479,4940,4.055,4941,2.479,4942,2.479,4943,2.479,4944,2.229,4945,2.479,4946,2.479,4947,2.479,4948,2.479,4949,2.479,4950,2.479,4951,4.055,4952,2.479,4953,2.479,4954,2.479,4955,2.479,4956,5.146,4957,2.479,4958,2.479,4959,2.479,4960,4.055,4961,4.055,4962,2.479,4963,2.479,4964,2.479,4965,5.146,4966,2.479,4967,2.479,4968,4.055,4969,2.479,4970,2.479]],["title/controllers/UserInsightMemberController.html",[551,1.194,3148,4.248]],["body/controllers/UserInsightMemberController.html",[3,0.023,4,0.023,5,0.023,10,0.116,13,1.043,14,0.382,15,0.005,16,0.077,19,0.43,25,1.063,26,1.123,59,0.026,60,0.109,62,0.878,65,1.611,68,2.217,71,1.163,72,1.904,76,0.931,77,2.704,102,2.196,119,1.253,122,2.464,207,0.938,238,0.002,239,0.002,289,1.017,293,0.305,295,1.357,296,0.856,297,0.609,299,1.404,368,3.555,393,2.048,401,4.021,402,1.923,472,1.035,528,1.33,538,0.722,546,0.435,549,1.069,551,0.753,553,0.889,555,1.189,568,3.014,573,5.341,577,3.49,583,1.733,603,3.082,606,3.172,608,2.194,609,1.555,634,2.285,635,1.587,636,1.442,637,3.407,638,3.22,639,3.407,640,3.022,641,2.799,642,1.189,644,3.376,645,2.519,662,1.369,668,1.123,670,3.147,671,2.585,682,1.904,685,1.98,795,4.157,796,1.821,801,3.549,802,1.496,803,1.496,814,2.841,987,1.993,1015,0.868,1070,1.139,1240,2.055,1241,1.496,1242,1.525,1243,1.496,1244,1.525,1404,5.404,1412,2.391,1415,6.861,1417,5.603,1495,3.546,1839,2.679,1864,3.711,1865,2.194,1866,2.892,1868,1.818,1870,4.547,1880,2.892,2560,3.405,2563,1.656,2633,1.496,2688,3.405,2909,3.073,2912,3.711,2914,2.285,2940,4.224,2941,3.928,2942,1.693,2957,4.244,3008,4.897,3014,4.157,3017,4.79,3022,3.546,3026,5.301,3029,2.519,3031,2.391,3032,4.172,3033,2.285,3034,2.519,3036,2.679,3039,4.157,3049,5.09,3051,4.345,3054,5.5,3056,4.488,3058,6.71,3066,7.091,3075,2.892,3077,2.391,3148,4.157,3152,2.679,3198,6.214,3318,2.519,3953,1.87,3966,3.282,4128,2.044,4460,7.091,4462,6.214,4531,2.892,4601,4.157,4971,6.71,4972,3.217,4973,2.892,4974,5.5,4975,7.463,4976,3.217,4977,3.217,4978,4.992,4979,4.992,4980,4.992,4981,6.117,4982,3.217,4983,3.217,4984,2.892,4985,3.217,4986,3.217,4987,3.217,4988,3.217,4989,7.897,4990,3.217,4991,3.217,4992,3.217,4993,3.217,4994,2.892,4995,3.217,4996,3.217,4997,3.217,4998,4.488,4999,4.992,5000,2.892,5001,3.217,5002,3.217,5003,4.992,5004,4.992,5005,6.198,5006,3.217,5007,3.217,5008,7.1,5009,4.992,5010,3.217,5011,3.217,5012,3.217,5013,3.217,5014,4.992,5015,3.217,5016,3.217,5017,3.217,5018,3.217,5019,3.217,5020,4.992,5021,4.992,5022,4.992,5023,4.992,5024,3.217,5025,3.217,5026,3.217,5027,3.217,5028,3.217,5029,3.217]],["title/controllers/UserInsightsController.html",[551,1.194,3147,4.248]],["body/controllers/UserInsightsController.html",[3,0.027,4,0.027,5,0.027,10,0.136,13,0.945,14,0.364,15,0.005,16,0.078,19,0.504,25,1.247,26,1.318,59,0.031,60,0.128,62,1.031,65,1.777,68,2.167,71,1.284,72,1.886,76,0.796,77,2.669,102,2.24,119,1.416,122,2.266,202,3.082,207,1.683,238,0.002,239,0.002,289,1.149,293,0.298,295,1.329,296,0.845,297,0.597,299,1.375,368,4.352,393,1.889,528,1.503,538,0.707,546,0.511,549,1.056,551,0.883,553,1.043,555,1.395,568,2.975,570,3.941,571,3.707,573,5.352,577,3.46,603,2.841,606,3.583,609,3.264,634,2.682,635,2.782,636,1.693,637,3.418,638,3.553,639,3.418,640,3.033,641,2.808,642,1.395,662,1.606,668,1.318,670,3.082,671,2.532,682,1.651,687,2.084,706,2.084,707,2.575,768,2.214,795,3.941,796,2.137,800,3.472,801,3.475,802,1.756,803,1.756,814,2.57,987,1.32,1015,1.018,1070,2.836,1087,2.399,1223,3.583,1240,2.321,1241,1.756,1242,1.79,1243,1.756,1244,1.79,1401,7.012,1404,5.098,1408,2.575,1846,3.395,1861,4.922,1985,3.144,2559,2.575,2560,3.847,2563,2.903,2633,1.756,2688,2.575,2909,4.156,2940,3.192,2941,2.968,2942,1.987,2957,2.325,3008,5.319,3014,5.621,3023,5.071,3024,3.395,3026,4.006,3028,7.012,3029,2.956,3030,4.696,3031,2.807,3032,4.604,3033,2.682,3034,2.956,3036,3.144,3039,4.696,3049,2.575,3051,4.795,3109,4.192,3147,4.696,3150,2.956,3152,3.144,3193,5.071,3198,3.144,3346,2.682,3966,3.707,4240,2.807,4462,3.144,4601,4.696,4783,6.732,4825,3.144,4838,3.144,4971,6.732,4973,3.395,4974,7.205,4984,3.395,4994,3.395,4998,5.071,5000,3.395,5005,3.395,5008,5.071,5030,3.776,5031,8.013,5032,3.776,5033,3.776,5034,3.776,5035,3.776,5036,3.776,5037,3.776,5038,3.776,5039,5.64,5040,3.776,5041,3.776,5042,3.776,5043,3.776,5044,5.64,5045,3.776,5046,3.776,5047,3.776,5048,3.776,5049,3.776,5050,3.776,5051,3.776,5052,3.776,5053,3.776,5054,3.776,5055,3.776,5056,3.776,5057,3.776,5058,3.776,5059,5.64,5060,3.776,5061,3.776,5062,3.776,5063,3.776,5064,3.776,5065,3.776,5066,3.776,5067,3.776,5068,3.776,5069,3.776,5070,3.776,5071,3.776,5072,3.776,5073,3.776,5074,3.776]],["title/controllers/UserListController.html",[551,1.194,5075,4.248]],["body/controllers/UserListController.html",[3,0.015,4,0.015,5,0.015,6,3.465,7,5.836,8,4.7,10,0.077,13,0.851,14,0.395,15,0.005,16,0.073,19,0.285,25,0.704,26,0.744,27,2.353,28,1.766,29,1.514,31,3.059,38,1.514,59,0.017,60,0.072,68,1.429,71,1.53,72,2.071,75,4.859,76,1.193,77,3.042,85,1.664,102,1.443,119,2.362,122,1.807,202,1.904,207,1.894,238,0.001,239,0.001,289,0.729,293,0.371,295,1.621,296,0.939,297,0.728,299,1.712,336,1.576,337,1.122,350,1.052,393,2.815,395,2.026,396,1.355,397,1.274,406,1.097,432,4.738,434,1.585,455,1.405,528,0.568,538,0.88,546,0.288,549,1.182,551,0.499,553,0.589,555,0.788,568,3.391,570,3.837,571,3.04,572,1.775,573,5.66,577,3.193,580,2.66,583,3.742,603,2.33,606,2.274,609,1.73,634,1.514,635,1.766,636,0.956,637,3.327,638,2.434,639,3.837,640,3.259,641,3.209,642,0.788,662,0.907,668,0.744,670,3.171,671,3.152,682,2.048,688,1.014,795,4.918,796,2.026,801,4.24,802,0.992,803,0.992,810,0.765,981,4.51,983,5.114,987,0.837,1014,0.714,1015,0.965,1221,6.249,1223,1.355,1240,2.485,1241,0.992,1242,1.011,1243,2.151,1244,1.011,1265,4.027,1836,2.542,2242,2.802,2348,3.561,2353,2.542,2559,1.454,2629,6.124,2633,0.992,2746,5.439,2771,1.917,2898,4.027,2909,4.024,2911,1.669,2914,4.934,2917,1.775,2941,4.121,2942,1.122,2950,1.775,2953,1.775,2957,4.276,2962,1.917,3013,1.669,3021,1.669,3037,1.669,3042,1.669,3125,7.407,3346,1.514,3784,1.775,3966,2.353,4550,1.355,4610,1.917,4805,1.775,4825,1.775,4830,1.669,4831,1.775,4838,1.775,5075,2.98,5076,2.132,5077,5.877,5078,5.417,5079,5.417,5080,4.625,5081,6.037,5082,5.417,5083,6.037,5084,6.536,5085,5.417,5086,6.037,5087,6.037,5088,6.037,5089,6.037,5090,6.037,5091,2.132,5092,5.417,5093,5.417,5094,2.132,5095,2.132,5096,2.132,5097,2.132,5098,5.877,5099,2.132,5100,3.218,5101,3.579,5102,4.87,5103,2.132,5104,2.132,5105,2.132,5106,2.132,5107,2.132,5108,2.132,5109,2.132,5110,2.132,5111,2.132,5112,2.132,5113,2.132,5114,2.132,5115,2.132,5116,2.132,5117,2.132,5118,4.159,5119,2.132,5120,2.132,5121,2.132,5122,2.132,5123,2.132,5124,2.132,5125,3.579,5126,2.132,5127,2.132,5128,3.579,5129,2.132,5130,2.132,5131,2.132,5132,2.132,5133,2.132,5134,2.132,5135,2.132,5136,2.132,5137,2.132,5138,2.132,5139,2.132,5140,2.132,5141,2.132,5142,3.579,5143,2.132,5144,2.132,5145,2.132,5146,3.579,5147,3.579,5148,1.917,5149,3.438,5150,1.917,5151,2.132,5152,1.917,5153,1.917,5154,2.132,5155,2.132,5156,2.132,5157,2.132,5158,3.579,5159,2.132,5160,2.132,5161,2.132,5162,2.132,5163,2.132,5164,2.132,5165,2.132,5166,2.132,5167,2.132,5168,3.579,5169,2.132,5170,2.132,5171,2.132,5172,2.132,5173,2.132,5174,2.132,5175,2.132,5176,2.132,5177,2.132,5178,2.132,5179,2.132,5180,2.132,5181,2.132,5182,2.132,5183,2.132,5184,2.132,5185,3.579,5186,2.132,5187,2.132,5188,2.132,5189,2.132,5190,2.132,5191,2.132,5192,2.132,5193,2.132,5194,2.132,5195,2.132,5196,2.132]],["title/modules/UserListModule.html",[240,1.281,282,3.792]],["body/modules/UserListModule.html",[3,0.042,4,0.042,5,0.042,6,2.347,7,3.953,8,4.376,15,0.005,16,0.085,19,0.774,24,1.662,27,5.012,28,4.203,29,4.117,30,5.012,31,2.552,32,4.538,42,5.416,43,4.538,44,5.97,47,5.416,48,4.538,59,0.047,60,0.196,61,7.347,64,1.748,196,2.552,207,1.702,238,0.003,239,0.003,240,1.914,241,5.77,242,2.142,243,2.946,248,2.946,249,2.206,250,2.174,253,3.088,254,3.19,282,7.768,283,5.77,288,3.138,303,2.646,336,3.357,337,3.051,361,3.953,389,4.315,390,3.568,391,3.464,395,4.315,396,3.683,397,3.464,432,5.2,434,4.308,553,2.107,2679,3.953,2680,3.953,5075,7.094,5149,7.689,5150,5.211,5197,5.211,5198,5.211,5199,5.211,5200,5.796,5201,5.796,5202,7.094,5203,5.796,5204,5.211,5205,5.796,5206,4.826]],["title/classes/UserListMostActiveContributorsDto.html",[35,3.792,60,0.173]],["body/classes/UserListMostActiveContributorsDto.html",[3,0.037,4,0.037,5,0.037,6,3.235,10,0.184,11,0.97,13,0.93,14,0.393,15,0.005,16,0.065,33,7.46,34,7.083,35,5.203,37,5.383,59,0.065,60,0.237,78,3.427,93,2.513,100,2.747,102,1.865,109,6.255,117,2.398,119,2.436,137,6.255,140,2.373,142,3.657,181,5.203,186,3.177,238,0.003,239,0.003,293,0.421,297,0.908,528,2.72,534,1.281,538,0.997,546,0.69,548,1.519,842,2.288,896,1.445,959,2.373,1014,1.709,1015,1.376,1066,2.282,1069,3.255,1070,2.477,1078,4.852,1099,5.076,1100,3.863,1101,3.684,1103,3.627,1105,4.304,1106,4.852,1110,2.627,1111,3.603,1112,2.571,1113,2.749,1114,2.966,1115,4.024,1116,2.627,1117,2.816,1118,2.888,1119,2.627,1120,2.888,1121,3.138,1122,2.686,1123,2.816,1124,2.816,1125,3.603,1126,2.888,1127,2.627,1128,2.888,1129,3.581,1130,3.05,1131,3.457,1132,4.865,1184,3.863,1186,4.774,1213,4.588,1216,4.588,2748,4.249,5207,7.183,5208,5.103,5209,7.989,5210,5.103,5211,5.103,5212,6.293,5213,5.103]],["title/injectables/UserListService.html",[17,0.905,5149,3.792]],["body/injectables/UserListService.html",[3,0.018,4,0.018,5,0.018,6,3.836,7,6.46,8,3.797,10,0.092,13,0.941,14,0.351,15,0.005,16,0.076,17,0.74,18,2.449,19,0.343,20,2.705,21,3.967,22,0.553,23,1.006,24,0.735,25,0.847,26,0.895,27,1.685,28,2.056,29,1.821,31,3.149,38,1.821,59,0.021,60,0.087,62,1.138,63,2.134,64,1.829,65,1.757,66,4.385,67,2.538,68,2.325,69,3.265,70,3.47,71,1.752,72,2.114,75,6.982,76,1.185,77,2.891,78,2.418,82,3.804,83,2.625,85,2.821,86,2.134,90,1.749,93,0.92,94,1.629,99,3.061,100,2.067,101,2.843,102,1.616,119,2.377,122,1.736,124,1.265,142,2.241,156,2.566,196,1.129,207,0.482,208,3.47,212,3.854,213,3.462,224,1.821,234,2.837,238,0.002,239,0.002,247,4.06,289,0.849,293,0.415,295,1.769,296,0.915,297,0.795,299,1.896,336,1.129,337,1.349,350,1.265,389,1.451,390,1.578,391,1.532,395,1.451,396,1.629,397,1.532,406,3.435,432,3.592,434,1.906,465,3.268,577,3.441,682,1.76,685,3.242,715,1.821,799,2.064,803,1.192,814,2.309,822,0.814,933,1.685,1014,1.396,1015,1.124,1016,1.578,1021,3.242,1023,3.602,1024,2.056,1093,1.381,1099,2.648,1141,4.735,1147,3.592,1152,1.685,1153,1.749,1161,2.305,1168,3.263,1175,2.305,1187,2.007,1191,2.961,1221,4.509,1223,1.629,1414,1.578,1641,3.525,1868,1.918,2242,3.263,2348,3.987,2353,1.821,2373,4.735,2563,1.32,2687,2.566,2705,2.566,2746,5.599,2898,1.906,3016,2.305,3017,2.007,3026,1.821,3089,2.134,3156,2.843,3157,3.47,3168,3.098,3170,3.47,3498,3.098,3540,3.098,3675,2.305,3689,2.305,3784,2.134,3930,5.051,4830,2.007,4831,2.134,4876,4.735,4905,2.305,4907,3.747,4908,2.305,4909,2.305,4912,2.305,4914,3.747,5098,5.454,5100,3.747,5118,3.747,5148,2.305,5149,3.098,5152,2.305,5214,2.564,5215,4.168,5216,4.168,5217,6.066,5218,6.066,5219,4.168,5220,4.168,5221,4.168,5222,4.168,5223,5.266,5224,4.168,5225,5.266,5226,4.168,5227,2.564,5228,2.564,5229,4.168,5230,4.168,5231,2.564,5232,4.168,5233,2.564,5234,2.564,5235,2.564,5236,2.564,5237,4.168,5238,2.564,5239,4.168,5240,2.564,5241,2.564,5242,2.564,5243,4.168,5244,2.564,5245,2.564,5246,2.564,5247,2.564,5248,2.564,5249,2.564,5250,2.564,5251,2.564,5252,4.168,5253,2.564,5254,2.564,5255,4.168,5256,2.564,5257,2.564,5258,2.564,5259,2.564,5260,4.168,5261,4.168,5262,4.168,5263,2.564,5264,2.564,5265,2.564,5266,2.564,5267,2.564,5268,2.564,5269,2.564,5270,2.564,5271,2.564,5272,2.564,5273,2.564,5274,2.564,5275,5.266,5276,4.168,5277,2.564,5278,2.564,5279,2.564,5280,2.564,5281,2.564,5282,2.564,5283,2.564,5284,2.564,5285,2.564,5286,2.564,5287,2.564,5288,2.564,5289,2.564,5290,5.266,5291,2.564,5292,2.564,5293,2.564,5294,2.564,5295,4.168,5296,2.564,5297,2.564,5298,2.564,5299,2.564,5300,2.564,5301,2.564,5302,2.564]],["title/controllers/UserListStatsController.html",[551,1.194,5202,4.248]],["body/controllers/UserListStatsController.html",[3,0.025,4,0.025,5,0.025,6,3.32,7,5.591,8,4.62,10,0.127,14,0.399,15,0.005,16,0.077,19,0.472,25,1.167,26,1.233,28,1.743,30,4.263,31,3.609,32,2.766,35,5.382,36,2.941,37,5.091,38,2.509,39,6.332,40,4.466,41,2.941,42,3.81,43,4.2,44,4.2,45,3.987,46,2.941,47,3.81,48,2.766,54,5.382,55,2.941,56,5.382,57,2.766,58,2.941,59,0.029,60,0.12,61,4.606,71,1.48,72,2.007,74,5.273,76,1.205,77,2.91,78,2.138,119,1.628,194,6.281,207,0.664,238,0.002,239,0.002,289,1.093,293,0.344,295,1.532,296,0.936,297,0.688,299,1.586,393,2.607,411,3.036,472,1.726,528,0.941,538,0.815,546,0.478,549,1.151,551,0.826,553,0.976,555,1.305,568,3.244,573,5.477,639,3.742,640,3.32,641,3.074,642,1.305,668,1.233,671,2.92,682,2.106,795,4.824,801,4.219,810,1.268,933,5.769,983,4.327,987,1.255,1240,3.374,1241,1.643,1242,1.675,1243,1.643,1244,1.675,1265,6.813,1449,5.53,1810,4.2,2633,1.643,2914,5.53,2941,4.314,2957,4.793,3714,4.2,3726,4.823,4550,2.245,5077,4.823,5102,3.176,5153,3.176,5202,4.466,5204,3.176,5303,3.533,5304,7.785,5305,8.776,5306,7.785,5307,7.785,5308,3.533,5309,6.484,5310,3.533,5311,6.484,5312,3.533,5313,3.533,5314,3.533,5315,3.533,5316,5.364,5317,7.241,5318,5.364,5319,5.364,5320,5.364,5321,5.364,5322,3.533,5323,6.484,5324,3.533,5325,3.533,5326,3.533,5327,3.533,5328,3.533,5329,3.533,5330,5.364,5331,3.533,5332,5.364,5333,3.533,5334,3.533,5335,3.533,5336,3.533,5337,3.533,5338,3.533,5339,3.533,5340,3.533,5341,3.533,5342,6.484,5343,6.484,5344,3.533,5345,3.533,5346,3.533,5347,3.533,5348,3.533]],["title/injectables/UserListStatsService.html",[17,0.905,61,3.624]],["body/injectables/UserListStatsService.html",[0,1.391,1,3.856,3,0.017,4,0.017,5,0.017,6,3.551,7,5.98,8,4.404,9,2.093,10,0.084,12,2.093,13,0.919,14,0.331,15,0.005,16,0.072,17,0.683,18,1.083,19,0.311,20,1.748,21,4.457,22,0.502,23,0.914,24,0.668,25,0.769,26,0.812,27,1.53,28,1.9,29,1.654,30,2.531,31,1.025,32,1.823,33,1.823,34,1.73,35,3.661,36,1.938,37,2.302,38,1.654,39,5.374,40,4.765,41,1.938,42,1.654,43,3.015,44,3.015,45,2.863,46,1.938,47,1.654,48,1.823,49,1.823,50,4.428,51,2.093,52,1.823,53,2.093,54,4.254,55,1.938,56,4.254,57,1.823,58,1.938,59,0.019,60,0.079,61,2.736,62,1.051,63,1.938,64,0.702,65,2.127,66,3.206,67,2.395,68,2.35,69,1.758,70,1.938,71,1.299,72,1.896,73,4.428,74,4.327,75,7.152,76,1.178,77,2.631,78,4.121,79,5.146,80,2.531,81,2.093,82,3.429,83,2.956,84,2.093,85,3.938,86,5.687,87,4.101,88,1.9,89,3.462,90,3.359,91,2.985,92,4.101,93,2.276,94,4.982,95,4.101,96,7.05,97,1.938,98,2.943,99,5.096,100,3.441,101,1.588,102,1.926,103,2.093,104,3.015,105,2.093,106,2.863,107,2.093,108,5.371,109,3.015,110,5.74,111,3.462,112,2.093,113,3.462,114,2.093,115,3.462,116,2.093,117,1.579,118,2.027,119,1.236,120,2.093,121,1.361,122,1.649,123,2.093,124,1.9,125,2.093,126,4.428,127,6.5,128,2.093,129,4.428,130,3.462,131,3.462,132,3.462,133,3.462,134,2.093,135,3.462,136,4.428,137,4.964,138,2.093,139,2.093,140,2.291,141,3.462,142,3.217,143,1.891,144,2.093,145,2.093,146,1.73,147,1.73,148,1.433,149,1.73,150,2.093,151,2.093,152,3.462,153,2.093,154,5.146,155,2.093,156,5.666,157,2.093,158,2.093,159,6.139,160,6.015,161,2.093,162,2.093,163,2.093,164,4.428,165,2.093,166,2.093,167,2.093,168,2.093,169,4.428,170,2.093,171,2.093,172,2.093,173,2.093,174,4.428,175,2.093,176,1.823,177,1.823,178,2.093,179,2.093,180,2.093,181,1.73,182,4.428,183,2.093,184,2.093,185,2.093,186,0.86,187,1.823,188,2.093,189,1.654,190,1.938,191,1.938,192,1.044,193,2.093,194,1.53,195,2.093,196,1.025,197,1.254,198,1.53,199,2.093,200,1.285,201,3.206,202,1.585,203,1.73,204,2.093,205,1.938,206,2.093,207,0.438,208,1.938,209,3.206,210,2.093,211,2.093,212,1.479,213,1.53,214,2.093,215,2.093,216,2.093,217,2.093,218,2.093,219,2.093,220,2.093,221,6.5,222,2.093,223,1.938,224,1.654,225,4.428,226,5.348,227,5.687,228,5.077,229,4.428,230,4.428,231,4.428,232,4.428,233,4.428,234,3.679,235,4.428,236,4.428,237,4.428,238,0.002,239,0.002,289,0.784,293,0.381,295,1.667,296,0.851,297,0.748,299,1.725,300,3.359,822,0.739,1103,2.179,5349,3.851,5350,3.851,5351,3.851,5352,3.851,5353,2.328,5354,2.328,5355,2.328,5356,2.328,5357,2.328,5358,2.328,5359,2.328,5360,2.328,5361,2.328,5362,2.328,5363,2.328,5364,2.328,5365,2.328,5366,2.328,5367,2.328,5368,2.328,5369,2.328,5370,2.328,5371,2.328,5372,2.328,5373,2.328,5374,2.328,5375,2.328,5376,2.328]],["title/modules/UserModule.html",[240,1.281,283,3.049]],["body/modules/UserModule.html",[3,0.03,4,0.03,5,0.03,15,0.005,16,0.086,19,0.555,24,1.192,28,4.431,59,0.034,60,0.141,64,1.253,196,1.83,207,1.854,238,0.003,239,0.003,240,1.52,241,5.201,242,1.536,243,2.339,248,2.339,249,1.582,250,1.559,253,2.452,254,2.533,274,5.935,275,5.201,281,6.181,283,6.375,288,2.491,303,1.897,332,2.835,334,2.763,335,2.188,336,2.666,350,2.05,368,3.518,369,3.461,387,2.352,388,3.461,395,3.426,397,2.484,399,4.129,400,3.09,405,3.727,406,2.139,407,2.732,410,4.74,411,2.352,412,4.3,413,3.254,414,4.3,415,3.254,416,4.3,417,3.254,419,3.979,420,3.461,432,4.129,433,3.09,434,3.09,438,3.737,439,2.835,440,3.461,483,3.254,553,1.673,644,5.392,2274,2.641,2634,6.664,2679,2.835,2680,2.835,2681,3.737,2943,6.664,2945,3.254,2974,3.737,3527,5.72,3541,2.952,3542,3.09,3727,5.53,3728,2.732,4409,6.468,4442,3.737,4518,5.945,4545,2.641,4546,6.468,4547,3.737,4589,6.531,4641,7.263,4642,3.737,4664,5.945,4675,3.737,4683,6.664,4691,5.935,4707,3.254,4727,5.945,4734,3.254,4738,5.945,4779,6.531,5206,3.461,5377,3.737,5378,4.156,5379,3.737,5380,3.737,5381,4.156,5382,5.945,5383,5.945,5384,4.156,5385,4.156,5386,4.156,5387,4.156,5388,4.156,5389,4.156,5390,4.156]],["title/controllers/UserNotificationController.html",[551,1.194,5382,4.248]],["body/controllers/UserNotificationController.html",[3,0.046,4,0.046,5,0.046,10,0.227,13,0.917,14,0.315,15,0.005,16,0.082,19,0.844,25,2.086,26,2.203,28,3.115,59,0.051,60,0.214,71,1.201,72,1.829,77,2.559,119,2.552,207,1.758,238,0.003,239,0.003,289,1.642,293,0.279,295,1.243,296,0.634,297,0.558,299,1.286,412,4.485,413,4.944,538,0.661,546,0.854,549,0.793,551,1.477,553,1.745,555,2.333,568,2.852,570,4.242,571,4.151,573,4.817,577,3.31,636,2.83,637,3.679,639,3.679,640,3.264,641,3.022,642,2.333,662,2.686,668,2.203,670,2.882,671,2.368,802,2.937,810,2.267,1014,2.114,1015,1.703,1240,3.317,2407,5.257,2559,4.307,2629,5.991,2942,3.323,4519,4.684,4550,4.012,4691,6.055,4707,4.944,4801,5.677,4829,5.677,4944,8.408,5382,6.71,5391,6.314,5392,6.314,5393,9.661,5394,6.314,5395,6.314,5396,6.314,5397,6.314,5398,6.314]],["title/injectables/UserNotificationService.html",[17,0.905,4691,3.48]],["body/injectables/UserNotificationService.html",[3,0.03,4,0.03,5,0.03,10,0.151,13,1.09,14,0.378,15,0.005,16,0.076,17,1.081,19,0.56,20,2.404,21,3.775,22,0.904,23,1.644,24,1.201,25,1.384,26,1.462,28,3.004,59,0.034,60,0.142,62,1.662,64,1.263,65,1.603,67,3.294,68,2.261,69,2.779,71,1.659,72,2.101,82,2.466,83,1.813,85,1.948,102,2.229,118,3.205,119,2.316,121,1.683,122,2.342,124,3.884,143,2.012,213,2.754,238,0.003,239,0.003,289,1.24,293,0.408,295,1.772,296,0.905,297,0.796,299,1.834,406,3.134,412,2.976,413,3.28,577,3.425,606,2.662,644,4.969,682,0.863,685,4.416,740,5.616,799,2.587,822,1.33,876,4.576,1014,2.039,1015,1.13,1020,2.858,1093,2.257,1172,2.858,1173,2.579,1174,2.504,1641,2.435,1734,2.754,1868,2.867,2343,3.488,2403,3.767,2404,7.079,2405,7.079,2406,3.767,2407,3.488,2414,2.976,2425,6.165,2428,3.767,3156,4.153,4519,5.466,4545,2.662,4691,4.153,4695,7.079,4798,7.265,4882,8.294,5399,4.189,5400,6.089,5401,6.089,5402,6.089,5403,6.089,5404,6.089,5405,4.189,5406,4.189,5407,6.089,5408,6.089,5409,4.189,5410,6.089,5411,4.189,5412,6.089,5413,4.189,5414,6.089,5415,4.189,5416,4.189,5417,4.189,5418,5.474,5419,4.189,5420,6.089,5421,4.189,5422,6.089,5423,4.189,5424,4.189,5425,4.189,5426,4.189,5427,3.767,5428,4.189,5429,4.189,5430,4.189,5431,4.189,5432,4.189,5433,4.189,5434,4.189,5435,4.189,5436,4.189,5437,4.189,5438,4.189,5439,4.189,5440,4.189,5441,7.172,5442,7.172,5443,4.189,5444,7.873,5445,4.189,5446,4.189,5447,4.189,5448,4.189,5449,4.189]],["title/classes/UserOnboardingDto.html",[60,0.173,604,4.248]],["body/classes/UserOnboardingDto.html",[3,0.05,4,0.05,5,0.05,10,0.247,11,1.178,14,0.394,15,0.004,16,0.069,59,0.056,60,0.288,76,1.218,207,1.597,238,0.004,239,0.004,293,0.375,455,3.335,534,1.724,538,0.89,539,3.235,542,1.897,545,3.36,546,0.929,547,3.235,548,2.045,549,1.067,604,7.075,626,7.364,688,2.858,715,7.037,984,4.578,986,4.57,1975,4.365,2365,5.106,2782,7.548,4515,5.719,4517,5.378,5450,9.226,5451,6.869,5452,6.869,5453,6.869,5454,6.869]],["title/injectables/UserOrganizationService.html",[17,0.905,4641,3.792]],["body/injectables/UserOrganizationService.html",[3,0.044,4,0.044,5,0.044,10,0.221,13,0.904,14,0.309,15,0.005,16,0.081,17,1.403,19,0.818,20,2.824,21,4.606,22,1.321,23,2.404,24,1.756,25,2.023,26,2.137,28,3.022,59,0.049,60,0.207,62,2.158,64,1.847,65,1.612,67,3.868,68,2.266,69,3.608,71,1.503,72,1.803,82,3.201,83,2.65,102,2.106,118,4.16,119,2.536,121,1.692,122,2.056,124,4.561,207,1.151,238,0.003,239,0.003,289,1.61,293,0.387,295,1.555,296,0.794,297,0.699,299,1.61,416,4.351,417,4.795,577,3.097,799,1.895,822,1.944,1014,2.646,1015,1.652,1020,4.177,1093,3.299,1172,4.177,1173,3.77,1174,3.66,1641,3.559,2435,5.506,3156,5.391,4519,5.373,4641,5.875,5418,7.106,5427,5.506,5455,6.124,5456,6.124,5457,6.124,5458,7.903,5459,6.124,5460,6.124,5461,6.124,5462,6.124,5463,6.124,5464,6.124,5465,6.124]],["title/controllers/UserRecommendationController.html",[551,1.194,5383,4.248]],["body/controllers/UserRecommendationController.html",[3,0.041,4,0.041,5,0.041,10,0.203,13,0.989,14,0.349,15,0.005,16,0.081,19,0.752,59,0.045,60,0.191,65,1.482,68,1.77,71,1.422,72,1.973,119,2.491,122,1.464,202,3.683,207,1.682,238,0.003,239,0.003,289,1.523,293,0.33,295,1.472,296,0.751,297,0.661,299,1.523,334,3.833,335,2.962,528,1.992,538,0.783,546,0.761,551,1.317,553,1.555,555,2.079,568,3.167,570,4.709,577,3.296,626,4.183,636,2.522,637,3.833,640,3.401,641,3.149,642,2.079,644,4.634,662,2.394,668,1.964,670,3.413,671,2.804,740,4.406,799,2.313,802,2.617,810,2.02,944,5.1,1014,1.884,1015,1.518,1240,3.077,1241,2.617,1242,2.668,1243,2.617,1244,2.668,2477,4.685,2560,6.103,2942,2.962,3727,4.752,3728,3.699,3766,5.1,4519,4.88,4545,3.575,4550,3.575,5383,6.225,5466,5.627,5467,5.627,5468,8.947,5469,8.947,5470,5.627,5471,5.627,5472,8.947,5473,5.627,5474,7.477,5475,5.627,5476,5.627,5477,5.627,5478,5.627,5479,5.627,5480,5.627,5481,5.627,5482,5.627,5483,5.627,5484,5.627,5485,5.627,5486,5.627,5487,5.627,5488,5.627]],["title/classes/UserRepoOptionsDto.html",[60,0.173,5489,3.624]],["body/classes/UserRepoOptionsDto.html",[3,0.05,4,0.05,5,0.05,6,3.453,10,0.249,11,1.182,13,0.881,14,0.377,15,0.004,16,0.075,59,0.069,60,0.313,202,3.51,207,1.299,234,3.721,238,0.004,239,0.004,293,0.305,340,5.418,341,4.907,455,3.63,528,2.465,534,1.734,538,0.723,539,2.629,542,1.821,545,3.369,546,0.934,548,2.057,549,1.071,607,7.1,768,1.909,773,4.123,780,5.605,899,3.91,985,7.242,986,4.579,987,1.995,1131,3.69,1626,3.721,2909,5.249,4081,6.677,4086,5.409,4095,6.677,4515,5.752,5489,6.057,5490,6.211,5491,6.908,5492,6.211]],["title/classes/UserRepoOptionsDto-1.html",[60,0.144,186,1.568,5489,3.014]],["body/classes/UserRepoOptionsDto-1.html",[3,0.044,4,0.044,5,0.044,6,2.485,10,0.221,11,1.096,13,0.989,14,0.399,15,0.004,16,0.05,59,0.05,60,0.208,78,3.688,93,2.84,100,3.105,117,2.381,119,2.537,140,2.853,142,3.936,186,3.419,238,0.003,239,0.003,293,0.423,297,0.91,528,2.744,534,1.54,538,1.002,768,1.695,842,2.75,896,1.737,959,2.853,1014,2.054,1015,1.655,1066,2.579,1069,3.68,1070,2.8,1078,5.158,1098,3.472,1100,4.366,1101,4.164,1103,3.645,1105,3.305,1106,3.305,1110,3.158,1111,4.072,1112,3.09,1113,3.305,1114,3.565,1115,4.411,1116,3.158,1117,3.386,1118,3.472,1119,3.158,1120,3.472,1121,3.547,1122,3.229,1123,3.386,1124,3.386,1125,4.072,1126,3.472,1127,3.158,1128,3.472,4095,4.803,5489,5.62]],["title/modules/UserReposModule.html",[240,1.281,284,3.624]],["body/modules/UserReposModule.html",[3,0.051,4,0.051,5,0.051,6,2.857,15,0.004,16,0.081,19,0.942,24,2.023,59,0.057,60,0.239,64,2.127,207,1.624,238,0.004,239,0.004,240,2.168,241,6.071,242,2.606,243,3.338,248,3.338,249,2.685,250,2.645,253,3.498,254,3.614,284,7.434,288,3.555,303,3.22,350,3.48,372,5.243,374,5.243,2679,4.811,2680,4.811,5493,6.342,5494,7.054,5495,6.342,5496,6.342,5497,8.319,5498,7.054,5499,7.054,5500,7.054]],["title/injectables/UserReposService.html",[17,0.905,5497,3.995]],["body/injectables/UserReposService.html",[3,0.038,4,0.038,5,0.038,6,3.816,10,0.192,13,0.973,14,0.342,15,0.005,16,0.079,17,1.279,18,3.351,19,0.712,20,2.672,21,4.298,22,1.149,23,2.09,24,1.527,25,1.759,26,1.858,59,0.043,60,0.18,62,1.967,64,1.606,65,1.897,67,3.661,68,2.164,69,3.289,71,1.664,72,2.047,76,0.963,77,2.778,82,3.307,83,2.305,102,1.419,119,1.809,122,1.385,192,2.387,207,1.001,234,2.869,238,0.003,239,0.003,247,5.191,289,1.468,293,0.404,295,1.722,296,0.879,297,0.773,299,1.782,350,2.627,372,7.005,374,5.356,577,3.41,664,4.788,682,1.683,768,2.418,799,1.647,814,2.027,822,1.691,1015,1.436,1016,3.278,1021,3.278,1022,4.17,1023,4.114,1024,2.627,1408,5.968,1410,3.632,1411,4.434,1414,3.278,1868,1.939,2687,4.436,2705,4.436,3139,4.434,3140,4.788,3156,4.915,3168,5.356,5489,6.216,5497,5.642,5501,5.325,5502,7.205,5503,5.325,5504,5.325,5505,7.205,5506,7.205,5507,5.325,5508,5.325,5509,5.325,5510,5.325,5511,5.325,5512,7.205,5513,5.325,5514,5.325,5515,5.325,5516,5.325]],["title/modules/VoteModule.html",[240,1.281,285,3.792]],["body/modules/VoteModule.html",[3,0.05,4,0.05,5,0.05,15,0.005,16,0.083,19,0.923,24,1.981,59,0.056,60,0.234,64,2.083,238,0.004,239,0.004,240,2.141,242,2.553,243,3.295,248,3.295,249,2.629,250,2.59,253,3.453,254,3.568,275,6.04,285,7.752,288,3.51,303,3.153,332,4.712,334,3.153,335,3.636,340,5.418,341,4.907,553,2.356,768,1.909,1063,4.907,4061,7.702,4097,7.877,4098,6.211,5517,6.211,5518,6.908,5519,6.211,5520,6.211,5521,6.908,5522,6.908]],["title/injectables/VoteService.html",[17,0.905,4097,3.792]],["body/injectables/VoteService.html",[3,0.036,4,0.036,5,0.036,10,0.179,13,1.094,14,0.349,15,0.005,16,0.069,17,1.221,18,2.316,19,0.665,20,2.598,22,1.074,23,1.954,24,1.428,59,0.04,60,0.169,62,1.879,64,1.501,65,2.24,67,3.559,68,2.113,69,3.141,71,1.834,72,2.081,77,2.701,80,6.222,82,2.787,83,2.155,102,2.101,122,2.323,192,2.232,234,3.707,238,0.003,239,0.003,289,1.402,293,0.408,295,1.757,296,0.897,297,0.789,299,1.819,340,3.163,341,3.537,455,1.954,472,2.214,577,3.688,768,1.902,799,2.129,814,3.002,822,1.581,899,4.463,1024,2.456,1868,1.813,2184,4.145,3953,3.999,3954,3.537,4067,6.187,4081,6.991,4083,6.187,4097,5.115,4128,3.163,4135,4.694,4138,3.701,5523,4.979,5524,6.881,5525,6.881,5526,6.881,5527,4.979,5528,4.979,5529,6.881,5530,4.979,5531,6.881,5532,4.979,5533,4.979,5534,6.881,5535,4.979,5536,6.881,5537,4.979,5538,4.979,5539,4.979,5540,9.792,5541,7.886,5542,7.886,5543,4.979,5544,4.979,5545,4.979,5546,4.979,5547,4.979,5548,4.979]],["title/classes/VotedRepoDto.html",[60,0.173,4086,3.995]],["body/classes/VotedRepoDto.html",[3,0.049,4,0.049,5,0.049,6,3.715,10,0.244,11,1.168,13,0.7,14,0.385,15,0.005,16,0.074,59,0.068,60,0.311,202,2.791,207,1.585,234,4.541,238,0.004,239,0.004,293,0.372,340,5.828,341,4.816,455,3.308,528,1.807,534,1.702,538,0.882,539,2.581,542,1.805,545,3.341,546,0.917,548,2.019,549,1.059,607,5.645,768,2.329,773,4.639,780,5.541,899,5.192,985,5.309,986,4.348,987,1.586,1131,3.97,1626,3.653,2909,4.174,4081,7.728,4086,6.6,4095,7.182,5489,4.816,5490,6.096,5492,6.096,5549,6.78,5550,6.78,5551,6.78]],["title/controllers/WorkspaceController.html",[551,1.194,5552,4.248]],["body/controllers/WorkspaceController.html",[3,0.036,4,0.036,5,0.036,10,0.18,13,0.954,14,0.37,15,0.005,16,0.079,19,0.666,25,1.647,26,1.74,59,0.04,60,0.169,71,1.501,72,2.018,76,1.053,77,2.187,102,1.835,119,2.377,207,1.679,238,0.003,239,0.003,289,1.403,293,0.349,295,1.553,296,0.855,297,0.698,299,1.608,393,2.991,441,4.858,528,1.328,538,0.826,546,0.674,549,1.122,551,1.166,553,1.378,555,1.842,568,3.269,570,4.862,571,4.528,573,5.087,577,3.415,580,5.12,583,4.251,600,4.377,603,3.47,635,3.398,636,2.235,637,3.886,639,3.602,640,3.196,641,3.192,642,1.842,662,2.121,668,1.74,670,3.602,671,2.959,682,1.754,795,4.862,799,2.131,801,4.381,802,2.319,803,2.319,810,1.79,1014,1.669,1015,1.345,1240,2.835,1265,5.12,1492,7.038,1496,5.872,1827,7.087,2559,3.401,2633,2.319,2914,3.541,2941,3.625,2942,2.624,3021,3.904,3042,3.904,3346,3.541,4805,4.151,5552,5.735,5553,4.985,5554,8.512,5555,8.512,5556,7.892,5557,4.985,5558,4.985,5559,4.985,5560,4.985,5561,4.985,5562,4.985,5563,4.985,5564,6.888,5565,4.985,5566,4.985,5567,4.985,5568,5.866,5569,4.482,5570,4.151,5571,4.482,5572,4.985,5573,4.985,5574,4.985,5575,4.985,5576,4.985,5577,4.985,5578,4.985]],["title/modules/WorkspaceModule.html",[240,1.281,286,3.792]],["body/modules/WorkspaceModule.html",[3,0.048,4,0.048,5,0.048,15,0.005,16,0.084,19,0.88,24,1.888,59,0.053,60,0.223,64,1.986,238,0.003,239,0.003,240,2.078,241,5.969,242,2.434,243,3.199,248,3.199,249,2.507,250,2.47,253,3.352,254,3.463,286,7.689,288,3.407,303,3.006,402,3.936,441,5.096,443,5.88,445,6.153,446,5.483,447,6.153,448,5.483,449,5.88,450,5.157,553,2.287,1504,7.436,2679,4.492,2680,4.492,5206,5.483,5552,7.537,5568,7.828,5569,5.921,5570,5.483,5579,5.921,5580,6.586,5581,5.921,5582,5.921,5583,6.586,5584,6.586]],["title/injectables/WorkspaceService.html",[17,0.905,5568,3.792]],["body/injectables/WorkspaceService.html",[3,0.034,4,0.034,5,0.034,10,0.172,13,0.941,14,0.343,15,0.005,16,0.078,17,1.187,18,3.11,19,0.638,20,2.858,21,4.061,22,1.031,23,1.875,24,1.37,25,1.579,26,1.667,59,0.039,60,0.162,62,1.826,64,2.016,65,2.031,67,3.496,68,2.297,69,3.053,71,1.733,72,2.066,76,1.074,77,2.894,82,3.124,83,2.894,102,1.273,117,1.105,119,2.288,122,2.174,186,1.766,234,2.574,238,0.003,239,0.003,247,5.041,289,1.362,293,0.403,295,1.731,296,0.916,297,0.777,299,1.792,402,2.856,441,4.117,443,3.394,549,0.6,577,3.434,674,4.396,682,1.59,799,1.478,803,2.222,814,1.819,822,1.517,1014,1.6,1015,1.289,1016,2.941,1021,2.941,1023,3.886,1024,2.357,1382,3.978,1417,2.941,1492,6.212,1503,3.552,1504,3.741,1505,3.741,1507,3.69,1868,2.435,2505,4.971,2532,4.296,2533,4.296,2687,4.117,2705,4.117,3156,4.561,3168,4.971,3920,3.978,4240,3.552,4773,4.296,5568,4.971,5570,3.978,5571,4.296,5585,4.778,5586,6.687,5587,6.687,5588,4.778,5589,7.715,5590,4.778,5591,6.687,5592,4.778,5593,6.687,5594,4.778,5595,4.778,5596,6.687,5597,4.778,5598,4.778,5599,4.778,5600,4.778,5601,4.778,5602,4.778,5603,4.778,5604,4.778,5605,4.778,5606,4.778,5607,4.778,5608,4.778,5609,4.778,5610,4.778,5611,6.687,5612,4.778,5613,4.778,5614,4.778,5615,4.778,5616,4.778,5617,6.687,5618,6.687,5619,4.778,5620,4.778,5621,4.778,5622,4.778,5623,4.778,5624,4.778]],["title/miscellaneous/enumerations.html",[5625,2.789,5626,5.525]],["body/miscellaneous/enumerations.html",[6,2.044,10,0.182,15,0.005,31,3.059,33,5.439,34,5.164,37,5.678,102,1.851,181,5.164,202,2.859,238,0.003,239,0.003,296,0.698,393,2.66,411,3.932,422,2.605,678,3.427,679,3.816,904,2.223,983,4.152,1070,3.425,1075,4.566,1097,4.538,1098,5.625,1102,5.784,1103,4.142,1107,5.164,1115,3.499,1133,5.164,1134,5.784,1184,3.834,1186,4.738,1247,3.443,1266,6.893,1298,4.538,1299,6.246,1301,5.784,1503,5.164,1507,3.834,1641,4.037,1733,4.566,1790,4.202,1863,5.784,1945,5.784,1953,5.784,1975,4.414,2038,5.164,2248,3.207,2425,5.439,2430,6.246,2455,4.738,2503,3.752,2530,6.246,2531,6.246,2587,5.784,2748,6.613,2772,4.566,2789,4.414,3098,4.202,3104,5.784,3105,5.784,3106,5.784,3107,5.784,3108,5.784,3598,6.246,3604,6.246,3808,3.952,3823,6.246,3824,5.439,3825,6.246,3826,6.246,3827,5.784,3828,5.784,3829,5.784,3830,5.784,3831,5.784,5207,4.538,5212,6.246,5625,3.318,5626,4.538,5627,5.047,5628,5.047,5629,5.047,5630,6.946,5631,6.946,5632,5.047,5633,6.946,5634,6.946,5635,4.538,5636,6.246,5637,5.047,5638,5.047,5639,4.538,5640,5.047,5641,4.538]],["title/miscellaneous/functions.html",[5625,2.789,5642,5.525]],["body/miscellaneous/functions.html",[10,0.299,15,0.004,238,0.004,239,0.004,5625,5.454,5642,7.459,5643,9.997,5644,8.297,5645,8.297]],["title/index.html",[10,0.153,5646,3.815,5647,3.533]],["body/index.html",[4,0.029,5,0.042,15,0.004,20,1.787,85,1.845,100,1.557,102,2.044,108,2.818,110,2.818,117,1.353,148,2.443,186,2.162,189,2.818,196,2.577,197,2.137,201,3.304,238,0.002,239,0.002,250,2.194,296,0.399,393,1.959,422,3.21,463,5.442,469,6.406,476,6.898,525,3.304,526,4.937,541,3.501,574,3.567,600,3.718,643,6.08,668,2.426,698,1.957,768,1.096,775,3.991,791,3.718,839,2.608,850,3.107,913,2.949,915,2.443,959,2.721,972,4.349,1087,2.521,1184,2.19,1200,3.991,1234,4.349,1400,3.107,1449,5.811,1464,2.306,1482,4.585,1691,3.304,1703,3.107,1734,3.846,1750,6.007,1755,3.567,1757,5.261,1782,2.949,1783,5.442,1853,2.371,1861,2.608,1962,2.949,1973,3.107,2260,7.696,2455,2.706,2751,2.818,2810,2.949,2909,3.602,2979,5.703,4017,3.107,4193,3.567,4233,3.304,4240,5.703,4344,6.702,4427,3.567,4469,3.567,4472,3.567,4517,3.107,4717,6.081,4776,6.249,5648,3.968,5649,7.672,5650,3.968,5651,5.261,5652,3.968,5653,3.968,5654,10.067,5655,6.951,5656,3.567,5657,3.968,5658,3.968,5659,7.696,5660,3.968,5661,3.968,5662,3.968,5663,3.968,5664,6.951,5665,5.851,5666,5.851,5667,6.951,5668,3.968,5669,3.968,5670,5.851,5671,4.872,5672,5.851,5673,5.851,5674,3.567,5675,3.567,5676,5.851,5677,3.968,5678,3.968,5679,3.968,5680,3.968,5681,3.968,5682,3.968,5683,3.968,5684,3.968,5685,3.968,5686,3.968,5687,3.968,5688,3.968,5689,9.778,5690,8.56,5691,3.968,5692,3.968,5693,3.968,5694,6.898,5695,3.968,5696,3.968,5697,3.968,5698,3.968,5699,3.968,5700,7.672,5701,5.851,5702,5.851,5703,5.851,5704,5.851,5705,5.851,5706,3.968,5707,3.968,5708,3.968,5709,3.968,5710,3.968,5711,3.968,5712,3.968,5713,3.968,5714,3.968,5715,3.968,5716,6.951,5717,8.56,5718,3.968,5719,3.968,5720,3.968,5721,3.567,5722,8.852,5723,5.851,5724,3.968,5725,5.851,5726,3.968,5727,3.968,5728,5.851,5729,6.951,5730,3.968,5731,3.968,5732,3.968,5733,3.968,5734,3.968,5735,3.567,5736,3.968,5737,3.567,5738,3.968,5739,3.968,5740,3.968,5741,3.968,5742,5.851,5743,3.968,5744,5.851,5745,3.968,5746,9.433,5747,3.968,5748,3.567,5749,3.567,5750,3.567,5751,3.968,5752,5.851,5753,3.968,5754,7.672,5755,3.968,5756,3.968,5757,5.851,5758,3.968,5759,3.968,5760,3.968,5761,3.968,5762,3.968,5763,3.968,5764,3.968,5765,3.968,5766,3.968,5767,3.968,5768,5.851,5769,3.968,5770,3.968,5771,5.261,5772,3.968,5773,3.968,5774,3.968,5775,3.968,5776,3.968,5777,3.968,5778,3.968,5779,3.968,5780,5.851,5781,3.968,5782,5.851,5783,3.968,5784,6.249,5785,3.968,5786,3.968,5787,3.567,5788,5.851,5789,3.968,5790,3.968,5791,3.968,5792,3.968,5793,3.968,5794,3.968,5795,3.968,5796,3.968,5797,3.968,5798,3.968,5799,5.261,5800,3.968,5801,3.968,5802,3.968,5803,3.968,5804,3.567,5805,3.968,5806,7.672,5807,3.968,5808,3.968,5809,3.968,5810,5.851,5811,3.968,5812,5.851,5813,5.851,5814,3.968,5815,5.851,5816,3.968,5817,3.567,5818,3.968,5819,3.968,5820,3.968,5821,3.968,5822,3.968,5823,3.968,5824,3.968,5825,3.968,5826,3.968,5827,3.567,5828,3.968,5829,3.304,5830,3.968,5831,3.968,5832,3.968,5833,3.968,5834,3.968,5835,3.567,5836,3.968,5837,3.968,5838,3.968,5839,3.968,5840,3.968,5841,3.968,5842,3.968,5843,5.851,5844,3.968,5845,3.968,5846,3.968,5847,3.968,5848,3.968,5849,2.949,5850,3.107]],["title/license.html",[5646,3.815,5647,3.533,5849,3.154]],["body/license.html",[15,0.004,238,0.004,239,0.004,250,2.61,422,2.61,841,6.258,915,4.285,1459,4.422,1482,4.16,1695,3.642,1702,5.174,1729,4.944,1973,5.45,2076,5.795,2281,5.795,2465,5.795,2979,6.368,2986,6.258,3333,6.258,4430,6.258,4717,5.174,5656,9.388,5748,7.702,5817,7.702,5829,5.795,5849,5.174,5850,5.45,5851,9.281,5852,6.96,5853,8.567,5854,6.96,5855,6.96,5856,6.96,5857,6.96,5858,6.96,5859,6.96,5860,6.96,5861,6.96,5862,6.96,5863,6.96,5864,6.96,5865,6.96,5866,6.96,5867,6.96,5868,8.567,5869,6.96,5870,6.96,5871,6.96,5872,6.96,5873,6.96,5874,6.96,5875,8.567,5876,8.567,5877,6.96,5878,6.96,5879,6.96,5880,6.96,5881,6.96,5882,6.96,5883,6.96,5884,6.96,5885,6.96,5886,6.96,5887,6.96,5888,6.96,5889,6.96,5890,6.96,5891,6.96,5892,6.96,5893,6.96,5894,6.96,5895,6.96,5896,6.96,5897,6.96,5898,6.96,5899,6.96,5900,6.96]],["title/modules.html",[242,2.586]],["body/modules.html",[15,0.003,238,0.003,239,0.003,241,3.66,242,2.263,256,4.795,259,4.351,260,4.553,261,4.553,262,4.553,263,4.351,264,4.177,265,4.553,266,4.553,267,4.553,268,4.553,269,4.553,270,4.553,271,4.553,272,4.026,273,4.351,274,4.177,275,3.66,276,4.553,277,4.553,278,4.351,279,4.553,280,4.553,281,4.351,282,4.553,283,3.66,284,4.351,285,4.553,286,4.553,756,4.351,3587,4.351,4409,4.553,5901,10.86,5902,10.86,5903,10.86,5904,10.868,5905,5.506,5906,5.506]],["title/overview.html",[5907,5.827]],["body/overview.html",[2,1.966,15,0.005,61,5.424,121,0.731,186,0.977,238,0.002,239,0.002,241,5.251,242,0.977,243,1.652,244,2.378,245,2.378,246,2.378,247,4.113,248,1.652,249,1.007,250,0.992,256,8.263,257,2.378,258,2.378,259,6.817,260,5.908,261,5.908,262,5.041,263,5.424,264,5.421,265,5.041,266,6.531,267,3.999,268,5.041,269,6.964,270,5.908,271,5.908,272,5.396,273,6.517,274,6.732,275,5.415,276,5.908,277,5.908,278,5.424,279,6.531,280,5.908,281,5.424,282,6.639,283,6.194,284,5.831,285,5.908,286,5.908,534,0.664,553,0.731,644,4.214,646,5.424,648,5.424,656,5.676,662,3.248,752,2.378,753,2.378,754,2.378,755,2.378,756,5.424,757,5.978,806,5.676,815,2.378,816,2.378,817,2.378,822,0.84,827,4.563,919,3.999,947,3.999,974,3.999,1001,5.676,1033,5.676,1053,2.378,1055,2.378,1056,2.378,1057,5.676,1245,5.019,1306,2.378,1307,2.378,1308,2.378,1508,5.978,1519,3.999,1543,2.378,1544,2.378,1545,2.378,1981,2.202,2565,3.999,2573,2.378,2574,2.378,2634,5.75,2674,2.378,2676,2.378,2677,2.378,2729,2.378,2943,5.208,3032,5.208,3051,3.821,3109,5.676,3114,5.208,3142,2.378,3143,2.378,3144,2.378,3219,5.676,3224,2.378,3225,2.378,3226,2.378,3238,2.378,3239,2.378,3240,2.378,3261,2.378,3262,2.378,3263,2.378,3386,2.378,3388,2.378,3389,2.378,3444,3.999,3445,5.676,3469,3.999,3486,5.676,3527,5.224,3583,2.378,3584,2.378,3585,2.378,3586,2.378,3587,5.424,3727,4.772,3771,2.378,3772,2.378,3773,2.378,3814,2.378,3815,2.378,3817,2.378,3974,5.676,4013,5.676,4051,5.676,4097,5.676,4111,2.378,4113,2.378,4114,2.378,4140,2.378,4141,2.378,4143,2.378,4166,2.378,4167,2.378,4168,2.378,4200,2.378,4201,2.378,4202,2.378,4203,5.676,4218,2.378,4219,2.378,4221,4.837,4305,2.378,4306,2.378,4308,2.378,4409,5.393,4410,2.378,4411,2.378,4412,2.378,4413,5.978,4437,2.378,4438,2.378,4439,2.378,4546,3.999,4641,5.676,4683,5.208,4691,3.669,5149,5.676,5197,2.378,5198,2.378,5199,2.378,5377,2.378,5379,2.378,5380,2.378,5493,2.378,5495,2.378,5496,2.378,5497,5.978,5517,2.378,5519,2.378,5520,2.378,5568,5.676,5579,2.378,5581,2.378,5582,2.378,5907,2.202,5908,2.645,5909,2.645,5910,2.645,5911,2.645,5912,2.645]],["title/properties.html",[11,0.852,5913,4.243]],["body/properties.html",[11,1.059,15,0.004,20,2.333,238,0.004,239,0.004,312,5.68,422,3.399,549,0.96,643,5.428,770,6.737,997,4.855,1482,5.417,1722,6.362,1750,5.983,2688,5.212,4634,6.87,5674,6.87,5849,5.68,5850,5.983,5905,6.87,5914,7.641,5915,7.641,5916,7.641,5917,7.641,5918,7.641,5919,7.641,5920,6.87,5921,7.641,5922,7.641,5923,7.641,5924,7.641,5925,7.641,5926,7.641,5927,7.641,5928,7.641,5929,7.641,5930,7.641,5931,7.641]],["title/miscellaneous/typealiases.html",[5625,2.789,5932,6.145]],["body/miscellaneous/typealiases.html",[10,0.299,14,0.324,15,0.004,238,0.004,239,0.004,5625,5.454,5933,8.297,5934,9.509,5935,7.459,5936,7.459]],["title/miscellaneous/variables.html",[5625,2.789,5671,5.117]],["body/miscellaneous/variables.html",[3,0.019,8,1.278,10,0.095,11,0.366,13,0.638,14,0.167,15,0.005,68,1.995,71,1.022,72,0.545,74,2.358,76,0.9,93,0.949,102,2.034,117,2.234,122,1.399,143,1.411,148,1.627,197,3.652,207,1.161,238,0.002,239,0.002,249,1.006,321,3.841,322,3.841,323,3.841,324,3.841,325,3.841,326,3.841,327,3.841,328,3.841,329,3.841,330,3.841,393,2.822,422,0.991,455,1.677,461,5.308,463,5.308,465,2.896,467,5.552,469,4.21,472,1.374,474,1.803,480,3.841,520,2.808,521,3.557,523,1.965,526,4.816,541,2.152,549,0.675,556,1.965,577,1.512,583,1.424,600,1.679,608,5.419,609,1.278,640,1.07,689,2.376,698,1.304,745,2.069,799,1.322,839,1.737,842,1.185,849,4.624,850,2.069,864,3.741,885,1.965,887,2.201,891,1.663,896,2.054,899,4.105,915,3.802,959,1.229,964,2.152,984,1.424,1000,1.965,1069,3.153,1075,1.737,1082,2.201,1085,3.557,1087,3.924,1103,3.677,1152,2.808,1200,2.914,1209,3.535,1241,1.987,1243,1.987,1268,1.106,1390,3.557,1400,2.069,1449,1.877,1460,2.069,1482,2.553,1513,2.376,1593,0.949,1734,1.737,1750,6.221,1864,1.965,1932,2.376,2020,3.557,2209,2.914,2248,1.679,2285,2.376,2422,2.376,2425,3.345,2455,1.803,2465,4.477,2563,1.36,2622,2.201,2737,3.841,2765,2.069,2782,2.069,2810,1.965,2842,3.841,2869,2.376,2909,2.63,2979,1.965,2987,3.841,2990,2.376,3049,1.803,4222,3.557,4225,2.376,4226,3.841,4237,3.841,4239,3.841,4240,1.965,4241,2.376,4242,2.376,4243,2.376,4244,2.376,4288,2.376,4344,2.069,4377,2.201,4530,3.841,5625,1.737,5635,2.376,5636,3.841,5639,2.376,5641,2.376,5647,2.201,5651,3.841,5659,2.376,5671,2.201,5675,2.376,5694,2.376,5721,4.834,5735,3.841,5737,2.376,5749,3.841,5750,2.376,5771,2.376,5784,3.841,5787,2.376,5799,4.834,5804,2.376,5827,2.376,5829,2.201,5835,2.376,5849,1.965,5850,2.069,5906,2.376,5907,2.201,5920,2.376,5935,3.841,5936,2.376,5937,2.643,5938,2.643,5939,4.272,5940,2.643,5941,4.272,5942,4.272,5943,4.272,5944,4.272,5945,2.643,5946,4.272,5947,4.272,5948,2.643,5949,4.272,5950,5.377,5951,2.643,5952,2.643,5953,2.643,5954,2.643,5955,2.643,5956,2.643,5957,4.272,5958,2.643,5959,2.643,5960,2.643,5961,2.643,5962,2.643,5963,2.643,5964,2.643,5965,4.272,5966,2.643,5967,2.643,5968,4.272,5969,2.643,5970,2.643,5971,2.643,5972,2.643,5973,2.643,5974,2.643,5975,2.643,5976,7.633,5977,2.643,5978,2.643,5979,2.643,5980,2.643,5981,2.643,5982,2.643,5983,2.643,5984,2.643,5985,2.643,5986,2.643,5987,2.643,5988,2.643,5989,2.643,5990,2.643,5991,6.175,5992,2.643,5993,2.643,5994,2.643,5995,2.643,5996,2.643,5997,2.643,5998,4.272,5999,5.377,6000,2.643,6001,2.643,6002,5.377,6003,2.643,6004,2.643,6005,4.272,6006,2.643,6007,4.272,6008,2.643,6009,4.272,6010,5.377,6011,2.643,6012,2.643,6013,4.272,6014,2.643,6015,2.643,6016,2.643,6017,2.643,6018,2.643,6019,2.643,6020,2.643,6021,2.643,6022,2.643,6023,2.643,6024,2.643,6025,2.643,6026,2.643,6027,2.643,6028,2.643,6029,2.643,6030,2.643,6031,2.643,6032,2.643,6033,2.643,6034,2.643,6035,2.643,6036,2.643,6037,2.643,6038,2.643,6039,2.643,6040,2.643,6041,2.643,6042,2.643,6043,2.643,6044,4.272,6045,2.643,6046,2.643,6047,2.643,6048,2.643,6049,2.643,6050,2.643,6051,2.643,6052,2.643,6053,4.272,6054,2.643,6055,2.643,6056,2.643,6057,2.643,6058,2.643,6059,2.643,6060,2.643,6061,2.643,6062,2.643,6063,2.643,6064,2.643,6065,2.643,6066,2.643,6067,2.643,6068,2.643,6069,2.643,6070,2.643,6071,2.643,6072,2.643,6073,2.643,6074,2.643,6075,2.643,6076,2.643,6077,2.643,6078,2.643,6079,2.643,6080,2.643,6081,2.643,6082,2.643,6083,2.643,6084,4.272,6085,4.272,6086,2.643,6087,2.643,6088,2.643,6089,2.643,6090,5.377,6091,2.643,6092,2.643,6093,2.643,6094,2.643,6095,2.643,6096,2.643,6097,4.272,6098,2.643,6099,2.643,6100,4.272,6101,2.643,6102,2.643,6103,2.643,6104,2.643,6105,2.643,6106,2.643,6107,2.643,6108,2.643,6109,4.272,6110,2.643,6111,2.643,6112,2.643,6113,2.643,6114,2.643,6115,2.643,6116,2.643,6117,2.643,6118,2.643,6119,2.643,6120,2.643,6121,2.643,6122,2.643,6123,2.643,6124,2.643,6125,2.643,6126,2.643,6127,2.643,6128,2.643,6129,2.643,6130,2.643,6131,2.643,6132,2.643,6133,2.643,6134,2.643,6135,2.643,6136,2.643,6137,2.643,6138,6.175,6139,2.643,6140,2.643,6141,4.272,6142,2.643,6143,2.643,6144,2.643,6145,2.643,6146,4.272,6147,6.779,6148,2.643,6149,4.272,6150,4.272,6151,4.272,6152,2.643,6153,2.643,6154,6.175,6155,2.643,6156,2.643,6157,2.643,6158,2.643,6159,2.643,6160,4.272,6161,2.643,6162,2.643,6163,5.377,6164,5.377,6165,4.272,6166,4.272,6167,2.643,6168,4.272,6169,2.643,6170,2.643,6171,4.272,6172,4.272,6173,4.272,6174,2.643,6175,2.643,6176,2.643,6177,2.643,6178,2.643,6179,2.643,6180,2.643,6181,2.643,6182,2.643,6183,2.643,6184,5.377,6185,2.643,6186,2.643,6187,2.643,6188,2.643,6189,2.643,6190,2.643,6191,2.643,6192,2.643,6193,2.643,6194,2.643,6195,2.643,6196,2.643,6197,2.643,6198,2.643,6199,2.643,6200,2.643,6201,2.643,6202,2.643,6203,2.643,6204,2.643,6205,2.643,6206,2.643,6207,6.175,6208,2.643,6209,2.643,6210,2.643,6211,2.643,6212,2.643,6213,2.643,6214,2.643,6215,2.643,6216,2.643,6217,2.643,6218,2.643,6219,2.643,6220,2.643,6221,2.643,6222,2.643,6223,2.643,6224,2.643,6225,2.643,6226,2.643,6227,2.643,6228,2.643,6229,2.643,6230,4.272,6231,4.272,6232,2.643,6233,2.643]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":93,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/variables.html":{}}}],["0)::integer",{"_index":1183,"title":{},"body":{"injectables/ContributionService.html":{}}}],["0.0.0.0",{"_index":5968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["01",{"_index":1460,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":6228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["04",{"_index":1884,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["08",{"_index":1710,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["0e8a16",{"_index":2000,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1",{"_index":186,"title":{"entities/DbUserListContributorStat-1.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/WorkspaceService.html":{},"index.html":{},"overview.html":{}}}],["1.59.0",{"_index":5914,"title":{},"body":{"properties.html":{}}}],["10",{"_index":896,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1075,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1788,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":1112,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["1000).toisostring",{"_index":6101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10000",{"_index":6013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1045024650",{"_index":1990,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["11",{"_index":4184,"title":{},"body":{"injectables/StripeService.html":{}}}],["12237133",{"_index":1700,"title":{},"body":{"entities/DbContribution.html":{}}}],["123",{"_index":2501,"title":{},"body":{"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["123'})@column",{"_index":2515,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["123'})@primarycolumn()@primarygeneratedcolumn",{"_index":2483,"title":{},"body":{"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["12345",{"_index":1225,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{}}}],["12345678",{"_index":1629,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["123456789",{"_index":2108,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["133",{"_index":2431,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["133'})@column({type",{"_index":2417,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["13:24:51.000000",{"_index":1484,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1704,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1694,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1764,"title":{},"body":{"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1854,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":1462,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["15",{"_index":1686,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{}}}],["19",{"_index":1461,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["196",{"_index":2137,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1})@column({type",{"_index":2229,"title":{},"body":{"entities/DbSubscription.html":{}}}],["2",{"_index":189,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["2.build",{"_index":5715,"title":{},"body":{"index.html":{}}}],["20",{"_index":1810,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{}}}],["200",{"_index":5975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200\\`](https://developer.mozilla.org/en",{"_index":6180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":1693,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["201\\`](https://developer.mozilla.org/en",{"_index":6185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":3361,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["2022",{"_index":1709,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/StripeService.html":{}}}],["2023",{"_index":1459,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"license.html":{}}}],["204\\`](https://developer.mozilla.org/en",{"_index":6189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22:04:29.000000",{"_index":1721,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1978,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1983,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1712,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["234343",{"_index":3813,"title":{},"body":{"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["234343})@isnumber",{"_index":3811,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@type(undefined)@isnumber",{"_index":4446,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["237133",{"_index":1773,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column('bigint",{"_index":2449,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1768,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserRepo.html":{}}}],["24",{"_index":6099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1851,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{}}}],["250",{"_index":1367,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":5735,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":5730,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1354,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":1619,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{}}}],["26t23:55:49.204z",{"_index":1741,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["28",{"_index":1711,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["287",{"_index":1919,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["3.5",{"_index":6114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":5727,"title":{},"body":{"index.html":{}}}],["30",{"_index":142,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["3000",{"_index":5979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":5750,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["31333",{"_index":1804,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31st",{"_index":3559,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["32",{"_index":2418,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["33",{"_index":5908,"title":{},"body":{"overview.html":{}}}],["36",{"_index":5909,"title":{},"body":{"overview.html":{}}}],["365",{"_index":5710,"title":{},"body":{"index.html":{}}}],["4",{"_index":1981,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"overview.html":{}}}],["400",{"_index":2998,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["400\\`](https://developer.mozilla.org/en",{"_index":6196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401\\`](https://developer.mozilla.org/en",{"_index":6203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403\\`](https://developer.mozilla.org/en",{"_index":6208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404\\`](https://developer.mozilla.org/en",{"_index":6211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["42211",{"_index":991,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":2236,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":1383,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":5492,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["429",{"_index":6159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["429\\`](https://developer.mozilla.org/en",{"_index":6214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["43311",{"_index":2410,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["44",{"_index":5910,"title":{},"body":{"overview.html":{}}}],["4456742596",{"_index":1996,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["47",{"_index":5911,"title":{},"body":{"overview.html":{}}}],["498",{"_index":1774,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1770,"title":{},"body":{"entities/DbCustomer.html":{}}}],["5",{"_index":1975,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":5453,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":4489,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":1110,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["500",{"_index":1808,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["5000",{"_index":6153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5432",{"_index":5737,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5736810",{"_index":1397,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":1386,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["57568598",{"_index":1662,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443",{"_index":1032,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@column({type",{"_index":1670,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@isstring",{"_index":1030,"title":{},"body":{"classes/CommitsDto.html":{}}}],["60",{"_index":6100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60].map(async",{"_index":3457,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["612",{"_index":2013,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["65",{"_index":5912,"title":{},"body":{"overview.html":{}}}],["7",{"_index":140,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796",{"_index":1626,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["78133",{"_index":1398,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":1388,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":1413,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1356,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["80",{"_index":6122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8080:3001",{"_index":5782,"title":{},"body":{"index.html":{}}}],["81233",{"_index":992,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["82",{"_index":128,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["86400000).toisostring",{"_index":180,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["90",{"_index":1197,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["90'])@isint()@isoptional",{"_index":1125,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["9876543",{"_index":1668,"title":{},"body":{"entities/DbCommits.html":{}}}],["_stripe",{"_index":4172,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":2603,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["abc",{"_index":2482,"title":{},"body":{"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["above",{"_index":5874,"title":{},"body":{"license.html":{}}}],["accept",{"_index":4469,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"index.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":4467,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":2254,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1918,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1914,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":4531,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1864,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":2750,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":3067,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["account",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TierService.html":{}}}],["account'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":5895,"title":{},"body":{"license.html":{}}}],["active",{"_index":37,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":2231,"title":{},"body":{"entities/DbSubscription.html":{}}}],["active_pull_requests\".\"updated_at",{"_index":3899,"title":{},"body":{"injectables/RepoService.html":{}}}],["activecount",{"_index":164,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder",{"_index":161,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.getcount",{"_index":165,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.innerjoin",{"_index":162,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["actual",{"_index":5685,"title":{},"body":{"index.html":{}}}],["add",{"_index":2909,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["addafeaturedhighlight",{"_index":2908,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addbearerauth",{"_index":6079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcustomer",{"_index":1551,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":4175,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":1557,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1962,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["addfeatured",{"_index":4863,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":4877,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":3679,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":4957,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"users.id",{"_index":3680,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addhighlightforuser",{"_index":4800,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":4782,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":4791,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":3155,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(userid",{"_index":3165,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":4783,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":5043,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":4799,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":5032,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":3054,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":4976,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":3062,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":3111,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":3117,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":6217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additions",{"_index":1940,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addlistforuser",{"_index":5078,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(@body",{"_index":5157,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(createuserlistdto",{"_index":5091,"title":{},"body":{"controllers/UserListController.html":{}}}],["addmemberforinsight",{"_index":4978,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":1167,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":1169,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":3662,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":3910,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":3917,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":3682,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["address",{"_index":6150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adds",{"_index":3966,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["addselect",{"_index":90,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"array_agg(users.login",{"_index":4954,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"coalesce(sum(pull_requests.commits",{"_index":1182,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"count(emoji_id",{"_index":4953,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(pr.id",{"_index":193,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"count(pull_requests.id)::integer",{"_index":1185,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":3091,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":3676,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":5546,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":3664,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":191,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"split_part(repos.full_name",{"_index":188,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":4718,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"user_orgs.user_id",{"_index":3931,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(\"users.id",{"_index":3677,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"users.login",{"_index":3930,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect(\"users.name",{"_index":3089,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect((qb",{"_index":3878,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":3572,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(`row_number",{"_index":3512,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["addserver(`https://${apidomain",{"_index":6065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://alpha.${apidomain",{"_index":6068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://beta.${apidomain",{"_index":6066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addusercollaboration",{"_index":4522,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":4526,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":4571,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":4685,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":4694,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":5400,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":5408,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":4864,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":4879,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":5401,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(highlightid",{"_index":5410,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":4865,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":4881,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreactionnotification",{"_index":5402,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreactionnotification(userid",{"_index":5412,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserlist",{"_index":5215,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlist(userid",{"_index":5230,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor",{"_index":5216,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor(listid",{"_index":5232,"title":{},"body":{"injectables/UserListService.html":{}}}],["addusernotification",{"_index":5403,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":5414,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":5502,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":5506,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":5809,"title":{},"body":{"index.html":{}}}],["admin",{"_index":3049,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":4497,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":5795,"title":{},"body":{"index.html":{}}}],["ai.module",{"_index":424,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":3264,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":836,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":870,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["ai.service.ts:10",{"_index":3266,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":3267,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{}}}],["alias",{"_index":3860,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":3863,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":3865,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":3864,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":3866,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_contributions",{"_index":12,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["all_prs",{"_index":1915,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allcontributionscount",{"_index":1,"title":{"interfaces/AllContributionsCount.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{}}}],["allcontributionsresult.all_contributions",{"_index":120,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["allerrs",{"_index":4770,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allerrs.push(e",{"_index":4772,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allof",{"_index":5992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow_promotion_codes",{"_index":4190,"title":{},"body":{"injectables/StripeService.html":{}}}],["allowed",{"_index":6151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha",{"_index":6069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":3953,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["alumni",{"_index":181,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["alumnicount",{"_index":174,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder",{"_index":171,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.getcount",{"_index":175,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.innerjoin",{"_index":172,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["always",{"_index":5615,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["america/los_angeles",{"_index":2244,"title":{},"body":{"classes/DbTimezone.html":{}}}],["analyze",{"_index":852,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["and/or",{"_index":5866,"title":{},"body":{"license.html":{}}}],["ands",{"_index":2607,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":3925,"title":{},"body":{"injectables/RepoService.html":{}}}],["andwhere(\"insight_members.access",{"_index":3088,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":3087,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"is_public=true",{"_index":3212,"title":{},"body":{"injectables/InsightsService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":4160,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":4132,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":4325,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":5548,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":4712,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":4715,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":4961,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":4960,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_list_contributors.list_id",{"_index":89,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":5428,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"users.timezone",{"_index":5302,"title":{},"body":{"injectables/UserListService.html":{}}}],["andwhere(`\"current_month_prs\".\"author_login",{"_index":235,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(`'${startdate}'::timestamp",{"_index":1191,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["andwhere(`(expired_at",{"_index":1327,"title":{},"body":{"injectables/CouponService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":3691,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":3924,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":3791,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":3803,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":844,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["anytime",{"_index":6089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1750,"title":{},"body":{"entities/DbContributionsProjects.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":5943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api.connection",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":5651,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":5783,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":5680,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":3351,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apibadrequestresponse",{"_index":801,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["apibearerauth",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["apibody",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["apiconfig",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":3973,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":64,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["apidomain",{"_index":6053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apidomain}](https://${apidomain",{"_index":6145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pagedto",{"_index":5990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1638,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1646,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1698,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1658,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1621,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"entities/DbWorkspace.html":{}}}],["apihideproperty()@onetoone(undefined",{"_index":1856,"title":{},"body":{"entities/DbInsight.html":{}}}],["apikey",{"_index":6109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1635,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apimodelproperty({description",{"_index":1615,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apimodelproperty({type",{"_index":2327,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["apimodelpropertyoptional",{"_index":1720,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1688,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["apinotfoundresponse",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/WorkspaceController.html":{}}}],["apiokresponse",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["apipaginatedresponse",{"_index":1241,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbbakedrepo",{"_index":3365,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommitauthors",{"_index":3374,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommits",{"_index":3381,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":3732,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":2570,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":2648,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":5041,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":5002,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":3448,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":1252,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbpullrequestgithubevents",{"_index":4650,"title":{},"body":{"controllers/UserController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":3766,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse(dbuser",{"_index":5176,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":4551,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2950,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2962,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributor",{"_index":5181,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributorstat",{"_index":5340,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["apipaginatedresponse(dbuserorganization",{"_index":4658,"title":{},"body":{"controllers/UserController.html":{}}}],["apiparam",{"_index":2941,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["apiproperty",{"_index":545,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":539,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":1206,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":1129,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":2794,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":1121,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apipropertyoptional({enum",{"_index":1105,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apipropertyoptional({isarray",{"_index":2757,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":1111,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apipropertyoptional({type",{"_index":2752,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiquery",{"_index":3726,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/UserListStatsController.html":{}}}],["apiservicesmodule",{"_index":241,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/WorkspaceModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["apitags(\"authentication",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"blog",{"_index":809,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["apitags(\"contributors",{"_index":1250,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":2569,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":2642,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":2865,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2948,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":3036,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"issue",{"_index":3221,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["apitags(\"pizza",{"_index":3357,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apitags(\"pull",{"_index":922,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":3730,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":4245,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":4550,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"workspaces",{"_index":5573,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["apitoken",{"_index":2739,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":3027,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":4998,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":4183,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":5749,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":6095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enablecors",{"_index":6058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enableversioning",{"_index":6059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.flushlogs",{"_index":6057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.uselogger(app.get(logger",{"_index":6056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":5745,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":889,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoFilterService.html":{}}}],["apply",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["applyactivecontributorsfilter",{"_index":225,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyactivecontributorsfilter(querybuilder",{"_index":5355,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter",{"_index":237,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter(querybuilder",{"_index":5357,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applycouponforuser",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(@userid",{"_index":744,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(userid",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["applydecorators",{"_index":5989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applynewcontributorsfilter",{"_index":236,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applynewcontributorsfilter(querybuilder",{"_index":5359,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applypagination",{"_index":3296,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":3297,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":3777,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":3779,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyusercoupondto",{"_index":533,"title":{"classes/ApplyUserCouponDto.html":{}},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{}}}],["applyusercoupondto.couponcode",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":256,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":2121,"title":{},"body":{"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["approved'})@column('text",{"_index":2117,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["apt",{"_index":3230,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":2030,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["arising",{"_index":5899,"title":{},"body":{"license.html":{}}}],["array",{"_index":984,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbUserHighlight.html":{},"classes/FollowManyUsersDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array(value",{"_index":2779,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":5045,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["array.isarray(value",{"_index":2778,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["asc",{"_index":2587,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":5819,"title":{},"body":{"index.html":{}}}],["assignee",{"_index":1964,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1941,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1942,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":1729,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"license.html":{}}}],["async",{"_index":72,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":762,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/supabase.guard",{"_index":802,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["auth/supabase.user.decorator",{"_index":2942,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["authcontroller",{"_index":552,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticate",{"_index":4384,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":4387,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["authentication",{"_index":6206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":4381,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":4382,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":259,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":997,"title":{},"body":{"classes/CommitAuthorDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestGithubEventsService.html":{},"properties.html":{}}}],["author.tolowercase",{"_index":3517,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["author/:id",{"_index":3384,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author/:id')@apioperation({operationid",{"_index":3343,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author_avatar",{"_index":1943,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_email",{"_index":995,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["author_login",{"_index":228,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["authorization",{"_index":886,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":3016,"title":{},"body":{"controllers/InsightController.html":{},"injectables/UserListService.html":{}}}],["authors",{"_index":3333,"title":{},"body":{"controllers/PizzaOvenController.html":{},"license.html":{}}}],["authors.service",{"_index":3354,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["authors.service.ts",{"_index":1003,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:11",{"_index":1007,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:18",{"_index":1009,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:24",{"_index":1011,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:35",{"_index":1013,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors/:id",{"_index":3369,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/:id')@apioperation({operationid",{"_index":3321,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list",{"_index":3373,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list')@apioperation({operationid",{"_index":3332,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authuser${relation",{"_index":3906,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":3907,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":3196,"title":{},"body":{"injectables/InsightsService.html":{}}}],["available",{"_index":5906,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":1965,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["average",{"_index":2764,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["avg_merge_time",{"_index":5287,"title":{},"body":{"injectables/UserListService.html":{}}}],["await",{"_index":122,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["aws:main",{"_index":2043,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["aws:main'})@column({type",{"_index":2027,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["back",{"_index":1933,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/RepoContributionsController.html":{}}}],["backend",{"_index":5918,"title":{},"body":{"properties.html":{}}}],["badrequestexception",{"_index":800,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bake",{"_index":3128,"title":{},"body":{"injectables/InsightRepoService.html":{},"controllers/PizzaOvenController.html":{}}}],["baked",{"_index":1624,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{}}}],["baked_repo",{"_index":1653,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits",{"_index":1677,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits)@joincolumn({name",{"_index":1659,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo_id",{"_index":1654,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repos",{"_index":1640,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["bakedreporepository",{"_index":3398,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakeoptionsinfo",{"_index":3350,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["bakerepodto",{"_index":764,"title":{"classes/BakeRepoDto.html":{}},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo",{"_index":3130,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.url",{"_index":3136,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.wait",{"_index":3410,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["baking",{"_index":777,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["base",{"_index":6144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":944,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserRecommendationController.html":{}}}],["baseentity",{"_index":1631,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["basefilterquerybuilder",{"_index":3837,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(startdate",{"_index":3845,"title":{},"body":{"injectables/RepoService.html":{}}}],["baselistcontributorquerybuilder",{"_index":5217,"title":{},"body":{"injectables/UserListService.html":{}}}],["basequerybuilder",{"_index":67,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["baseuserquerybuilder",{"_index":5218,"title":{},"body":{"injectables/UserListService.html":{}}}],["bdougie",{"_index":1448,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column('text",{"_index":2011,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["bdougie'})@column({type",{"_index":2128,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["bdougie'})@isstring",{"_index":1445,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2753,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bearer",{"_index":887,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":5666,"title":{},"body":{"index.html":{}}}],["being",{"_index":5757,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":5294,"title":{},"body":{"injectables/UserListService.html":{}}}],["below",{"_index":839,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["beneficial",{"_index":5758,"title":{},"body":{"index.html":{}}}],["beta",{"_index":6067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beta.api.opensauced.pizza",{"_index":5652,"title":{},"body":{"index.html":{}}}],["between",{"_index":221,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["bigint",{"_index":1664,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":4189,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":5657,"title":{},"body":{"index.html":{}}}],["bio",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["bits",{"_index":5805,"title":{},"body":{"index.html":{}}}],["block",{"_index":1123,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["blocks",{"_index":3552,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["blog",{"_index":804,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["blog'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":794,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blog_post",{"_index":1474,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["blogmarkdown",{"_index":1335,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["blogs",{"_index":785,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blogs/issue",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["blogsummarycontroller",{"_index":782,"title":{"controllers/BlogSummaryController.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{}}}],["blogsummarymodule",{"_index":260,"title":{"modules/BlogSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsummaryservice",{"_index":806,"title":{"injectables/BlogSummaryService.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"overview.html":{}}}],["blogtitle",{"_index":1336,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["body",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["body.interests",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":773,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["bootstrap",{"_index":5643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boxes",{"_index":2846,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1703,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"index.html":{}}}],["brandonroberts",{"_index":2813,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["break",{"_index":110,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["brian",{"_index":1819,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5904,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5901,"title":{},"body":{"modules.html":{}}}],["bufferlogs",{"_index":6051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":2841,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["bugs",{"_index":5927,"title":{},"body":{"properties.html":{}}}],["build",{"_index":5717,"title":{},"body":{"index.html":{}}}],["builder",{"_index":69,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["builder/selectquerybuilder",{"_index":3301,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["builds",{"_index":5780,"title":{},"body":{"index.html":{}}}],["bulkfollow",{"_index":4752,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["business",{"_index":5767,"title":{},"body":{"index.html":{}}}],["c",{"_index":5852,"title":{},"body":{"license.html":{}}}],["ca",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["call",{"_index":6176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callerisowner",{"_index":5616,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["calling",{"_index":5613,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["canaccess",{"_index":5004,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":2733,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":2736,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":2212,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":2200,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":2201,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":4196,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":2216,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":2202,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":5008,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":3055,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":3065,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["card",{"_index":4188,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":1842,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["cascade'})@joincolumn({name",{"_index":1887,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["case",{"_index":108,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["catch",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["category",{"_index":5320,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["certificate",{"_index":6010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":5700,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":5696,"title":{},"body":{"index.html":{}}}],["changed",{"_index":1974,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["changed_files",{"_index":1944,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changes",{"_index":5801,"title":{},"body":{"index.html":{}}}],["channel",{"_index":5842,"title":{},"body":{"index.html":{}}}],["character",{"_index":1617,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{}}}],["characters",{"_index":843,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5856,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":868,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["check",{"_index":526,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TierService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["check/insert",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkaddorg",{"_index":4417,"title":{},"body":{"injectables/TierService.html":{}}}],["checkaddorg(userid",{"_index":4419,"title":{},"body":{"injectables/TierService.html":{}}}],["checkauthsession",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":5814,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout.session.completed",{"_index":4241,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":4299,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":4304,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":4301,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":4302,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":3068,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":4755,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["chinese",{"_index":1350,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":871,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":2839,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["churned",{"_index":1267,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["cito",{"_index":5747,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5892,"title":{},"body":{"license.html":{}}}],["class",{"_index":60,"title":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["classes",{"_index":534,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":516,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":3000,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":1607,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2997,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["cli_split_kwargs",{"_index":2045,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":2025,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["click",{"_index":5826,"title":{},"body":{"index.html":{}}}],["clickable",{"_index":6142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cliduration",{"_index":2987,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5920,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":769,"title":{},"body":{"classes/BakeRepoDto.html":{},"entities/DbBakedRepo.html":{}}}],["clone_url",{"_index":1614,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["close",{"_index":1977,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["closed",{"_index":2038,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":2023,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["closed_at",{"_index":1945,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed_pull_requests\".\"updated_at",{"_index":3894,"title":{},"body":{"injectables/RepoService.html":{}}}],["cluster_apiservicesmodule",{"_index":244,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":245,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":246,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":752,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":754,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":753,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":755,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule",{"_index":815,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_exports",{"_index":816,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_imports",{"_index":818,"title":{},"body":{"modules/BlogSummaryModule.html":{}}}],["cluster_blogsummarymodule_providers",{"_index":817,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":1053,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":1055,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":1054,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":1056,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":1291,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":1292,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_couponmodule",{"_index":1306,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_exports",{"_index":1308,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_providers",{"_index":1307,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":1543,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":1544,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":1545,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":2573,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":2574,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":2674,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":2677,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":2675,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":2676,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2971,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2972,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":3142,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":3144,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":3145,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":3143,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule",{"_index":3224,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_exports",{"_index":3226,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_imports",{"_index":3227,"title":{},"body":{"modules/IssueSummaryModule.html":{}}}],["cluster_issuesummarymodule_providers",{"_index":3225,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":3238,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":3239,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":3240,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":3261,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":3262,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":3263,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule",{"_index":3386,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_exports",{"_index":3389,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_imports",{"_index":3387,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["cluster_pizzaovenmodule_providers",{"_index":3388,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":3583,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":3585,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":3584,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":3586,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":3771,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":3772,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":3773,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":3814,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":3815,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":3816,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":3817,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":4140,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":4141,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":4142,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":4143,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":4111,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":4114,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":4112,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":4113,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":4166,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":4168,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":4167,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":4200,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":4201,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":4202,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":4218,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":4219,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":4220,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":4305,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":4306,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":4307,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":4308,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_tiermodule",{"_index":4410,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_exports",{"_index":4412,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_providers",{"_index":4411,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_timescalemodule",{"_index":4437,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_timescalemodule_exports",{"_index":4438,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_timescalemodule_providers",{"_index":4439,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_userlistmodule",{"_index":5197,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_exports",{"_index":5198,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_imports",{"_index":5200,"title":{},"body":{"modules/UserListModule.html":{}}}],["cluster_userlistmodule_providers",{"_index":5199,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":5377,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":5379,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":5378,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":5380,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":5493,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":5495,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":5494,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":5496,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":5517,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":5520,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":5518,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":5519,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_workspacemodule",{"_index":5579,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cluster_workspacemodule_exports",{"_index":5582,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cluster_workspacemodule_imports",{"_index":5580,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["cluster_workspacemodule_providers",{"_index":5581,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":5713,"title":{},"body":{"index.html":{}}}],["coalesce(avg((pull_requests.merged_at::date",{"_index":5285,"title":{},"body":{"injectables/UserListService.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":3889,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(sum(\"pull_requests\".\"commits",{"_index":92,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["code",{"_index":541,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/SupabaseAuthDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":916,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1850,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":962,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":903,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["codeexplanationservice",{"_index":919,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["codename",{"_index":5963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":937,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["coderefactorsuggestionservice",{"_index":947,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["codes",{"_index":6172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["codetestsuggestioncontroller",{"_index":966,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["codetestsuggestionservice",{"_index":974,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["collaborate",{"_index":1441,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":2261,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":1439,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":4528,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4543,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":5388,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":4520,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:110",{"_index":4544,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":4540,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":4537,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":4533,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":4548,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":1438,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:11",{"_index":1446,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":4468,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":1444,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":2249,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:103",{"_index":2269,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:113",{"_index":2257,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:123",{"_index":2264,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:133",{"_index":2255,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":2258,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:37",{"_index":2273,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:45",{"_index":2267,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:53",{"_index":2271,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:61",{"_index":2266,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:72",{"_index":2263,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:83",{"_index":2268,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:93",{"_index":2256,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":4547,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":4566,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:12",{"_index":4569,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":4573,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":4575,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":4572,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":4578,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":4577,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":4574,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":4558,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":2250,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":4535,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaborator's",{"_index":2127,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["collaborators",{"_index":1506,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{}}}],["collaborators'})@isstring",{"_index":1498,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["collaboratorsdto",{"_index":981,"title":{"classes/CollaboratorsDto.html":{}},"body":{"classes/CollaboratorsDto.html":{},"controllers/UserListController.html":{}}}],["collection",{"_index":1083,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["color",{"_index":1999,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorado",{"_index":2776,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["colorize",{"_index":509,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1632,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["column(\"bigint",{"_index":2312,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":2040,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["column(\"integer",{"_index":2037,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["column(\"text",{"_index":2039,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":2004,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["columns",{"_index":2335,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":1440,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":5722,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1390,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1427,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/IssueSummaryService.html":{}}}],["commit",{"_index":996,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightRepoService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commit_author",{"_index":1655,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits",{"_index":1678,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits)@joincolumn({name",{"_index":1666,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author_email",{"_index":1645,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_author_id",{"_index":1656,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_authors",{"_index":1651,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_authors.entity",{"_index":1676,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_date",{"_index":1657,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_hash",{"_index":1027,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["commitauthordto",{"_index":993,"title":{"classes/CommitAuthorDto.html":{}},"body":{"classes/CommitAuthorDto.html":{}}}],["commitauthorservice",{"_index":3358,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["commitauthorsrepository",{"_index":1008,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["commitauthorsservice",{"_index":1001,"title":{"injectables/CommitAuthorsService.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["commitmessages",{"_index":2829,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["commits",{"_index":1184,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PizzaOvenController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["commits.baked_repo",{"_index":1622,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["commits.commit_author",{"_index":1648,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commits.entity",{"_index":1639,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{}}}],["commits.service",{"_index":3355,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commitsdto",{"_index":1025,"title":{"classes/CommitsDto.html":{}},"body":{"classes/CommitsDto.html":{}}}],["commitsrepository",{"_index":1040,"title":{},"body":{"injectables/CommitsService.html":{}}}],["commitsservice",{"_index":1033,"title":{"injectables/CommitsService.html":{}},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["committing",{"_index":5796,"title":{},"body":{"index.html":{}}}],["common",{"_index":6171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/constants/order",{"_index":1154,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1242,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["common/dtos/filter",{"_index":3441,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":1014,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["common/dtos/page.dto",{"_index":26,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["common/filters/repo",{"_index":3541,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":2679,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/WorkspaceModule.html":{}}}],["common/services/pager.service",{"_index":1016,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["common/util/datetimes",{"_index":1153,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["communication",{"_index":5698,"title":{},"body":{"index.html":{}}}],["community",{"_index":5835,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["company",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["complete",{"_index":5816,"title":{},"body":{"index.html":{}}}],["completion",{"_index":858,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":6116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5921,"title":{},"body":{"properties.html":{}}}],["component",{"_index":5774,"title":{},"body":{"index.html":{}}}],["computed",{"_index":1923,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["condition",{"_index":6179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":5873,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":6076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["configservice.get(\"db",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":4337,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":4128,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":5011,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":4135,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(`you",{"_index":4721,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["connection",{"_index":2465,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"openai",{"_index":866,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.error(`error",{"_index":3133,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["consolelogger",{"_index":1511,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":1518,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":68,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":3291,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":62,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["constructor(bakedreporepository",{"_index":3395,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["constructor(commitauthorsrepository",{"_index":1006,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["constructor(commitsrepository",{"_index":1038,"title":{},"body":{"injectables/CommitsService.html":{}}}],["constructor(configservice",{"_index":2734,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{}}}],["constructor(context",{"_index":1517,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":1140,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(couponrepository",{"_index":1316,"title":{},"body":{"injectables/CouponService.html":{}}}],["constructor(customerrepository",{"_index":1554,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1199,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":2579,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":2689,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":3059,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":3113,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":3162,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":3247,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":1580,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":826,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":3526,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":810,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["constructor(pullrequestgithubeventsrepository",{"_index":3489,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["constructor(pullrequestrepository",{"_index":3631,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(pullrequestreviewrepository",{"_index":3612,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["constructor(reporepository",{"_index":3842,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":4149,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":4120,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":4314,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":5527,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":4209,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1072,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":4568,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":4690,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":4873,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userlistcontributorrepository",{"_index":5353,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["constructor(userlistrepository",{"_index":5227,"title":{},"body":{"injectables/UserListService.html":{}}}],["constructor(usernotificationrepository",{"_index":5405,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userorganizationrepository",{"_index":5456,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["constructor(userreporepository",{"_index":5503,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(workspacememberrepository",{"_index":5588,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["consumer",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":531,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v2",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":4492,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":5690,"title":{},"body":{"index.html":{}}}],["content",{"_index":854,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["context",{"_index":520,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":6231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":5896,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1755,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contributed",{"_index":1685,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["contributing",{"_index":1757,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contribution",{"_index":1691,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"index.html":{}}}],["contribution.entity",{"_index":1060,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":1061,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":261,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":1102,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":1104,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpagemetadto",{"_index":49,"title":{"classes/ContributionPageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{}}}],["contributionpageoptionsdto",{"_index":1096,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contributionrepository",{"_index":1144,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":194,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributions'})@apibadrequestresponse({description",{"_index":5323,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributions.controller",{"_index":1062,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":3699,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:101",{"_index":3716,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:25",{"_index":3719,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:42",{"_index":3708,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:71",{"_index":3725,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.dto.ts",{"_index":2388,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:15",{"_index":2392,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:27",{"_index":2390,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:39",{"_index":2393,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:51",{"_index":2394,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:63",{"_index":2391,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:75",{"_index":2389,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.entity",{"_index":1159,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contributions.entity.ts",{"_index":2123,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:15",{"_index":2129,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:27",{"_index":2125,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:39",{"_index":2130,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:51",{"_index":2131,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:63",{"_index":2126,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:75",{"_index":2124,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.repo_id",{"_index":3877,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionsbyprojectdto",{"_index":54,"title":{"classes/ContributionsByProjectDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsByProjectDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributionscount",{"_index":3827,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":1057,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"overview.html":{}}}],["contributionspagedto",{"_index":52,"title":{"classes/ContributionsPageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsPageDto.html":{},"injectables/UserListStatsService.html":{}}}],["contributionspagedto(entities",{"_index":125,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionspagemetadto",{"_index":50,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionstimeframedto",{"_index":39,"title":{"classes/ContributionsTimeframeDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributor",{"_index":31,"title":{"classes/Contributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterListContributorsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":1294,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":1248,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":2048,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:14",{"_index":2051,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:20",{"_index":2050,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":2049,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.entity",{"_index":29,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["contributor.entity.ts",{"_index":2372,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:27",{"_index":2377,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:35",{"_index":2381,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:42",{"_index":2379,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:49",{"_index":2385,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:59",{"_index":2375,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:66",{"_index":2376,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:74",{"_index":2383,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:85",{"_index":2380,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.id",{"_index":5163,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.login",{"_index":5164,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.tolowercase",{"_index":3668,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/')@apioperation({operationid",{"_index":5329,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributor/contributor.module",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":1227,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{}}}],["contributorid",{"_index":5185,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributorinsightscontroller",{"_index":1254,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{}}}],["contributormodule",{"_index":262,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributorpullrequestsdto",{"_index":1297,"title":{"classes/ContributorPullRequestsDto.html":{}},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["contributors",{"_index":983,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"miscellaneous/enumerations.html":{}}}],["contributors')@apioperation({operationid",{"_index":5336,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributors'})@apibadrequestresponse({description",{"_index":5102,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["contributors'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuser)@apiokresponse({type",{"_index":5107,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributors.dto",{"_index":38,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributors.dto.ts",{"_index":2748,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["contributors.dto.ts:15",{"_index":2762,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:27",{"_index":5208,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:28",{"_index":2756,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:36",{"_index":5211,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:40",{"_index":2761,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:48",{"_index":2754,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:60",{"_index":2768,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:68",{"_index":2767,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:70",{"_index":2770,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors/insights",{"_index":1257,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["contributortype",{"_index":137,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["controller",{"_index":551,"title":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["controller(\"auth",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bake",{"_index":3356,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["controller(\"blogs",{"_index":808,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["controller(\"contributors",{"_index":1249,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":1282,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":2568,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":2641,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":2864,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2947,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":3035,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"issues",{"_index":3220,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["controller(\"lists",{"_index":5153,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["controller(\"prs",{"_index":921,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":3729,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":4246,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":4549,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":4676,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":4833,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":5000,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":5396,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":5480,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":4644,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["controller(\"workspaces",{"_index":5572,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["controllerkey",{"_index":6083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllers",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["conversation",{"_index":5837,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1442,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5868,"title":{},"body":{"license.html":{}}}],["copy",{"_index":5748,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":5851,"title":{},"body":{"license.html":{}}}],["corners",{"_index":2845,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["count",{"_index":1133,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["count(id",{"_index":3204,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["countfilters.push([`'${startdate}'::timestamp",{"_index":3916,"title":{},"body":{"injectables/RepoService.html":{}}}],["counting",{"_index":6158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["couple",{"_index":5807,"title":{},"body":{"index.html":{}}}],["coupon",{"_index":540,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["coupon.dto",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon.dto.ts",{"_index":536,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.dto.ts:11",{"_index":544,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.service",{"_index":1311,"title":{},"body":{"modules/CouponModule.html":{}}}],["coupon/coupon.module",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["coupon/coupon.service",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon/entities/coupon.entity",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["coupon_code",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["couponcode",{"_index":537,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["couponmodule",{"_index":263,"title":{"modules/CouponModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CouponModule.html":{},"modules.html":{},"overview.html":{}}}],["couponrepository",{"_index":1318,"title":{},"body":{"injectables/CouponService.html":{}}}],["coupons",{"_index":1766,"title":{},"body":{"entities/DbCoupon.html":{}}}],["couponservice",{"_index":656,"title":{"injectables/CouponService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"overview.html":{}}}],["coverage",{"_index":5761,"title":{},"body":{"index.html":{}}}],["cr.repo_id",{"_index":5067,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/WorkspaceController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(createendorsementdto",{"_index":2693,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createblogsummarydto",{"_index":788,"title":{"classes/CreateBlogSummaryDto.html":{}},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["createcheckoutsession",{"_index":4173,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":4177,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":1734,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserNotificationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1718,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["createendorsement",{"_index":2590,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":2598,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":1374,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["createhighlightdto",{"_index":4803,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":1401,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["createinsightdto.is_public",{"_index":5047,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":5044,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":5048,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":4458,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":4457,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":4459,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":1415,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto.email",{"_index":5018,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto})@apiparam({name",{"_index":4982,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createissuesummarydto",{"_index":1422,"title":{"classes/CreateIssueSummaryDto.html":{}},"body":{"classes/CreateIssueSummaryDto.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["createlog",{"_index":3246,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":3250,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":1429,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{}}}],["createparamdecorator((_data",{"_index":6230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":184,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["createquerybuilder(\"pull_request_github_events",{"_index":3511,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["createquerybuilder(\"pull_requests",{"_index":1180,"title":{},"body":{"injectables/ContributionService.html":{}}}],["createquerybuilder(\"repo",{"_index":3872,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":3888,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":4963,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":1436,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{}}}],["createuserhighlightdto",{"_index":1452,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["createuserhighlightdto})@apiparam({name",{"_index":4826,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createuserlistdto",{"_index":1221,"title":{"classes/CreateUserListDto.html":{}},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["createuserlistdto.contributors.map(async",{"_index":5161,"title":{},"body":{"controllers/UserListController.html":{}}}],["createuserlistdto})@apiparam({name",{"_index":5144,"title":{},"body":{"controllers/UserListController.html":{}}}],["createworkspace",{"_index":5586,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["createworkspace(dto",{"_index":5593,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["createworkspacedto",{"_index":1492,"title":{"classes/CreateWorkspaceDto.html":{}},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["createworkspaceforuser",{"_index":5554,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["createworkspaceforuser(@userid",{"_index":5575,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["createworkspaceforuser(userid",{"_index":5557,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["creation",{"_index":1692,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["creator",{"_index":1382,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"injectables/WorkspaceService.html":{}}}],["creator_user_id",{"_index":1377,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creators",{"_index":3195,"title":{},"body":{"injectables/InsightsService.html":{}}}],["cte",{"_index":3503,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["ctebuilder",{"_index":104,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/UserListStatsService.html":{}}}],["ctebuilder.innerjoin(\"users",{"_index":105,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctx",{"_index":2741,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":2743,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1087,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["current_month",{"_index":3688,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["current_month_prs",{"_index":229,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_month_prs\".\"author_login",{"_index":230,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_period_end_at",{"_index":2203,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":2204,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentdate",{"_index":144,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["currentmonthquery",{"_index":3684,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["currentrepoids",{"_index":5065,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":5070,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":5053,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":5057,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":5066,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":3243,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":1547,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":1548,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":727,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":4242,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":4244,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":4243,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":4248,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":726,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":264,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":1556,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1772,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":648,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["customlogger",{"_index":1508,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"overview.html":{}}}],["customprops",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":5777,"title":{},"body":{"index.html":{}}}],["d",{"_index":5731,"title":{},"body":{"index.html":{}}}],["damages",{"_index":5893,"title":{},"body":{"license.html":{}}}],["data",{"_index":899,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionsPageDto.html":{},"injectables/InsightRepoService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["data).pipe(map((resp",{"_index":3414,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["data.choices[0]?.message.content",{"_index":901,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":469,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":365,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":143,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"miscellaneous/variables.html":{}}}],["date'})@column({type",{"_index":1927,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["date(\"1970",{"_index":6227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().getfullyear",{"_index":6106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":103,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(date.now",{"_index":6098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(highlight.shipped_at",{"_index":4937,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(new",{"_index":178,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(startdate).gettime",{"_index":179,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":4846,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2991,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["dates",{"_index":129,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["dates.map(async",{"_index":132,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["day",{"_index":1916,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/HighlightController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["days",{"_index":100,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"index.html":{}}}],["days'})@isoptional",{"_index":2766,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["db",{"_index":2420,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["dbapiconfig",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbbakedrepo",{"_index":348,"title":{"entities/DbBakedRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["dbbakedrepo})@apinotfoundresponse({description",{"_index":3317,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommitauthors",{"_index":351,"title":{"entities/DbCommitAuthors.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["dbcommitauthors})@apinotfoundresponse({description",{"_index":3322,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits",{"_index":353,"title":{"entities/DbCommits.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitsService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["dbcommits})@apinotfoundresponse({description",{"_index":3325,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits})@apiparam({name",{"_index":3339,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcontribution",{"_index":338,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{}}}],["dbcontributionsprojects",{"_index":45,"title":{"entities/DbContributionsProjects.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributionsprojects})@apinotfoundresponse({description",{"_index":5312,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontributionstattimeframe",{"_index":42,"title":{"entities/DbContributionStatTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributionstattimeframe})@apinotfoundresponse({description",{"_index":5325,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":3707,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcontributorcategorytimeframe",{"_index":47,"title":{"entities/DbContributorCategoryTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributorcategorytimeframe})@apinotfoundresponse({description",{"_index":5322,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcoupon",{"_index":435,"title":{"entities/DbCoupon.html":{}},"body":{"modules/AppModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["dbcustomer",{"_index":375,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["dbemoji",{"_index":403,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":2562,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":419,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["dbendorsement})@apibody({type",{"_index":2601,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":2631,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbfiltereduser",{"_index":1815,"title":{"classes/DbFilteredUser.html":{}},"body":{"classes/DbFilteredUser.html":{},"controllers/UserController.html":{}}}],["dbfiltereduser})@apibadrequestresponse({description",{"_index":4632,"title":{},"body":{"controllers/UserController.html":{}}}],["dbinsight",{"_index":368,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbWorkspaceInsight.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{}}}],["dbinsightmember",{"_index":401,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":4980,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":370,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{}}}],["dbinsight})@apibadrequestresponse({description",{"_index":3010,"title":{},"body":{"controllers/InsightController.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":3014,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":385,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["dbloggingconfig",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":408,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["dbpullrequest",{"_index":389,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["dbpullrequestcontributor",{"_index":1238,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{}}}],["dbpullrequestgithubevents",{"_index":439,"title":{"entities/DbPullRequestGitHubEvents.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["dbpullrequestgithubevents})@apinotfoundresponse({description",{"_index":4615,"title":{},"body":{"controllers/UserController.html":{}}}],["dbpullrequestreview",{"_index":392,"title":{"entities/DbPullRequestReview.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":4620,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["dbrepologincontributions",{"_index":1157,"title":{"entities/DbRepoLoginContributions.html":{}},"body":{"injectables/ContributionService.html":{},"entities/DbRepoLoginContributions.html":{},"controllers/RepoContributionsController.html":{}}}],["dbrepologincontributions})@apinotfoundresponse({description",{"_index":3712,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbrepotouserstargazers",{"_index":346,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":3997,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":342,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":3951,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":344,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":4035,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":340,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":4073,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":3755,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbrepo})@useguards(supabaseguard",{"_index":5474,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["dbsubscription",{"_index":383,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["dbtimescaleconfig",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbtimezone",{"_index":2242,"title":{"classes/DbTimezone.html":{}},"body":{"classes/DbTimezone.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dbtimezone})@apinotfoundresponse({description",{"_index":5117,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbtopuser",{"_index":2246,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{}}}],["dbuser",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbusercollaboration",{"_index":414,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":4527,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":395,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbuserhighlight.create(await",{"_index":4929,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":405,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["dbuserhighlightreactionresponse",{"_index":2339,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":2933,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":4794,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":2353,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":4817,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo})@apinotfoundresponse({description",{"_index":5127,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2911,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["dbuserlist",{"_index":432,"title":{"entities/DbUserList.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbuserlistcontributor",{"_index":27,"title":{"entities/DbUserListContributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["dbuserlistcontributorstat",{"_index":30,"title":{"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbuserlistcontributorstat})@apinotfoundresponse({description",{"_index":5332,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbuserlistcontributor})@apinotfoundresponse({description",{"_index":5137,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserlist})@apinotfoundresponse({description",{"_index":5092,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbusernotification",{"_index":412,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["dbuserorganization",{"_index":416,"title":{"entities/DbUserOrganization.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserOrganization.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{}}}],["dbuserorganization})@apinotfoundresponse({description",{"_index":4606,"title":{},"body":{"controllers/UserController.html":{}}}],["dbuserrepo",{"_index":374,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["dbusertoprepo",{"_index":410,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{}}}],["dbusertouserfollows",{"_index":399,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":4761,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["dbworkspace",{"_index":441,"title":{"entities/DbWorkspace.html":{}},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["dbworkspaceinsight",{"_index":449,"title":{"entities/DbWorkspaceInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"modules/WorkspaceModule.html":{}}}],["dbworkspacemember",{"_index":443,"title":{"entities/DbWorkspaceMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["dbworkspaceorg",{"_index":445,"title":{"entities/DbWorkspaceOrg.html":{}},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceOrg.html":{},"modules/WorkspaceModule.html":{}}}],["dbworkspacerepo",{"_index":447,"title":{"entities/DbWorkspaceRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceRepo.html":{},"modules/WorkspaceModule.html":{}}}],["dbworkspace})@apibadrequestresponse({description",{"_index":5558,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["dbworkspace})@apinotfoundresponse({description",{"_index":5565,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["dd",{"_index":3575,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["deal",{"_index":5858,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5900,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1513,"title":{},"body":{"injectables/CustomLogger.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1521,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":3789,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":4920,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorators",{"_index":538,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{}}}],["default",{"_index":117,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/WorkspaceService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":4253,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":6009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultversion",{"_index":6061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["delete",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{},"miscellaneous/variables.html":{}}}],["delete(\"/:id",{"_index":3042,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["delete(\"/:id/contributors/:userlistcontributorid",{"_index":5188,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete(\"/:id/featured",{"_index":2959,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":4856,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":3982,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":4020,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":4058,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":4107,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":3985,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":4023,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":4060,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":4110,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":4777,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\"/profile",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(\":id",{"_index":2671,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":5028,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":3021,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["delete('/:id/contributors/:userlistcontributorid')@apioperation({operationid",{"_index":5099,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":2937,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4808,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3948,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3995,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4033,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4071,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3958,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4001,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4039,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4077,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4758,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete('/profile')@apioperation({operationid",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":2605,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":4990,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete\\`](https://developer.mozilla.org/en",{"_index":6193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecoupon",{"_index":1314,"title":{},"body":{"injectables/CouponService.html":{}}}],["deletecoupon(code",{"_index":1320,"title":{},"body":{"injectables/CouponService.html":{}}}],["deleted",{"_index":1985,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":1680,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":1717,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["deleteendoresementbyid",{"_index":2591,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":2672,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":2604,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":4784,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":4804,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":4785,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":4807,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletelistforuser",{"_index":5079,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(@userid",{"_index":5173,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(userid",{"_index":5095,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletes",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["deleteuseraccount",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(@userid",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(userid",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuserhighlight",{"_index":4866,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":4885,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":4867,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":4887,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserlist",{"_index":5219,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlist(listid",{"_index":5237,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributor",{"_index":5100,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["deleteuserlistcontributor(id",{"_index":5239,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributors",{"_index":5080,"title":{},"body":{"controllers/UserListController.html":{}}}],["deleteuserlistcontributors(id",{"_index":5097,"title":{},"body":{"controllers/UserListController.html":{}}}],["deleteworkspace",{"_index":5587,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["deleteworkspace(workspaceid",{"_index":5596,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["deleteworkspaceforuser",{"_index":5555,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["deleteworkspaceforuser(@param(\"id",{"_index":5577,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["deleteworkspaceforuser(id",{"_index":5560,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["deletion",{"_index":1829,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["deletions",{"_index":1946,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["denominator",{"_index":127,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["denver",{"_index":2775,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["dependencies",{"_index":243,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["deployment",{"_index":5815,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1641,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":549,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/NewMember.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":3591,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":3463,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.controller.ts:22",{"_index":3467,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":3468,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":2828,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:13",{"_index":2833,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":2837,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":2838,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":2836,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":2835,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":2832,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":3470,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":3473,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:10",{"_index":3476,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":3475,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":3474,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":2816,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5919,"title":{},"body":{"properties.html":{}}}],["detailed",{"_index":6143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":5693,"title":{},"body":{"index.html":{}}}],["dev/apply",{"_index":5739,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2371,"title":{},"body":{"entities/DbUserList.html":{}}}],["developers'})@column({type",{"_index":2366,"title":{},"body":{"entities/DbUserList.html":{}}}],["development",{"_index":5659,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["diagram",{"_index":5828,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2830,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":3478,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["diivi",{"_index":2352,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["direction.constant",{"_index":1155,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":5630,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3480,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["directory",{"_index":5694,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":147,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["discord",{"_index":4341,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["discord.find",{"_index":5838,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["disk",{"_index":2867,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":2863,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1782,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"index.html":{}}}],["display_email",{"_index":4506,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["display_local_time",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["display_order",{"_index":1776,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":227,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["distribute",{"_index":5864,"title":{},"body":{"license.html":{}}}],["dit",{"_index":5785,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":6005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1400,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["doc'})@column({type",{"_index":1812,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":1395,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":5689,"title":{},"body":{"index.html":{}}}],["docker>=20.10.12",{"_index":5663,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":5723,"title":{},"body":{"index.html":{}}}],["dockerfile.local",{"_index":5720,"title":{},"body":{"index.html":{}}}],["docs",{"_index":6039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":5804,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":5829,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":6064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":5970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":5915,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1820,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1889,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["downstarbyrepoid",{"_index":4118,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":4124,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":4147,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":4153,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":3989,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":3994,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":3990,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":4000,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":3942,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":3983,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":3947,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":3943,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":3957,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":4312,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":4318,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":4027,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":4032,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":4028,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":4038,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":5524,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":5531,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":4064,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":4108,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":4070,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":4065,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":4076,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1947,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["draft_pull_requests\".\"updated_at",{"_index":3896,"title":{},"body":{"injectables/RepoService.html":{}}}],["dry",{"_index":5811,"title":{},"body":{"index.html":{}}}],["dto",{"_index":5595,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto.description",{"_index":5610,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto.members.map(async",{"_index":5620,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto.name",{"_index":5609,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto/create",{"_index":2636,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos/baked",{"_index":3352,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["dtos/collaborators.dto",{"_index":5151,"title":{},"body":{"controllers/UserListController.html":{}}}],["dtos/contribution",{"_index":1156,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/contributions",{"_index":40,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/contributor",{"_index":4643,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/create",{"_index":803,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["dtos/filter",{"_index":3784,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filtered",{"_index":4640,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/follow",{"_index":4763,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dtos/highlight",{"_index":2946,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":3034,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/most",{"_index":36,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/page",{"_index":3303,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":3304,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":3443,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":3762,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":57,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/update",{"_index":3029,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/user",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["due",{"_index":6199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duration",{"_index":2989,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":5941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":5792,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1348,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["e.message",{"_index":3137,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["each",{"_index":1209,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["edit",{"_index":4462,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["editor",{"_index":2530,"title":{},"body":{"entities/DbWorkspaceMember.html":{},"miscellaneous/enumerations.html":{}}}],["email",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["emoji",{"_index":1781,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["emoji.controller",{"_index":2576,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":2566,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":2315,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":2555,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emojiid",{"_index":4792,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":265,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":2581,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1797,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":2565,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"overview.html":{}}}],["employees",{"_index":2502,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["employees'})@column({type",{"_index":2480,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["encounter",{"_index":5756,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":5830,"title":{},"body":{"index.html":{}}}],["end",{"_index":960,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{}}}],["end_range",{"_index":3652,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["ended_at",{"_index":2205,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":1381,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":2681,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":4665,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:25",{"_index":4671,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":4674,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":2637,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":1376,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts:11",{"_index":1384,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":1387,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:27",{"_index":1389,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:35",{"_index":1392,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:42",{"_index":1394,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:49",{"_index":1396,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":2635,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":4675,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":2588,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsementmodule",{"_index":266,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":2691,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1814,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":2717,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":2716,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":2725,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":2634,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":2639,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{}}}],["endpointconfig",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2869,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":2853,"title":{},"body":{"controllers/HealthController.html":{}}}],["english",{"_index":1341,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1342,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ensures",{"_index":3550,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["entire",{"_index":848,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":121,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"overview.html":{}}}],["entities.length",{"_index":3692,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities/baked",{"_index":3353,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["entities/commit_authors.entity",{"_index":1017,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/commits.entity",{"_index":1048,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/contributions",{"_index":43,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/contributors",{"_index":48,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/coupon.entity",{"_index":1310,"title":{},"body":{"modules/CouponModule.html":{},"injectables/CouponService.html":{}}}],["entities/emoji.entity",{"_index":2567,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":2638,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/filtered",{"_index":4639,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/insight",{"_index":3077,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":3031,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":3442,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{}}}],["entities/pull_request_github_event",{"_index":3495,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{}}}],["entities/repo",{"_index":1158,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["entities/repo.entity",{"_index":3761,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/timezones.entity",{"_index":5152,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["entities/top",{"_index":4636,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/user",{"_index":28,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["entities/workspace",{"_index":1504,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["entities/workspace.entity",{"_index":5570,"title":{},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["entity",{"_index":1329,"title":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}},"body":{"injectables/CouponService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{}}}],["entity(\"pull_request_reviews",{"_index":2120,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["entityqb.getrawmany",{"_index":123,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["enum",{"_index":1132,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbUserNotification.html":{},"entities/DbWorkspaceMember.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["enumerations",{"_index":5626,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":1106,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["env",{"_index":5672,"title":{},"body":{"index.html":{}}}],["environment",{"_index":5670,"title":{},"body":{"index.html":{}}}],["environments",{"_index":5650,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":6168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":2032,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{}}}],["error",{"_index":864,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1523,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":902,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":4280,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":867,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":4776,"title":{},"body":{"controllers/UserFollowsController.html":{},"index.html":{}}}],["escape",{"_index":4917,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":146,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["essentially",{"_index":3506,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["event",{"_index":2076,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"controllers/StripeWebhookController.html":{},"license.html":{}}}],["event.data.object",{"_index":4294,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":4298,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event_id",{"_index":2053,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["event_time",{"_index":3514,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["events",{"_index":3499,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["evolution",{"_index":5317,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["example",{"_index":542,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["exclude",{"_index":522,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["executioncontext",{"_index":2737,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1331,"title":{},"body":{"injectables/CouponService.html":{},"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":4795,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":3949,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existingcontributor",{"_index":5275,"title":{},"body":{"injectables/UserListService.html":{}}}],["existinguser",{"_index":5012,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":5017,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":5016,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":4252,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["expect",{"_index":6174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1763,"title":{},"body":{"entities/DbCoupon.html":{}}}],["expired_at",{"_index":1328,"title":{},"body":{"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["explanation",{"_index":914,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.controller",{"_index":3594,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":906,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.controller.ts:22",{"_index":917,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":918,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":2815,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:13",{"_index":2818,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":2820,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":2819,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":2817,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":920,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":927,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:10",{"_index":932,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":931,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":929,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":6041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["exports",{"_index":254,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}}}],["express",{"_index":2986,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"license.html":{}}}],["extends",{"_index":1066,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["extractjwt",{"_index":4393,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":4406,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":4405,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f",{"_index":5719,"title":{},"body":{"index.html":{}}}],["facilitate",{"_index":5691,"title":{},"body":{"index.html":{}}}],["false",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListStatsController.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":3715,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["false})@column('boolean",{"_index":1987,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["false})@column({default",{"_index":1834,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{}}}],["false})@column({type",{"_index":2282,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":778,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":4479,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastifyadapter",{"_index":6050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":1833,"title":{},"body":{"entities/DbInsight.html":{}}}],["featured",{"_index":1836,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["featurehighlight",{"_index":2899,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":2906,"title":{},"body":{"controllers/HighlightController.html":{}}}],["features",{"_index":4423,"title":{},"body":{"injectables/TierService.html":{}}}],["fetch",{"_index":873,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetched",{"_index":3126,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["fetcher",{"_index":880,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":884,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":4815,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"index.html":{}}}],["files",{"_index":1973,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":2349,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["filter((notification",{"_index":5430,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["filter.module",{"_index":3589,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":3775,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":3542,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":3776,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:15",{"_index":3782,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:86",{"_index":3780,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":3783,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtered",{"_index":206,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users",{"_index":217,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users\".\"user_login",{"_index":219,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filteredusersdto",{"_index":2799,"title":{"classes/FilteredUsersDto.html":{}},"body":{"classes/FilteredUsersDto.html":{},"controllers/UserController.html":{}}}],["filterlistcontributorsdto",{"_index":2746,"title":{"classes/FilterListContributorsDto.html":{}},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["filteroptionsdto",{"_index":2785,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["filters",{"_index":1235,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.foreach(([sql",{"_index":3805,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":3796,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":3794,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`'${startdate}'::timestamp",{"_index":3570,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`:topic",{"_index":3790,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":3788,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`repos.id",{"_index":3786,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderend(interval",{"_index":3569,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderstart",{"_index":3568,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderend(range",{"_index":3673,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderstart",{"_index":3672,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filterservice",{"_index":3632,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2912,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["findall",{"_index":1137,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":3767,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":1145,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbakedrepos",{"_index":3394,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbakedrepos(pageoptionsdto",{"_index":3400,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbycontributor",{"_index":3621,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":3636,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":2684,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":2696,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":3700,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":3703,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin",{"_index":3701,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin(owner",{"_index":3709,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyprauthor",{"_index":3488,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["findallbyprauthor(author",{"_index":3493,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["findallbyrecipientuserid",{"_index":2685,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":2698,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":1138,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":3717,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(repoid",{"_index":1148,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyrepoowneroruser",{"_index":2686,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":2700,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":2592,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":2610,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":3156,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":3168,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["findallbyuserid(userid",{"_index":5418,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["findallbyuserlogin",{"_index":1139,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyuserlogin(repoid",{"_index":1150,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallchurncontributors",{"_index":3622,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurncontributors(pageoptionsdto",{"_index":3638,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurnpullrequestcontributors",{"_index":1258,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallchurnpullrequestcontributors(pageoptionsdto",{"_index":1262,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallcommitauthors",{"_index":1004,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitauthors(pageoptionsdto",{"_index":1010,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitsbybakedrepoid",{"_index":1035,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbybakedrepoid(pageoptionsdto",{"_index":1042,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid",{"_index":1036,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid(pageoptionsdto",{"_index":1044,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcontributorsbyrepoid",{"_index":3722,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallcontributorswithfilters",{"_index":3623,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":3640,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":2557,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":2571,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":2558,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":2593,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":2649,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":2615,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":2594,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":2617,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":2659,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":2703,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":3157,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":3170,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeaturedhighlights",{"_index":2900,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2954,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":2916,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfollowers",{"_index":4686,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowers(userid",{"_index":4698,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist",{"_index":4687,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist(userid",{"_index":4700,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallhighlightreactions",{"_index":4868,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":4892,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":2901,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2963,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":2920,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":2902,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2951,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":2924,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":4591,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":4599,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":3056,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":3070,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":4974,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":4984,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findalllistcontributorstats",{"_index":5349,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findalllistcontributorstats(pageoptionsdto",{"_index":5362,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findallorgsbyusername",{"_index":4592,"title":{},"body":{"controllers/UserController.html":{}}}],["findallorgsbyusername(username",{"_index":4603,"title":{},"body":{"controllers/UserController.html":{}}}],["findallrecentcontributors",{"_index":3624,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":3642,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":1259,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":1271,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatcontributors",{"_index":3625,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatcontributors(pageoptionsdto",{"_index":3644,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatpullrequestcontributors",{"_index":1260,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatpullrequestcontributors(pageoptionsdto",{"_index":1274,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":3747,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":3769,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":3752,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreviewsbyprid",{"_index":3611,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findallreviewsbyprid(prid",{"_index":3615,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findalltopreposbyusername",{"_index":4593,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":4608,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":4523,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":4534,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercontributionsbyrepoid",{"_index":3702,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercontributionsbyrepoid(owner",{"_index":3720,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercreatedendorsements",{"_index":4667,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":4678,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":4669,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername",{"_index":2595,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername(username",{"_index":2620,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":4668,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":4681,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":4672,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername",{"_index":2596,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername(username",{"_index":2624,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":3991,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":4003,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":3944,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":3960,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":4029,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":4041,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":4066,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":4079,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":3626,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":3646,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbakedrepobyid",{"_index":3309,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbakedrepobyid(@param(\"id",{"_index":3363,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findbakedrepobyid(id",{"_index":3315,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbycustomerid",{"_index":1552,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":1561,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":1553,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":1563,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcommitauthorbyid",{"_index":1005,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(@param(\"id",{"_index":3370,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(id",{"_index":1012,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid",{"_index":1037,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(@param(\"id",{"_index":3378,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(id",{"_index":1046,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcontributionsbyproject",{"_index":182,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsbyproject(listid",{"_index":5364,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe",{"_index":136,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe(options",{"_index":5366,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper",{"_index":5350,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper(startdate",{"_index":5368,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe",{"_index":126,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe(options",{"_index":5370,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper",{"_index":5351,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper(startdate",{"_index":5372,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorpullrequestgithubevents",{"_index":4594,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequestgithubevents(username",{"_index":4612,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests",{"_index":4595,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":4617,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorsbyfilter",{"_index":5220,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbyfilter(pageoptionsdto",{"_index":5243,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid",{"_index":5221,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid(pageoptionsdto",{"_index":5245,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcoupon",{"_index":1315,"title":{},"body":{"injectables/CouponService.html":{}}}],["findcoupon(code",{"_index":1322,"title":{},"body":{"injectables/CouponService.html":{}}}],["findendorsementbyid",{"_index":2597,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":2663,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":2627,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findfeaturedinsights",{"_index":3004,"title":{},"body":{"controllers/InsightController.html":{}}}],["findfeaturedinsights(@query",{"_index":3040,"title":{},"body":{"controllers/InsightController.html":{}}}],["findfeaturedinsights(pageoptionsdto",{"_index":3007,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid",{"_index":3005,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":3038,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":3012,"title":{},"body":{"controllers/InsightController.html":{}}}],["findlistcontributorshighlightedrepos",{"_index":5222,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlightedrepos(pageoptionsdto",{"_index":5247,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlights",{"_index":5223,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlights(pageoptionsdto",{"_index":5249,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorstatsbyproject",{"_index":73,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findlistcontributorstatsbyproject(options",{"_index":5374,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findnewcontributorsintimerange",{"_index":3627,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":3648,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyid",{"_index":2687,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["findonebyid(@param(\"id",{"_index":3763,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":2705,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["findonebyidanduserid",{"_index":3158,"title":{},"body":{"injectables/InsightsService.html":{}}}],["findonebyidanduserid(id",{"_index":3173,"title":{},"body":{"injectables/InsightsService.html":{}}}],["findonebyownerandrepo",{"_index":3748,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":3765,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":3757,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":4067,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":4101,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":4083,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findoneuserbyid",{"_index":4596,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":4646,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":4622,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":4624,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":4869,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":4897,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findorgsrecommendations",{"_index":3838,"title":{},"body":{"injectables/RepoService.html":{}}}],["findorgsrecommendations(userid",{"_index":3853,"title":{},"body":{"injectables/RepoService.html":{}}}],["findpubliconebyid",{"_index":5224,"title":{},"body":{"injectables/UserListService.html":{}}}],["findpubliconebyid(id",{"_index":5252,"title":{},"body":{"injectables/UserListService.html":{}}}],["findrecommendations",{"_index":3839,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":3855,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":2606,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtop",{"_index":4870,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtop(pageoptionsdto",{"_index":4899,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtophighlights",{"_index":2903,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(@query",{"_index":2969,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(pageoptionsdto",{"_index":2927,"title":{},"body":{"controllers/HighlightController.html":{}}}],["finduserfollowerbyid",{"_index":4688,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":4702,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserorgsreporecommendations",{"_index":5468,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(@userid",{"_index":5487,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(userid",{"_index":5470,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations",{"_index":5469,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":5483,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":5476,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finish",{"_index":776,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["first",{"_index":198,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserListStatsService.html":{}}}],["fitness",{"_index":5886,"title":{},"body":{"license.html":{}}}],["fix",{"_index":5793,"title":{},"body":{"index.html":{}}}],["fix(cli",{"_index":2029,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["fixed",{"_index":2840,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["flag",{"_index":1076,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["folder",{"_index":5770,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2455,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"classes/FollowManyUsersDto.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":5386,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":4739,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:108",{"_index":4762,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:32",{"_index":4756,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:50",{"_index":4747,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:69",{"_index":4751,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":4734,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":4684,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:10",{"_index":4692,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":4697,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":4699,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":4701,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:47",{"_index":4704,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:63",{"_index":4696,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:92",{"_index":4706,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":2414,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{}}}],["followeduserid",{"_index":4695,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":2458,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["follower.user_id",{"_index":4947,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers",{"_index":4942,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers.map(async",{"_index":4945,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followeruserid",{"_index":4703,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":4716,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":4720,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":4717,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following.controller",{"_index":5390,"title":{},"body":{"modules/UserModule.html":{}}}],["following.controller.ts",{"_index":4728,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["following.controller.ts:19",{"_index":4733,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["following_user_id",{"_index":2454,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followings",{"_index":4450,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["followmanyusersdto",{"_index":2808,"title":{"classes/FollowManyUsersDto.html":{}},"body":{"classes/FollowManyUsersDto.html":{},"controllers/UserFollowsController.html":{}}}],["follows",{"_index":4017,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4816,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":4008,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":2453,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:16",{"_index":2460,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:24",{"_index":2462,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":2459,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":2456,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":2461,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":2457,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":5441,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":5444,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":4746,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":4740,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":4744,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames",{"_index":4741,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames(bulkfollow",{"_index":4748,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":4894,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["forbidunknownvalues",{"_index":5178,"title":{},"body":{"controllers/UserListController.html":{}}}],["formal",{"_index":1362,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1358,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1926,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":5794,"title":{},"body":{"index.html":{}}}],["found",{"_index":2563,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiconflictresponse({description",{"_index":3952,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiparam({name",{"_index":3318,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/UserInsightMemberController.html":{}}}],["found'})@apiquery({name",{"_index":3713,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":3015,"title":{},"body":{"controllers/InsightController.html":{}}}],["frame",{"_index":1740,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["frameduration",{"_index":145,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framepromises",{"_index":131,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framestartdate",{"_index":133,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["francisco",{"_index":4366,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4430,"title":{},"body":{"injectables/TierService.html":{},"license.html":{}}}],["freeplan",{"_index":6221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["french",{"_index":1344,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fresh",{"_index":3129,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["from(\"pull_requests",{"_index":199,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_list_contributors",{"_index":211,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_organizations",{"_index":3932,"title":{},"body":{"injectables/RepoService.html":{}}}],["from(`(${currentmonthquery.getquery",{"_index":3687,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":3695,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":2724,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":3675,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["from(entity",{"_index":3868,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user",{"_index":2403,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["from_user_id",{"_index":2404,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1464,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/RepoInfo.html":{},"index.html":{}}}],["full_name",{"_index":1414,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["fullname",{"_index":1818,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/RepoInfo.html":{}}}],["functions",{"_index":5642,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5871,"title":{},"body":{"license.html":{}}}],["generally",{"_index":6195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":791,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["generate:swagger",{"_index":5803,"title":{},"body":{"index.html":{}}}],["generateblogsummary",{"_index":790,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{}}}],["generateblogsummary(options",{"_index":829,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["generatecodeexplanation",{"_index":912,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":910,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{}}}],["generatecoderefactor",{"_index":943,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":941,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["generatecodetest",{"_index":971,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":969,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["generatecompletion",{"_index":3265,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":877,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":5725,"title":{},"body":{"index.html":{}}}],["generatedescription",{"_index":952,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":954,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":928,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":930,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateissuesummary",{"_index":3215,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["generateissuesummary(@body",{"_index":3222,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(generateissuesummarydto",{"_index":3216,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(options",{"_index":3228,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["generateissuesummarydto",{"_index":3218,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateprdescription",{"_index":908,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":924,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":909,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":940,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":968,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":3464,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":825,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":831,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":978,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":2827,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generates",{"_index":913,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generateswaggerjson",{"_index":5947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatetestsuggestion",{"_index":977,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":979,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["genereateblogsummary",{"_index":786,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(@body",{"_index":812,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(genereateblogsummarydto",{"_index":787,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummarydto",{"_index":798,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["german",{"_index":1345,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["germany",{"_index":2777,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["get(\"/:id",{"_index":3037,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get(\"/:id/contributions",{"_index":3731,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/contributors",{"_index":5180,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/contributors/highlights",{"_index":5191,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/contributors/highlights/tagged",{"_index":5193,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/reactions",{"_index":2965,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/reviews",{"_index":3459,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/:owner/:repo",{"_index":3764,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/:login/contributions",{"_index":3742,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":3736,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions/contributors",{"_index":3738,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":4100,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":4645,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":4764,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/following",{"_index":4735,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get(\"/:username/highlights",{"_index":4652,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/organizations",{"_index":4657,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":4647,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":4655,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/churn",{"_index":1287,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/commit",{"_index":3372,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/commit",{"_index":3383,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/repo/:id",{"_index":3380,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/contributors",{"_index":5175,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/created",{"_index":4677,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2953,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["get(\"/following",{"_index":4860,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":4861,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":3453,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2949,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":4015,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":3977,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":4054,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":4099,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":1283,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/orgs",{"_index":5486,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/received",{"_index":4680,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":1285,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repeat",{"_index":1289,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":5482,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":2654,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":2658,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":2651,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2961,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get(\"/search",{"_index":1251,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get(\"/service",{"_index":2868,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/timezones",{"_index":5195,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/top",{"_index":2968,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":2665,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":2669,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":2881,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":2662,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":5001,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(\":id/stats/contributions",{"_index":5342,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/most",{"_index":5339,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/top",{"_index":5346,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\"commit",{"_index":3368,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"commits/:id",{"_index":3377,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"repos/:id",{"_index":3362,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/')@apioperation({operationid",{"_index":2559,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/WorkspaceController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":3013,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":3718,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/contributors')@apioperation({operationid",{"_index":5135,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/contributors/highlights')@apioperation({operationid",{"_index":5131,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/contributors/highlights/tagged",{"_index":5124,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":2931,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/reviews')@apioperation({operationid",{"_index":3431,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":3758,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/:login/contributions')@apioperation({operationid",{"_index":3710,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":3704,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions/contributors')@apioperation({operationid",{"_index":3721,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4084,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":4623,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4754,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/following')@apioperation({operationid",{"_index":4731,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":4600,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/organizations')@apioperation({operationid",{"_index":4604,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":4618,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":4609,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/churn')@apioperation({operationid",{"_index":1264,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/commit",{"_index":3331,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/commit",{"_index":3342,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/repo/:id')@apioperation({operationid",{"_index":3337,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/contributors')@apioperation({operationid",{"_index":5106,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4670,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":2917,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":4820,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":4814,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":3427,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":2925,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4004,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3961,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4042,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4080,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":1279,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/orgs')@apioperation({operationid",{"_index":5471,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4673,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":1272,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repeat')@apioperation({operationid",{"_index":1275,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":5477,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":2618,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":2611,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":2921,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1232,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":2851,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/timezones')@apioperation({operationid",{"_index":5115,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":2928,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":2621,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":2625,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":2855,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":2628,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":4985,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(':id/stats/contributions",{"_index":5309,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/most",{"_index":5335,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/top",{"_index":5328,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get('commit",{"_index":3320,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('commits/:id')@apioperation({operationid",{"_index":3324,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('repos/:id')@apioperation({operationid",{"_index":3316,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get\\`](https://developer.mozilla.org/en",{"_index":6182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallhighlightreactions",{"_index":2904,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2966,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":2930,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":4786,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":4811,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getalltimezones",{"_index":5225,"title":{},"body":{"injectables/UserListService.html":{}}}],["getcontributionsbyproject",{"_index":5304,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbyproject(id",{"_index":5308,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe",{"_index":5305,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe(id",{"_index":5316,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject",{"_index":5306,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject(id",{"_index":5327,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":3628,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start_date",{"_index":3650,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributors",{"_index":5081,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributors(pageoptionsdto",{"_index":5105,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributorsbytimeframe",{"_index":5319,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getdateframes",{"_index":5352,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["getdateframes(range",{"_index":141,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["getdomain",{"_index":5950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":6043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":6036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":6040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":6042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":6038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfeaturedlists",{"_index":5082,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(@query",{"_index":5155,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(pageoptionsdto",{"_index":5109,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfollowinghighlightrepos",{"_index":4787,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":4813,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":4788,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":4819,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinglistbyusername",{"_index":4729,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(@param(\"username",{"_index":4736,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(username",{"_index":4730,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowstatusbyusername",{"_index":4742,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":4753,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":3521,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":3531,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getlistsforuser",{"_index":5083,"title":{},"body":{"controllers/UserListController.html":{}}}],["getlistsforuser(userid",{"_index":5112,"title":{},"body":{"controllers/UserListController.html":{}}}],["getmany",{"_index":4714,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["getmostactivecontributors",{"_index":5307,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getmostactivecontributors(id",{"_index":5334,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getprevdateisostring",{"_index":1152,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["getprevdateisostring(options.prev_days_start_date",{"_index":3562,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getprevdateisostring(pageoptionsdto.prev_days_start_date",{"_index":3498,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["getprevdateisostring(prev_days_start_date",{"_index":1176,"title":{},"body":{"injectables/ContributionService.html":{}}}],["getpullrequestinsights",{"_index":3422,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":3455,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":3426,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews",{"_index":3423,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(@param(\"id",{"_index":3460,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(id",{"_index":3430,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":3778,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":3781,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":1265,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["getschemapath(model",{"_index":5994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2769,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":4179,"title":{},"body":{"injectables/StripeService.html":{}}}],["gettimezones",{"_index":5084,"title":{},"body":{"controllers/UserListController.html":{}}}],["getting",{"_index":5646,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop10highlights",{"_index":4628,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":4597,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":4660,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":4627,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":4789,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":4836,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":4822,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserlist",{"_index":5085,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(@param(\"id",{"_index":5166,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(id",{"_index":5120,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlightedrepos",{"_index":5086,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlightedrepos(pageoptionsdto",{"_index":5123,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights",{"_index":5087,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights(pageoptionsdto",{"_index":5130,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors",{"_index":5088,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors(pageoptionsdto",{"_index":5134,"title":{},"body":{"controllers/UserListController.html":{}}}],["getusernotifications",{"_index":5393,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":5394,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusersbyfilter",{"_index":4598,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(@query",{"_index":4662,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(pageoptionsdto",{"_index":4631,"title":{},"body":{"controllers/UserController.html":{}}}],["getvotequery",{"_index":5525,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":5534,"title":{},"body":{"injectables/VoteService.html":{}}}],["getworkspaceforuser",{"_index":5564,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["getworkspacesforuser",{"_index":5556,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["getworkspacesforuser(userid",{"_index":5563,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["ghcr.io/open",{"_index":5786,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":5929,"title":{},"body":{"properties.html":{}}}],["github",{"_index":961,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["github.com/open",{"_index":1477,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github_sponsors_url",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["given",{"_index":933,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{}}}],["gives",{"_index":3507,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["go",{"_index":3127,"title":{},"body":{"injectables/InsightRepoService.html":{},"controllers/RepoContributionsController.html":{}}}],["goes",{"_index":1932,"title":{},"body":{"entities/DbPRInsight.html":{},"miscellaneous/variables.html":{}}}],["gpt",{"_index":6113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":195,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["granted",{"_index":5855,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5905,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"repos.full_name",{"_index":222,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["groupby(\"users.login",{"_index":2726,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":2660,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":2729,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"overview.html":{}}}],["guarded",{"_index":3976,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2730,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["guide",{"_index":5832,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":5833,"title":{},"body":{"index.html":{}}}],["hacktoberfest",{"_index":3560,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["hacktoberfestconfig",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hacktoberfestfilterquerybuilder",{"_index":3840,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestfilterquerybuilder(range",{"_index":3857,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestprcountfilterbuilderend",{"_index":3522,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderend(interval",{"_index":3533,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderstart",{"_index":3523,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder",{"_index":3524,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder(interval",{"_index":3536,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprfilterbuilderend",{"_index":3629,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderend(range",{"_index":3655,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderstart",{"_index":3630,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestyear",{"_index":3545,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["handled",{"_index":6184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlestripewebhook",{"_index":4227,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":4283,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":4229,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hash",{"_index":1028,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["hasnextpage",{"_index":1067,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1068,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["header",{"_index":6162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":885,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["headers(\"x",{"_index":2645,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":2849,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":2895,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":2861,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":2858,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":2847,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthmodule",{"_index":267,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":2852,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":2856,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":1000,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1881,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1419,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@isstring",{"_index":998,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["hereby",{"_index":5854,"title":{},"body":{"license.html":{}}}],["hey",{"_index":2259,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["highlight",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2913,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":2932,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2974,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":4780,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:114",{"_index":4806,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":4812,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:153",{"_index":4797,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:177",{"_index":4810,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:199",{"_index":4821,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:215",{"_index":4818,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:53",{"_index":4802,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:69",{"_index":4823,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:85",{"_index":4827,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":4847,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":4832,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":1453,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:11",{"_index":1479,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":1471,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":1457,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":1463,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:48",{"_index":1476,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:58",{"_index":1469,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":397,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":2276,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:109",{"_index":2304,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:116",{"_index":2280,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:123",{"_index":2296,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:134",{"_index":2284,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":2291,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:156",{"_index":2290,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:169",{"_index":2299,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:177",{"_index":2308,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:185",{"_index":2295,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:30",{"_index":2289,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:38",{"_index":2310,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:45",{"_index":2306,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:52",{"_index":2301,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:62",{"_index":2287,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:69",{"_index":2303,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:79",{"_index":2292,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:89",{"_index":2283,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:99",{"_index":2279,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":4934,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":4936,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.taggedrepos",{"_index":4939,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":4935,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.type",{"_index":4938,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":4933,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":4855,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":4830,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlight/entities/user",{"_index":4831,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlight/highlight.module",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_created",{"_index":5641,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlight_id",{"_index":2294,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_id=user_highlights.id",{"_index":4925,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":5639,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":2896,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["highlightcreated",{"_index":5640,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["highlighted",{"_index":5125,"title":{},"body":{"controllers/UserListController.html":{}}}],["highlightid",{"_index":4798,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":268,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":2348,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlightreaction",{"_index":1790,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1791,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":2313,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":2293,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":2898,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlights'})@apibadrequestresponse({description",{"_index":5128,"title":{},"body":{"controllers/UserListController.html":{}}}],["highlights.service",{"_index":2945,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":4862,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:102",{"_index":4891,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:113",{"_index":4900,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:138",{"_index":4878,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:157",{"_index":4902,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:177",{"_index":4895,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:19",{"_index":4875,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:217",{"_index":4890,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:228",{"_index":4880,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:252",{"_index":4904,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:256",{"_index":4886,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:260",{"_index":4893,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:282",{"_index":4898,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:299",{"_index":4883,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:31",{"_index":4884,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:331",{"_index":4888,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:37",{"_index":4896,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:58",{"_index":4889,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":4882,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5890,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5925,"title":{},"body":{"properties.html":{}}}],["host",{"_index":461,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PizzaOvenService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":2742,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":6037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hour",{"_index":6154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":521,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":4919,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":2859,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":362,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["httpmodule",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1997,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":2047,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1969,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":4342,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":4477,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/${repo.fullname",{"_index":3131,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["https://github.com/${url.full_name",{"_index":3184,"title":{},"body":{"injectables/InsightsService.html":{}}}],["https://github.com/open",{"_index":770,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":4349,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1799,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1794,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":4377,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":4499,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://opensource.org/licenses/mit",{"_index":6078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":4363,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":4484,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpservice",{"_index":3396,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["httpstatus",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1924,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1361,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/NewMember.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestReviewService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":2608,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":2630,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1625,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["ids",{"_index":985,"title":{},"body":{"classes/CollaboratorsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1269,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":5716,"title":{},"body":{"index.html":{}}}],["implements",{"_index":1572,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5882,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["imports",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}}}],["include",{"_index":3233,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["included",{"_index":5877,"title":{},"body":{"license.html":{}}}],["including",{"_index":5817,"title":{},"body":{"index.html":{},"license.html":{}}}],["inclusive",{"_index":3551,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":4356,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1077,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3125,"title":{},"body":{"injectables/InsightRepoService.html":{},"controllers/UserListController.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":1411,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":3809,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:11",{"_index":3812,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":3810,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3466,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4993,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1360,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ingesting",{"_index":5822,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":1078,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["initial",{"_index":6157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":17,"title":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["injectables",{"_index":822,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"timescaleconnection",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":23,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["injectrepository(dbbakedrepo",{"_index":3408,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["injectrepository(dbcommitauthors",{"_index":1018,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["injectrepository(dbcommits",{"_index":1049,"title":{},"body":{"injectables/CommitsService.html":{}}}],["injectrepository(dbcontribution",{"_index":1160,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcoupon",{"_index":1324,"title":{},"body":{"injectables/CouponService.html":{}}}],["injectrepository(dbcustomer",{"_index":1565,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":2584,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":2709,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":3181,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":3078,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":3124,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":3253,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":3543,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":1162,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["injectrepository(dbpullrequestgithubevents",{"_index":3496,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["injectrepository(dbpullrequestreview",{"_index":3618,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["injectrepository(dbrepo",{"_index":3862,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":4157,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":4129,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":4322,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":5538,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":4215,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":1161,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":4579,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":4905,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":4906,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserlist",{"_index":5257,"title":{},"body":{"injectables/UserListService.html":{}}}],["injectrepository(dbuserlistcontributor",{"_index":63,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["injectrepository(dbusernotification",{"_index":5423,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserorganization",{"_index":5461,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":5511,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":4708,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["injectrepository(dbworkspace",{"_index":5602,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["injectrepository(dbworkspacemember",{"_index":5601,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["inner",{"_index":3502,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["innerjoin",{"_index":208,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"insights",{"_index":3093,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":203,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"users",{"_index":213,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":4586,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":4585,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_notifications.from_user",{"_index":5426,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_organizations.organization_user",{"_index":5464,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["innerjoinandselect(\"user_organizations.user",{"_index":5463,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["insert",{"_index":1730,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["inserting/updating",{"_index":4279,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":1404,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserList.html":{},"entities/DbWorkspaceInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":3023,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4979,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight'})@apiparam({name",{"_index":3018,"title":{},"body":{"controllers/InsightController.html":{}}}],["insight.controller",{"_index":3149,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":5030,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:107",{"_index":5038,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:59",{"_index":5035,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:77",{"_index":5033,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":3030,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":1403,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["insight.dto.ts:14",{"_index":1407,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":1405,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":1409,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1913,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:15",{"_index":1930,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:28",{"_index":1936,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1928,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:53",{"_index":1921,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:65",{"_index":1920,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:77",{"_index":1938,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":3198,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.members",{"_index":1894,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["insight.members)@joincolumn({name",{"_index":1876,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["insight.members.find((member",{"_index":3046,"title":{},"body":{"controllers/InsightController.html":{}}}],["insight.repos",{"_index":1903,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1899,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":5054,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.workspaces",{"_index":2509,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insight/dtos/insight",{"_index":2797,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"entities/DbWorkspaceInsight.html":{},"modules/UserModule.html":{}}}],["insight/insights.module",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1865,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbWorkspaceInsight.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1893,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id",{"_index":3202,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":3094,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id",{"_index":3192,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insight_members.user_id=:userid)=0",{"_index":3205,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insight_members.user_id=users.id",{"_index":3095,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":3092,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":3090,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1902,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":3002,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{}}}],["insightfilterfieldsenum",{"_index":2789,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":2790,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":3800,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":3793,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":3795,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":3066,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":1839,"title":{},"body":{"entities/DbInsight.html":{},"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":5022,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmember.insight",{"_index":1840,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightmember.user_id",{"_index":3085,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberrepository",{"_index":3061,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{}}}],["insightmemberservice",{"_index":3051,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":3097,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{}}}],["insightpageoptionsdto",{"_index":3008,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo",{"_index":1846,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":5055,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1847,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":3116,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":3109,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["insightrepository",{"_index":3164,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1861,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"index.html":{}}}],["insights'})@apiokresponse({type",{"_index":3009,"title":{},"body":{"controllers/InsightController.html":{}}}],["insights.controller",{"_index":1295,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":1256,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:22",{"_index":1280,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:35",{"_index":1273,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:48",{"_index":1270,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:61",{"_index":1277,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.deleted_at",{"_index":3207,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.dto",{"_index":1281,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":3416,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.dto.ts:11",{"_index":3418,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.entity",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"modules/WorkspaceModule.html":{}}}],["insights.entity.ts",{"_index":2504,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:30",{"_index":2508,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:38",{"_index":2511,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:45",{"_index":2516,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:55",{"_index":2506,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:65",{"_index":2512,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:75",{"_index":2507,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:83",{"_index":2510,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.entity.ts:91",{"_index":2514,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["insights.id",{"_index":3203,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":3188,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=members.insight_id",{"_index":3190,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.is_featured=true",{"_index":3206,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":3033,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":3520,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:12",{"_index":3528,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:20",{"_index":3530,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:24",{"_index":3535,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:36",{"_index":3534,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:49",{"_index":3537,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:63",{"_index":3539,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:97",{"_index":3532,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_count",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insights_role",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightsmodule",{"_index":269,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":5040,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":3032,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["install",{"_index":5744,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5743,"title":{},"body":{"index.html":{}}}],["installed",{"_index":5658,"title":{},"body":{"index.html":{}}}],["instance",{"_index":5665,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":865,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{}}}],["instructions",{"_index":957,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":987,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["integer'})@column",{"_index":1878,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["integer'})@column('bigint",{"_index":2309,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@column('integer",{"_index":2014,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["integer'})@column({type",{"_index":1663,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@isoptional()@type(undefined",{"_index":4451,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["integer'})@primarycolumn('bigint",{"_index":1627,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@primarycolumn('integer",{"_index":1991,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["integer'})@primarycolumn()@primarygeneratedcolumn",{"_index":1831,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["integer'})@primarycolumn({type",{"_index":1929,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["integer'})@primarygeneratedcolumn",{"_index":2138,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@primarygeneratedcolumn({type",{"_index":2288,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@type(undefined)@isin(['0",{"_index":1124,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["integer'})@type(undefined)@isin(['7",{"_index":1127,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@isoptional",{"_index":1119,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(100)@isoptional",{"_index":2755,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":1113,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["integrates",{"_index":5821,"title":{},"body":{"index.html":{}}}],["integration",{"_index":5820,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":5923,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":3922,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{}}}],["interests.dto",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["interests.dto.ts",{"_index":4514,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.dto.ts:12",{"_index":4516,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":3921,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserListStatsService.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":2006,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":99,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["invalid",{"_index":795,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["invitation",{"_index":1880,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1866,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1867,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":1418,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["ip",{"_index":6149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_accepted",{"_index":2166,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["is_favorite",{"_index":1824,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_featured",{"_index":1825,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["is_onboarded",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["is_public",{"_index":1223,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["is_waitlisted",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["isarray",{"_index":986,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1202,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["isboolean",{"_index":780,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":3257,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":1480,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":1421,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1130,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":1135,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":2798,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":3293,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":3608,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":3609,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(rangetypeenum",{"_index":1305,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":3832,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isenum(userlistcontributorstatsorderenum",{"_index":5213,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(userlistcontributorstatstypeenum",{"_index":1216,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isglobal",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1194,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":4470,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1373,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1372,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"pull_request",{"_index":1485,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isin([\"view",{"_index":4464,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([0",{"_index":3294,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isin([7",{"_index":1196,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["isint",{"_index":1195,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":5009,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1364,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["iso",{"_index":1739,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["isoptional",{"_index":1131,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":1432,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":547,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/NewMember.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1391,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issue",{"_index":820,"title":{},"body":{"modules/BlogSummaryModule.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{}}}],["issue'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3217,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["issuecomments",{"_index":1424,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issuedescription",{"_index":1425,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issues",{"_index":1733,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["issues/issue",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["issues_created",{"_index":1727,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["issuesummarycontroller",{"_index":3213,"title":{"controllers/IssueSummaryController.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["issuesummarymodule",{"_index":270,"title":{"modules/IssueSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssueSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["issuesummaryservice",{"_index":3219,"title":{"injectables/IssueSummaryService.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"overview.html":{}}}],["issuetitle",{"_index":1426,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["isurl",{"_index":4501,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":2745,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":4085,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["it'})@apiparam({name",{"_index":4087,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":1346,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":1023,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["item.id",{"_index":3735,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["item.is_public",{"_index":5264,"title":{},"body":{"injectables/UserListService.html":{}}}],["item.repos.foreach(async",{"_index":3183,"title":{},"body":{"injectables/InsightsService.html":{}}}],["item.user_id",{"_index":5265,"title":{},"body":{"injectables/UserListService.html":{}}}],["itemcount",{"_index":118,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["items",{"_index":1082,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2365,"title":{},"body":{"entities/DbUserList.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":3419,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":3101,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":3102,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["join",{"_index":201,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["join(\"\\n",{"_index":853,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1674,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["jpmcb",{"_index":2812,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["js/dist/module/lib/types",{"_index":875,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify",{"_index":890,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":1611,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":4258,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":4395,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":5675,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyout",{"_index":5709,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5924,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5881,"title":{},"body":{"license.html":{}}}],["korean",{"_index":1351,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":2002,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1993,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1948,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1949,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":6035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":835,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":1268,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/variables.html":{}}}],["last_merged_at",{"_index":1134,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1950,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["lastvaluefrom",{"_index":3405,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["lastvaluefrom(this.httpservice.post(`${host}:${port}/bake",{"_index":3413,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["latest",{"_index":4255,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["leave",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoin",{"_index":226,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["leftjoin(\"insight_members",{"_index":3185,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoin(\"users",{"_index":1187,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserListService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":3876,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"insights.members",{"_index":3201,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":3874,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.members",{"_index":3189,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":3187,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":3875,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":1353,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["less",{"_index":2763,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["letters",{"_index":4493,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":504,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":510,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":5775,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5894,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5891,"title":{},"body":{"license.html":{}}}],["lib",{"_index":5769,"title":{},"body":{"index.html":{}}}],["license",{"_index":5849,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":1069,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/variables.html":{}}}],["limit(pageoptionsdto.limit",{"_index":1171,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5860,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5883,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":6148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limiting](#ratelimiting",{"_index":6216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["line",{"_index":149,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["line_items",{"_index":4191,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1961,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["linkedin",{"_index":4362,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["links",{"_index":6218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":5788,"title":{},"body":{"index.html":{}}}],["lintthis",{"_index":5791,"title":{},"body":{"index.html":{}}}],["list",{"_index":8,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["list'})@apibadrequestresponse({description",{"_index":5093,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":5101,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apiokresponse({type",{"_index":5121,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":5132,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":5126,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributor)@apiokresponse({type",{"_index":5136,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributorstat)@apiokresponse({type",{"_index":5337,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["list'})@isstring",{"_index":1490,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":2910,"title":{},"body":{"controllers/HighlightController.html":{}}}],["list.controller",{"_index":5203,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.controller.ts",{"_index":5076,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:111",{"_index":5145,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:136",{"_index":5096,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:153",{"_index":5108,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:169",{"_index":5138,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:186",{"_index":5141,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:208",{"_index":5104,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:225",{"_index":5133,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:242",{"_index":5129,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:256",{"_index":5119,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:46",{"_index":5114,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:59",{"_index":5111,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:74",{"_index":5094,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:95",{"_index":5122,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.dto",{"_index":5148,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["list.dto.ts",{"_index":1218,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["list.dto.ts:17",{"_index":1491,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:25",{"_index":1489,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:34",{"_index":1488,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:6",{"_index":1219,"title":{},"body":{"classes/Contributor.html":{}}}],["list.dto.ts:7",{"_index":1220,"title":{},"body":{"classes/Contributor.html":{}}}],["list.entity",{"_index":434,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["list.entity.ts",{"_index":2356,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:103",{"_index":2364,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:30",{"_index":2360,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:41",{"_index":2369,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:51",{"_index":2367,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:58",{"_index":2362,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:65",{"_index":2361,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:75",{"_index":2358,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:85",{"_index":2368,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:95",{"_index":2359,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.is_public",{"_index":5273,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.module",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["list.module.ts",{"_index":5201,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.name",{"_index":5272,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service",{"_index":5150,"title":{},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["list.service.ts",{"_index":5214,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:106",{"_index":5242,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:117",{"_index":5231,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:127",{"_index":5233,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:148",{"_index":5240,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:163",{"_index":5256,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:167",{"_index":5238,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:171",{"_index":5244,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:219",{"_index":5246,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:22",{"_index":5228,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:242",{"_index":5250,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:290",{"_index":5248,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:319",{"_index":5254,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:35",{"_index":5235,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:41",{"_index":5234,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:47",{"_index":5236,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:53",{"_index":5251,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:74",{"_index":5253,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:95",{"_index":5241,"title":{},"body":{"injectables/UserListService.html":{}}}],["list_id",{"_index":2373,"title":{},"body":{"entities/DbUserListContributor.html":{},"injectables/UserListService.html":{}}}],["list_user",{"_index":2357,"title":{},"body":{"entities/DbUserList.html":{}}}],["listallbakedrepos",{"_index":3310,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(@query",{"_index":3366,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(pageoptionsdto",{"_index":3327,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors",{"_index":3311,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(@query",{"_index":3375,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(pageoptionsdto",{"_index":3330,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid",{"_index":3312,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid(pageoptionsdto",{"_index":3336,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid",{"_index":3313,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid(pageoptionsdto",{"_index":3341,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallpullrequests",{"_index":3424,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":3449,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":3435,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listcontributors",{"_index":5160,"title":{},"body":{"controllers/UserListController.html":{}}}],["listid",{"_index":75,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["listing",{"_index":2560,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{}}}],["lists",{"_index":5077,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["lists'})@apibadrequestresponse({description",{"_index":5113,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists'})@apiokresponse({type",{"_index":5110,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists/dtos/collaborators.dto.ts",{"_index":982,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/collaborators.dto.ts:14",{"_index":989,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/contributions",{"_index":1064,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{}}}],["lists/dtos/create",{"_index":1217,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["lists/dtos/filter",{"_index":2747,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["lists/dtos/most",{"_index":5207,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["lists/dtos/top",{"_index":4443,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["lists/entities/contributions",{"_index":1725,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{}}}],["lists/entities/contributors",{"_index":1754,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["lists/entities/timezones.entity.ts",{"_index":2243,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/timezones.entity.ts:8",{"_index":2245,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/user",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserModule.html":{}}}],["lists/user",{"_index":7,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["literal",{"_index":872,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/TierService.html":{}}}],["live",{"_index":5648,"title":{},"body":{"index.html":{}}}],["load",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":3883,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":3886,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":3887,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":3885,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":3884,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":4344,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":6002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":5688,"title":{},"body":{"index.html":{}}}],["location",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["log",{"_index":1514,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":1582,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":1526,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":3252,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":1431,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:10",{"_index":1435,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":1434,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":1433,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":3242,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":1534,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["log/log.module",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"miscellaneous/variables.html":{}}}],["logger(`http",{"_index":2983,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":4247,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger(tierservice.name",{"_index":4422,"title":{},"body":{"injectables/TierService.html":{}}}],["logger.middleware",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":1571,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:11",{"_index":2982,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":1588,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":1590,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":1592,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":1586,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":1595,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":1584,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":1581,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":1597,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2984,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":1533,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":1510,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:19",{"_index":1527,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":1525,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":1531,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":1522,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":1529,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":1520,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":5965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":5944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":5768,"title":{},"body":{"index.html":{}}}],["login",{"_index":88,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbContributionStatTimeframe.html":{},"classes/DbFilteredUser.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/NewMember.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"injectables/UserListStatsService.html":{}}}],["login'})@apiokresponse({type",{"_index":3723,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["loglevels",{"_index":1536,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":1574,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":1585,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":271,"title":{"modules/LogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":1575,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":1587,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":1576,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":1589,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":1577,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":1591,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1911,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":1578,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":1594,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":1519,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"overview.html":{}}}],["logsrepository",{"_index":3249,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":1512,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lookuporg",{"_index":4424,"title":{},"body":{"injectables/TierService.html":{}}}],["lookuporg(`org:${userid",{"_index":4429,"title":{},"body":{"injectables/TierService.html":{}}}],["loops",{"_index":151,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loops/no",{"_index":150,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loose",{"_index":6063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":3891,"title":{},"body":{"injectables/RepoService.html":{}}}],["machine",{"_index":5736,"title":{},"body":{"index.html":{}}}],["machines",{"_index":5660,"title":{},"body":{"index.html":{}}}],["made",{"_index":2285,"title":{},"body":{"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":2044,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["main'})@column('text",{"_index":2018,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["make",{"_index":4472,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["maker",{"_index":4503,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":4487,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["making",{"_index":5800,"title":{},"body":{"index.html":{}}}],["managesubscriptionstatuschange",{"_index":4228,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":4234,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["many",{"_index":2810,"title":{},"body":{"classes/FollowManyUsersDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":1675,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":2112,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["map",{"_index":3406,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["map((notification",{"_index":5432,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["mapping",{"_index":5734,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":792,"title":{},"body":{"controllers/BlogSummaryController.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["markdowndescription",{"_index":6054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marknotificationsasread",{"_index":5404,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":5420,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":4502,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4504,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":239,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":3283,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1365,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":1371,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(100",{"_index":2774,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["max(10000",{"_index":3292,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":1369,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":842,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":832,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":1451,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1934,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["measured",{"_index":6155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["member",{"_index":1417,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbInsightMember.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceRepo.html":{},"classes/NewMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/WorkspaceService.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":4981,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":4995,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":3151,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":4972,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:140",{"_index":4997,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:178",{"_index":4991,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:61",{"_index":4987,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:92",{"_index":4983,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":4999,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":1416,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["member.dto.ts:11",{"_index":1420,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":4463,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":402,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/NewMember.html":{},"controllers/UserInsightMemberController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["member.entity.ts",{"_index":1863,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbWorkspaceMember.html":{},"miscellaneous/enumerations.html":{}}}],["member.entity.ts:105",{"_index":1885,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:107",{"_index":2528,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:115",{"_index":1882,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:123",{"_index":1877,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:131",{"_index":1888,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:30",{"_index":1875,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:36",{"_index":2522,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:38",{"_index":1879,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:44",{"_index":2527,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:46",{"_index":1892,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:51",{"_index":2529,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:57",{"_index":1890,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:61",{"_index":2520,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:68",{"_index":1871,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:71",{"_index":2526,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:78",{"_index":1872,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:81",{"_index":2521,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:88",{"_index":1891,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:91",{"_index":2525,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.entity.ts:95",{"_index":1873,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:99",{"_index":2524,"title":{},"body":{"entities/DbWorkspaceMember.html":{}}}],["member.id",{"_index":5621,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["member.role",{"_index":5622,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["member.service",{"_index":3152,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":3053,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:12",{"_index":3060,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:19",{"_index":3064,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:25",{"_index":3072,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:39",{"_index":3063,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:43",{"_index":3076,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:47",{"_index":3074,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:51",{"_index":3069,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:84",{"_index":3071,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.user_id",{"_index":3047,"title":{},"body":{"controllers/InsightController.html":{}}}],["memberid",{"_index":4989,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":1495,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"injectables/InsightsService.html":{},"classes/NewMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["membership",{"_index":3045,"title":{},"body":{"controllers/InsightController.html":{}}}],["membership.access",{"_index":3048,"title":{},"body":{"controllers/InsightController.html":{}}}],["memory",{"_index":2866,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":2862,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":838,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["merchantability",{"_index":5885,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1702,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{},"license.html":{}}}],["mergeable",{"_index":1951,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["merged",{"_index":1952,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["merged_at",{"_index":1953,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["merged_by_login",{"_index":1954,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_pull_requests\".\"updated_at",{"_index":3895,"title":{},"body":{"injectables/RepoService.html":{}}}],["message",{"_index":876,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":893,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":1091,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{}}}],["meta.dto",{"_index":1093,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["meta.dto.ts",{"_index":3272,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:10",{"_index":3277,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:17",{"_index":3276,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:24",{"_index":3275,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:31",{"_index":3278,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:37",{"_index":3274,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:43",{"_index":3273,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":2405,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["metadata",{"_index":2206,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["method",{"_index":523,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["methodkey",{"_index":6084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["microservice",{"_index":3347,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["middlewareconsumer",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations",{"_index":5742,"title":{},"body":{"index.html":{}}}],["migrations.sh",{"_index":5740,"title":{},"body":{"index.html":{}}}],["milestone",{"_index":1475,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["min",{"_index":1366,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":1370,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2773,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":1368,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimum",{"_index":2772,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":3105,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":1447,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minlength(20",{"_index":1450,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":1483,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minus",{"_index":3557,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["miscellaneous",{"_index":5625,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":5810,"title":{},"body":{"index.html":{}}}],["mit",{"_index":5850,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":3574,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":5779,"title":{},"body":{"index.html":{}}}],["mode",{"_index":4193,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":891,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":6111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5862,"title":{},"body":{"license.html":{}}}],["module",{"_index":240,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}}}],["modules",{"_index":242,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":3561,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["months",{"_index":3454,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["months'})@apiokresponse({type",{"_index":3428,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":6207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mostactive",{"_index":3106,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":3107,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mote",{"_index":6202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mountain",{"_index":2780,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["move",{"_index":5766,"title":{},"body":{"index.html":{}}}],["mrpizza",{"_index":4368,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["my_postgres_container",{"_index":5728,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":5718,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":5732,"title":{},"body":{"index.html":{}}}],["n",{"_index":897,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":5733,"title":{},"body":{"index.html":{}}}],["names",{"_index":1465,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["navigating",{"_index":5692,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":3484,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":5655,"title":{},"body":{"index.html":{}}}],["needs",{"_index":5773,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":6049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["nestjs/common/services/console",{"_index":1532,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["nestjs/passport",{"_index":760,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":546,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1636,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["nestjs/terminus",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/TimescaleModule.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":1598,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":1601,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2985,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":4388,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":102,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcount",{"_index":169,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder",{"_index":166,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.getcount",{"_index":170,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.innerjoin",{"_index":167,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcustomer",{"_index":730,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":733,"title":{},"body":{"controllers/AuthController.html":{}}}],["newer",{"_index":3661,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["newhighlight",{"_index":4940,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newinsight",{"_index":3193,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":5014,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":5707,"title":{},"body":{"index.html":{}}}],["newlist",{"_index":5158,"title":{},"body":{"controllers/UserListController.html":{}}}],["newlog",{"_index":3254,"title":{},"body":{"injectables/LogService.html":{}}}],["newmember",{"_index":1505,"title":{"classes/NewMember.html":{}},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{},"injectables/WorkspaceService.html":{}}}],["newpullrequestcontributors",{"_index":1261,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":1278,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuserhighlight",{"_index":4931,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserlist",{"_index":5270,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserlistcontributor",{"_index":5277,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserrepo",{"_index":5513,"title":{},"body":{"injectables/UserReposService.html":{}}}],["newworkspace",{"_index":5607,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["next",{"_index":148,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nextfunction",{"_index":2981,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node>=16.7.0",{"_index":5661,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":2001,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":5711,"title":{},"body":{"index.html":{}}}],["non",{"_index":963,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["noninfringement",{"_index":5889,"title":{},"body":{"license.html":{}}}],["note",{"_index":5714,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":18,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["notfoundexception(\"the",{"_index":1330,"title":{},"body":{"injectables/CouponService.html":{}}}],["notfoundexception(\"user",{"_index":5281,"title":{},"body":{"injectables/UserListService.html":{}}}],["notfoundexception(\"you",{"_index":4138,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5875,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":4707,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":5399,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:13",{"_index":5406,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":5417,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":5419,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:52",{"_index":5415,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:63",{"_index":5409,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:75",{"_index":5413,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:87",{"_index":5411,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:99",{"_index":5421,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":2412,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{}}}],["notification.constants",{"_index":2428,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["notification.constants.ts",{"_index":5636,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":5387,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":5391,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.controller.ts:25",{"_index":5395,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":2402,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:18",{"_index":2413,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:26",{"_index":2427,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:34",{"_index":2411,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:45",{"_index":2426,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:55",{"_index":2416,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:65",{"_index":2421,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:74",{"_index":2423,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:84",{"_index":2419,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:92",{"_index":2409,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":5433,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification.read_at",{"_index":5431,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":5422,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":5447,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":4944,"title":{},"body":{"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{}}}],["notified_at",{"_index":2406,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":98,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListStatsService.html":{}}}],["npm",{"_index":5746,"title":{},"body":{"index.html":{}}}],["npm>=8.0.0",{"_index":5662,"title":{},"body":{"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"injectables/WorkspaceService.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":4853,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":6012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":6021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":4494,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["numerical",{"_index":1931,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5917,"title":{},"body":{"properties.html":{}}}],["object",{"_index":3785,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":3302,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":1224,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":5695,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5857,"title":{},"body":{"license.html":{}}}],["oct",{"_index":3558,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["octo",{"_index":5846,"title":{},"body":{"index.html":{}}}],["october",{"_index":3549,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["offset(pageoptionsdto.skip",{"_index":1170,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["omittype",{"_index":4829,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["omittype(dbuserhighlight",{"_index":4834,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbusernotification",{"_index":5397,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["onboarded",{"_index":4357,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["onboarding.dto",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{}}}],["onboarding.dto.ts",{"_index":5451,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:12",{"_index":5452,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":5454,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["once",{"_index":5673,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":1841,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["onetomany",{"_index":1633,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"entities/DbWorkspace.html":{}}}],["onetoone",{"_index":1860,"title":{},"body":{"entities/DbInsight.html":{}}}],["open",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["open_pull_requests",{"_index":3890,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":3892,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"updated_at",{"_index":3893,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":272,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":827,"title":{"injectables/OpenAiService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"overview.html":{}}}],["openapi",{"_index":5798,"title":{},"body":{"index.html":{}}}],["opened",{"_index":3500,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["opened/closed",{"_index":3509,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["opening",{"_index":5797,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1752,"title":{},"body":{"entities/DbContributionsProjects.html":{},"entities/DbWorkspace.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{}}}],["opensauced's",{"_index":2491,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":4475,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":6047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":5705,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["operationidfactory",{"_index":6082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":774,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["optional",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["options",{"_index":74,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["options.blogmarkdown",{"_index":857,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.blogtitle}\\n\\nblog",{"_index":856,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.build",{"_index":6081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.code}\\n",{"_index":935,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":3483,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":3485,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.contributortype",{"_index":138,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.descriptionlength",{"_index":936,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":3481,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":3482,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":1015,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["options.dto.ts",{"_index":1098,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2977,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":2791,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":3287,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":3833,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":1109,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":2796,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":3099,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":3601,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":2793,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":3834,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2346,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["options.dto.ts:34",{"_index":3103,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":2795,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":3822,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":3100,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":3607,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:46",{"_index":3289,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":3602,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":3603,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:57",{"_index":3288,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:59",{"_index":3290,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":3606,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":3595,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:80",{"_index":3597,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":3792,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["options.issuecomments",{"_index":3237,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuedescription}\\nissue",{"_index":3236,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuetitle}\\nissue",{"_index":3235,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.range",{"_index":79,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repo",{"_index":3787,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repo_id",{"_index":81,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repoids",{"_index":3580,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":3581,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.summarylength",{"_index":861,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["options.temperature",{"_index":863,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":862,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":3567,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["order",{"_index":1783,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["orderby",{"_index":1099,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{}}}],["orderby(\"endorsements.created_at",{"_index":2714,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":3209,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":4588,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":4913,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"user_lists.updated_at",{"_index":5268,"title":{},"body":{"injectables/UserListService.html":{}}}],["orderby(\"user_notifications.notified_at",{"_index":5429,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["orderby(\"user_organizations.created_at",{"_index":5465,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["orderby(\"users.name",{"_index":3096,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":3908,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":1100,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["orderdirectionenum",{"_index":1115,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":3909,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":1116,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["orderfield",{"_index":1164,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1748,"title":{},"body":{"entities/DbContributionsProjects.html":{},"entities/DbWorkspaceOrg.html":{},"controllers/EndorsementController.html":{}}}],["org.entity",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"modules/WorkspaceModule.html":{}}}],["org.entity.ts",{"_index":2534,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:30",{"_index":2537,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:38",{"_index":2539,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:45",{"_index":2542,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:55",{"_index":2535,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:65",{"_index":2540,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:75",{"_index":2536,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:83",{"_index":2538,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org.entity.ts:91",{"_index":2541,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["org/repo",{"_index":1746,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["org_id",{"_index":187,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"entities/DbWorkspaceOrg.html":{},"injectables/UserListStatsService.html":{}}}],["organization",{"_index":2438,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{}}}],["organization.entity.ts",{"_index":2433,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:26",{"_index":2439,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:34",{"_index":2444,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:42",{"_index":2440,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:52",{"_index":2436,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:59",{"_index":2437,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:67",{"_index":2443,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:75",{"_index":2442,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.service",{"_index":4642,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["organization.service.ts",{"_index":5455,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:11",{"_index":5457,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:17",{"_index":5459,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:23",{"_index":5460,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization_id",{"_index":2434,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization_user",{"_index":2435,"title":{},"body":{"entities/DbUserOrganization.html":{},"injectables/UserOrganizationService.html":{}}}],["orgs",{"_index":2477,"title":{},"body":{"entities/DbWorkspace.html":{},"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["orgs'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5473,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["origin",{"_index":1714,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2993,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":3208,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":2721,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["oss",{"_index":1497,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{}}}],["otherwise",{"_index":5898,"title":{},"body":{"license.html":{}}}],["out",{"_index":250,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outside",{"_index":965,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["oven",{"_index":3135,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["oven.controller",{"_index":3391,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.controller.ts",{"_index":3308,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:103",{"_index":3326,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:115",{"_index":3340,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:130",{"_index":3344,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:41",{"_index":3349,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:57",{"_index":3319,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:68",{"_index":3329,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:80",{"_index":3323,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:91",{"_index":3335,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.module",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{}}}],["oven.module.ts",{"_index":3390,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.service",{"_index":3121,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["oven.service.ts",{"_index":3393,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:15",{"_index":3397,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:24",{"_index":3399,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:30",{"_index":3404,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:42",{"_index":3402,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:56",{"_index":3401,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["over",{"_index":2765,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":5907,"title":{"overview.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["overviews",{"_index":5840,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1507,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"entities/DbWorkspaceMember.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/NewMember.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{}}}],["owneroruser",{"_index":2719,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":3902,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":2722,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":5729,"title":{},"body":{"index.html":{}}}],["package",{"_index":5913,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":5812,"title":{},"body":{"index.html":{}}}],["page",{"_index":1070,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/enumerations.html":{}}}],["page.dto",{"_index":53,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["page.dto.ts",{"_index":1198,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:11",{"_index":1205,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:16",{"_index":1201,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["pagecount",{"_index":1071,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":25,"title":{"classes/PageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["pagedto(entities",{"_index":1174,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["pagees",{"_index":4353,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["pagemeta.dto",{"_index":51,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pagemeta.dto.ts",{"_index":1065,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemeta.dto.ts:11",{"_index":1074,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto",{"_index":124,"title":{"classes/PageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["pagemetadto:10",{"_index":1088,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:17",{"_index":1086,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:24",{"_index":1084,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:31",{"_index":1090,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:37",{"_index":1081,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:43",{"_index":1079,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1207,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1073,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{}}}],["pageoptionsdto",{"_index":119,"title":{"classes/PageOptionsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["pageoptionsdto.contributor",{"_index":5291,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributor.tolowercase",{"_index":5293,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributortype",{"_index":107,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.limit",{"_index":3280,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":1165,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":1168,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["pageoptionsdto.page",{"_index":3279,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":101,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.rangetype",{"_index":3669,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.repo",{"_index":3914,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":3913,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":3683,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.topic",{"_index":3671,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto:17",{"_index":1120,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["pageoptionsdto:24",{"_index":3417,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:30",{"_index":1114,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["pageoptionsdto:35",{"_index":1118,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["pageoptionsdto:46",{"_index":1128,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["pageoptionsdto:57",{"_index":1126,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["pager.service",{"_index":255,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":247,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{},"overview.html":{}}}],["pages",{"_index":1089,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{}}}],["paginate",{"_index":4601,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1243,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1236,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":3705,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":6170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationinput",{"_index":3298,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["pair",{"_index":5699,"title":{},"body":{"index.html":{}}}],["param",{"_index":2633,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["param(\"emojiid",{"_index":4852,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2957,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"login",{"_index":3743,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["param(\"memberid",{"_index":5020,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":2655,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":2656,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":2652,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"userlistcontributorid",{"_index":5189,"title":{},"body":{"controllers/UserListController.html":{}}}],["param(\"username",{"_index":2666,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["parameters.dto",{"_index":1092,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":3286,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":3681,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${ctecounterresult?.count",{"_index":3519,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["parseint(`${uuid",{"_index":4250,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":6233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":2940,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":4454,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":4455,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5887,"title":{},"body":{"license.html":{}}}],["partition",{"_index":3513,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["passed",{"_index":3479,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":4394,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":759,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":4392,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":4397,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":467,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["past",{"_index":1122,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["patch",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/:id",{"_index":4838,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/profile",{"_index":735,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/coupon",{"_index":743,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":741,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":738,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":5019,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":4825,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/coupon')@apioperation({operationid",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":4542,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":4992,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch\\`](https://developer.mozilla.org/en",{"_index":6191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":525,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":4187,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1870,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["pending'})@column({type",{"_index":1869,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":1085,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["perceived",{"_index":6201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perform",{"_index":6152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["period",{"_index":2219,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5853,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5869,"title":{},"body":{"license.html":{}}}],["person",{"_index":841,"title":{},"body":{"injectables/BlogSummaryService.html":{},"license.html":{}}}],["persons",{"_index":5870,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1359,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["phone",{"_index":4435,"title":{},"body":{"injectables/TierService.html":{}}}],["picktype",{"_index":2347,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":2351,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picture",{"_index":3508,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pid,hostname,context",{"_index":518,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":2277,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza",{"_index":775,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":4473,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza/dtos/baked",{"_index":3122,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["pizza/entities/baked",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commit_authors.entity",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commits.entity",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/pizza",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{}}}],["pizza_oven_api=80",{"_index":5824,"title":{},"body":{"index.html":{}}}],["pizza_oven_host=\"http://example.com",{"_index":5823,"title":{},"body":{"index.html":{}}}],["pizzaconfig",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pizzaovencontroller",{"_index":3306,"title":{"controllers/PizzaOvenController.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["pizzaovenmodule",{"_index":273,"title":{"modules/PizzaOvenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules.html":{},"overview.html":{}}}],["pizzaovenservice",{"_index":3114,"title":{"injectables/PizzaOvenService.html":{}},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"overview.html":{}}}],["plan",{"_index":4431,"title":{},"body":{"injectables/TierService.html":{}}}],["plan:free@1",{"_index":6223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":6137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":5831,"title":{},"body":{"index.html":{}}}],["port",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"injectables/PizzaOvenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5879,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1347,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["post(\"/:id/contributors",{"_index":5183,"title":{},"body":{"controllers/UserListController.html":{}}}],["post(\"/:id/featured",{"_index":2956,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":4851,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":3471,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":923,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":949,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/summary/generate",{"_index":811,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post(\"/test/generate",{"_index":975,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":4282,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":5007,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3346,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":2599,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/contributors')@apioperation({operationid",{"_index":5140,"title":{},"body":{"controllers/UserListController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":2907,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4793,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":3465,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":911,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":942,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/summary/generate')@apioperation({operationid",{"_index":789,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":970,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":4231,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":4977,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post\\`](https://developer.mozilla.org/en",{"_index":6187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postcreatecheckoutsession",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":5721,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":5667,"title":{},"body":{"index.html":{}}}],["posting",{"_index":3134,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["postonboarding",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttopizzaovenservice",{"_index":3314,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["posttopizzaovenservice'})@apiacceptedresponse()@apibadrequestresponse({description",{"_index":3348,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(@body",{"_index":3359,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakeoptionsinfo",{"_index":3345,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakerepoinfo",{"_index":3403,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["postuserlistcontributors",{"_index":5089,"title":{},"body":{"controllers/UserListController.html":{}}}],["postuserlistcontributors(updatecollaboratorsdto",{"_index":5139,"title":{},"body":{"controllers/UserListController.html":{}}}],["postwaitlist",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":5916,"title":{},"body":{"properties.html":{}}}],["pr",{"_index":200,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/FilterListContributorsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/UserListStatsService.html":{}}}],["pr!'})@column('text",{"_index":2300,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":1470,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":3565,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr\".\"updated_at",{"_index":3556,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr.\"author_login",{"_index":218,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr.\"repo_id",{"_index":204,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr_additions",{"_index":2054,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_author_login",{"_index":2055,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_base_label",{"_index":2056,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_base_ref",{"_index":2057,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_changed_files",{"_index":2058,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_closed_at",{"_index":2059,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_comments",{"_index":2060,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_commits",{"_index":2061,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_created_at",{"_index":2062,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_deletions",{"_index":2063,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_head_label",{"_index":2064,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_head_ref",{"_index":2065,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_draft",{"_index":2066,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_merged",{"_index":2067,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_rebaseable",{"_index":2068,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_mergeable_state",{"_index":2069,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_merged_at",{"_index":2070,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_number",{"_index":2071,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["pr_state",{"_index":2072,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_title",{"_index":2073,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_updated_at",{"_index":2074,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_velocity",{"_index":2749,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["preferences",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["prefs.dto",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefs.dto.ts",{"_index":4505,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:11",{"_index":4509,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":4511,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:27",{"_index":4513,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prerequisites",{"_index":5653,"title":{},"body":{"index.html":{}}}],["present",{"_index":3477,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["pretty",{"_index":508,"title":{},"body":{"modules/AppModule.html":{}}}],["prev_days_start_date",{"_index":1101,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["prev_start_date",{"_index":6097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":5781,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1080,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{}}}],["previous_month",{"_index":3696,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previous_month_prs",{"_index":231,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previous_month_prs\".\"author_login",{"_index":232,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previously",{"_index":5724,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":3693,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":2226,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":2241,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":2227,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":2207,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["prid",{"_index":3617,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["primarycolumn",{"_index":1634,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1642,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":2036,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["primarycolumn(\"text",{"_index":2240,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1796,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1912,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1907,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":3529,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["private",{"_index":65,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["proceed",{"_index":5834,"title":{},"body":{"index.html":{}}}],["process",{"_index":6198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ci",{"_index":5972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":6046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":6128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":4401,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":4404,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":4399,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["processpizza",{"_index":3159,"title":{},"body":{"injectables/InsightsService.html":{}}}],["processpizza(item",{"_index":3175,"title":{},"body":{"injectables/InsightsService.html":{}}}],["product",{"_index":4512,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["production",{"_index":5784,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1449,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project')@apioperation({operationid",{"_index":5310,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project's",{"_index":5676,"title":{},"body":{"index.html":{}}}],["project'})@apibadrequestresponse({description",{"_index":5313,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@apiokresponse({type",{"_index":5331,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":1443,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project.dto",{"_index":55,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["project.dto.ts",{"_index":1192,"title":{},"body":{"classes/ContributionsByProjectDto.html":{}}}],["project.dto.ts:15",{"_index":1193,"title":{},"body":{"classes/ContributionsByProjectDto.html":{}}}],["project?'})@column({type",{"_index":2262,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["project_id",{"_index":190,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto",{"_index":58,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto.ts",{"_index":4444,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.dto.ts:15",{"_index":4445,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.dto.ts:24",{"_index":4447,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.entity",{"_index":46,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.entity.ts",{"_index":1745,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:16",{"_index":1749,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:28",{"_index":1751,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:40",{"_index":1753,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:52",{"_index":1747,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["promise",{"_index":77,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["promise.all",{"_index":3456,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":3305,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["promise.all(contributors",{"_index":5187,"title":{},"body":{"controllers/UserListController.html":{}}}],["promise.all(framepromises",{"_index":135,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["promise.all(notifications",{"_index":4948,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["promise.all(promises",{"_index":4773,"title":{},"body":{"controllers/UserFollowsController.html":{},"injectables/WorkspaceService.html":{}}}],["promise.all(repostoremoverequests",{"_index":5064,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":5074,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":5449,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promise.allsettled(listcontributors",{"_index":5165,"title":{},"body":{"controllers/UserListController.html":{}}}],["promises",{"_index":3920,"title":{},"body":{"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/WorkspaceService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1637,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["provide",{"_index":5674,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provided",{"_index":915,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":253,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}}}],["provides",{"_index":6138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prquery",{"_index":3563,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":907,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["prs.dto",{"_index":3659,"title":{},"body":{"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["prs.dto.ts",{"_index":1299,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"miscellaneous/enumerations.html":{}}}],["prs.dto.ts:15",{"_index":1304,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["prs_created",{"_index":1186,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["prs_reviewed",{"_index":1728,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["public",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FollowManyUsersDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{}}}],["publish",{"_index":5863,"title":{},"body":{"license.html":{}}}],["published",{"_index":2110,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["published_at",{"_index":2103,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull",{"_index":196,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"index.html":{}}}],["pull_request",{"_index":1472,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pull_request'})@column('text",{"_index":2302,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pull_request'})@isstring()@isin(['pull_request",{"_index":1473,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pull_request_github_events",{"_index":2101,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pull_request_github_events\".\"event_time",{"_index":3518,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pull_request_github_events.service",{"_index":4441,"title":{},"body":{"modules/TimescaleModule.html":{}}}],["pull_request_id",{"_index":2113,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull_requests",{"_index":94,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login",{"_index":95,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login\"=\"users\".\"login",{"_index":3678,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"repo_id",{"_index":97,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":3663,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"updated_at",{"_index":159,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests.author_login",{"_index":1188,"title":{},"body":{"injectables/ContributionService.html":{}}}],["pull_requests.created_at::date",{"_index":5286,"title":{},"body":{"injectables/UserListService.html":{}}}],["pull_requests_full_name",{"_index":3665,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":3666,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":3897,"title":{},"body":{"injectables/RepoService.html":{}}}],["pull_requests_velocity\".\"updated_at",{"_index":3898,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequest",{"_index":2104,"title":{},"body":{"entities/DbPullRequestReview.html":{},"injectables/PullRequestReviewService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":1263,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":1231,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestcontroller",{"_index":3420,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["pullrequestdescriptioncontroller",{"_index":3462,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["pullrequestdescriptionservice",{"_index":3469,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["pullrequestgithubeventsrepository",{"_index":3491,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pullrequestgithubeventsservice",{"_index":3486,"title":{"injectables/PullRequestGithubEventsService.html":{}},"body":{"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":3444,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":274,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":3598,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":3599,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":3439,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestrepository",{"_index":1142,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestreviewrepository",{"_index":3614,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["pullrequestreviewservice",{"_index":3445,"title":{"injectables/PullRequestReviewService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"overview.html":{}}}],["pullrequestservice",{"_index":1245,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":3447,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":3604,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":3605,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5888,"title":{},"body":{"license.html":{}}}],["put",{"_index":3972,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":3978,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":4016,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":4055,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":4103,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":3981,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":4019,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":4057,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":4106,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":4766,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put(\"/:username/follows",{"_index":4768,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3965,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4007,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4046,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4090,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3970,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4011,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4049,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4093,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4745,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:username/follows')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4749,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":3540,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["qb.andwhere(sql",{"_index":3807,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":3806,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":5790,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":2208,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["query",{"_index":1240,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["query(\"prev_days_start_date",{"_index":3740,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(\"range",{"_index":3739,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(new",{"_index":5177,"title":{},"body":{"controllers/UserListController.html":{}}}],["querybuilder",{"_index":82,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":4959,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"lower(users.login",{"_index":5292,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":4958,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":4911,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_lists.user_id",{"_index":5263,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(sql",{"_index":4922,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":1172,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getmany",{"_index":1173,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getone",{"_index":1024,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["querybuilder.getoneorfail",{"_index":4726,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":224,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.getrawone",{"_index":3582,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.innerjoin",{"_index":3904,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.innerjoin(\"users",{"_index":84,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.innerjoin(\"workspaces.members",{"_index":5605,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["querybuilder.leftjoin",{"_index":5284,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.limit(1",{"_index":3576,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":1020,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":2586,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":2712,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.select(\"distinct",{"_index":5296,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.setparameters",{"_index":3579,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":3210,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"baked_repo_id",{"_index":1051,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"code",{"_index":1326,"title":{},"body":{"injectables/CouponService.html":{}}}],["querybuilder.where(\"commit_author_id",{"_index":1052,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":1166,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":1567,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":1568,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":2713,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":2727,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":1022,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":3080,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"is_featured=true\").andwhere(\"is_public=true\").orderby(\"user_lists.updated_at",{"_index":5269,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":4131,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":4324,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":3901,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":3900,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":4581,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":4930,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_lists.user_id",{"_index":5267,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":5516,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"workspaces.id",{"_index":5604,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":4923,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(sql",{"_index":4921,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":1583,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":1602,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5836,"title":{},"body":{"index.html":{}}}],["range",{"_index":78,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["rangetype",{"_index":1300,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["rangetypeenum",{"_index":1301,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"miscellaneous/enumerations.html":{}}}],["rangetypeenum.recent",{"_index":1302,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{}}}],["rate",{"_index":6147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":6164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbody",{"_index":6052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbodyrequest",{"_index":4230,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["react",{"_index":4517,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":2343,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1778,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":4809,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction'})@apiparam({name",{"_index":4796,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":2338,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":2319,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":2314,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:102",{"_index":2324,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:110",{"_index":2331,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:118",{"_index":2320,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":2326,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":2325,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:49",{"_index":2332,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":2322,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":2317,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:81",{"_index":2329,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:85",{"_index":2318,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:94",{"_index":2328,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":2336,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":2323,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":2337,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":2330,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":2316,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction_users",{"_index":2341,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":4965,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":4966,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1777,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":2934,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":2422,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/variables.html":{}}}],["read_at",{"_index":2407,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1925,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readonly",{"_index":528,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{}}}],["rebaseable",{"_index":1955,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["receipient",{"_index":2272,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive",{"_index":6178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receive_collaboration",{"_index":4507,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["receive_product_updates",{"_index":4508,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["received",{"_index":2622,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":1266,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":4510,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":1385,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{}}}],["recipient_user_id",{"_index":1378,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation.controller",{"_index":5389,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":5466,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:27",{"_index":5479,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:43",{"_index":5475,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":5481,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommended",{"_index":5472,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":2644,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{}}}],["record'})@apiokresponse({type",{"_index":2600,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":4286,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":2020,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":938,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{}}}],["referencedcolumnname",{"_index":1660,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["refusing",{"_index":6210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":4918,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["register",{"_index":4433,"title":{},"body":{"injectables/TierService.html":{}}}],["registeras(\"api",{"_index":5962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":6034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"hacktoberfest",{"_index":6103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":6108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"pizza",{"_index":6119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":6124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"tier",{"_index":6220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":4428,"title":{},"body":{"injectables/TierService.html":{}}}],["registration",{"_index":4336,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["rejectunauthorized",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["release",{"_index":5649,"title":{},"body":{"index.html":{}}}],["relevantevents",{"_index":4239,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":4291,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":6165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":2688,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"properties.html":{}}}],["remove(id",{"_index":2707,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":2938,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":3954,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":4871,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":4901,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":3160,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":3177,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":3006,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":3043,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":3020,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":3057,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":3073,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":4975,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":4988,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":3112,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":3119,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":3022,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":4567,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":4576,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":4524,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":4562,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":4538,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":4689,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":4705,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["repeat",{"_index":1276,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["repo",{"_index":768,"title":{},"body":{"classes/BakeRepoDto.html":{},"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":3759,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo'})@apiparam({name",{"_index":3967,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo.contributions",{"_index":1724,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1706,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":3819,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.dto",{"_index":3123,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["repo.dto.ts",{"_index":766,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:11",{"_index":772,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:19",{"_index":779,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.entity",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCommits.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1613,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:15",{"_index":2448,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:20",{"_index":1628,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:22",{"_index":2451,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:27",{"_index":2466,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":2450,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:30",{"_index":1620,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:35",{"_index":2472,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":2447,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:38",{"_index":1630,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:42",{"_index":1623,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:43",{"_index":2469,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:46",{"_index":1901,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:53",{"_index":1898,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:63",{"_index":1895,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":2464,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:73",{"_index":1896,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:78",{"_index":2471,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":2355,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:81",{"_index":1900,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:86",{"_index":2468,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":3140,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":3139,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":5060,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":3905,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":2149,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":2140,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":2164,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":2155,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":2182,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":2173,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":2475,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":2467,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":2197,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":2188,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":3150,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":3110,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:11",{"_index":3115,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:18",{"_index":3118,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:36",{"_index":3120,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.workspaces",{"_index":2548,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repo/dtos/repo",{"_index":1410,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":4095,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["repo/entities/repo.entity",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":345,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":3728,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo_id",{"_index":192,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repo_name",{"_index":2075,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["repo_user_contributions",{"_index":2132,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["repocontributionscontroller",{"_index":1059,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["repocontroller",{"_index":3745,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{}}}],["repofilterfieldsenum",{"_index":3823,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":3587,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":3527,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["repoid",{"_index":80,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserListStatsService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":2787,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":1408,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{}}}],["repoinfo.id",{"_index":5059,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":275,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":1107,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":3820,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":2614,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":2720,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":3749,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repopageoptionsdto:37",{"_index":3835,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":3844,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":5762,"title":{},"body":{"index.html":{}}}],["repos",{"_index":202,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":205,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["repos\".\"updated_at",{"_index":3915,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":4610,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["repos'})@apibody({type",{"_index":5037,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":4096,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":5490,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:13",{"_index":5491,"title":{},"body":{"classes/UserRepoOptionsDto.html":{}}}],["repos.dto.ts:23",{"_index":5551,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":5549,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.entity",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"entities/DbWorkspace.html":{},"modules/WorkspaceModule.html":{}}}],["repos.entity.ts",{"_index":2544,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:30",{"_index":2547,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:38",{"_index":2550,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:45",{"_index":2553,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:55",{"_index":2545,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:65",{"_index":2551,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:75",{"_index":2546,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:83",{"_index":2549,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.entity.ts:91",{"_index":2552,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["repos.full_name",{"_index":3936,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos.id",{"_index":223,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoFilterService.html":{},"injectables/UserListStatsService.html":{}}}],["repos.module",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":5498,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":5499,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":5501,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:13",{"_index":5504,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":5508,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":5510,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":5507,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":5509,"title":{},"body":{"injectables/UserReposService.html":{}}}],["reposearchoptionsdto",{"_index":3753,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["reposervice",{"_index":3727,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"overview.html":{}}}],["repositories",{"_index":1467,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["repository",{"_index":20,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":3939,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["repostargazecontroller",{"_index":3986,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["repostargazerepository",{"_index":4151,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":4122,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":5068,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":5072,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":5056,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":5062,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":5061,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":4024,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["reposubmitrepository",{"_index":4316,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":5071,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repovotecontroller",{"_index":4061,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["repovoterepository",{"_index":5529,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5845,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1690,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":4233,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":4285,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4539,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":796,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":4529,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiparam({name",{"_index":2914,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/WorkspaceController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":4994,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":3590,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":3421,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:32",{"_index":3437,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:43",{"_index":3440,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:53",{"_index":3429,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:66",{"_index":3434,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["request.entity.ts",{"_index":1939,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:100",{"_index":2019,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:107",{"_index":2026,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:127",{"_index":2005,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:137",{"_index":1995,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:144",{"_index":1972,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:151",{"_index":1970,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:16",{"_index":1992,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:161",{"_index":1968,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:171",{"_index":1967,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:181",{"_index":1984,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:191",{"_index":1979,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:201",{"_index":2010,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:208",{"_index":2012,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:218",{"_index":2035,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:228",{"_index":2007,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:23",{"_index":2017,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1980,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:244",{"_index":1963,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:252",{"_index":1986,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:260",{"_index":1976,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:271",{"_index":1989,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:279",{"_index":1982,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:31",{"_index":2015,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:38",{"_index":2024,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:45",{"_index":1988,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:52",{"_index":2009,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:59",{"_index":2008,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:66",{"_index":2016,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:73",{"_index":2034,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:83",{"_index":2022,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:93",{"_index":2028,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":2744,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":3588,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1246,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":3620,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:109",{"_index":3647,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:174",{"_index":3641,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:21",{"_index":3633,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:228",{"_index":3649,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:266",{"_index":3643,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:285",{"_index":3639,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:29",{"_index":3634,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:323",{"_index":3645,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:35",{"_index":3657,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:361",{"_index":3653,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:47",{"_index":3656,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:60",{"_index":3635,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:76",{"_index":3637,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":6232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":2251,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":2252,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":2253,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":4530,"title":{},"body":{"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["requester",{"_index":4554,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester.role",{"_index":4556,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requestmethod",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":524,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":197,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requests'})@apibody({type",{"_index":4532,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":905,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["requests/dtos/create",{"_index":2814,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["requests/dtos/pull",{"_index":1247,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["requests/pull",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["require(\"node",{"_index":883,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":3714,"title":{},"body":{"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{}}}],["requires",{"_index":6205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reserved",{"_index":4496,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":249,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":6167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":6213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resources",{"_index":6140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resp.status",{"_index":3415,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["respond",{"_index":6175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":849,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"miscellaneous/variables.html":{}}}],["response.decorator",{"_index":1244,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["response.decorator.ts",{"_index":5939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.dto",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":4333,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:105",{"_index":4367,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:111",{"_index":4345,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:117",{"_index":4364,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:123",{"_index":4350,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:129",{"_index":4343,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:136",{"_index":4370,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":4379,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:143",{"_index":4354,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:149",{"_index":4339,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":4371,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":4347,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":4338,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":4361,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":4340,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":4375,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":4358,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":4360,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:69",{"_index":4355,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:75",{"_index":4334,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":4351,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:81",{"_index":4369,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:87",{"_index":4378,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:93",{"_index":4374,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:99",{"_index":4335,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":900,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":898,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2992,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["rest",{"_index":6136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":5859,"title":{},"body":{"license.html":{}}}],["results",{"_index":238,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.filter(boolean",{"_index":4775,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["results[index",{"_index":3927,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieves",{"_index":2629,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["return",{"_index":71,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":6160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returns",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["review",{"_index":2106,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["review.entity.ts",{"_index":2102,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:16",{"_index":2109,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:20",{"_index":2114,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:27",{"_index":2116,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:37",{"_index":2107,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:47",{"_index":2111,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:57",{"_index":2119,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:64",{"_index":2118,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.service",{"_index":3446,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["review.service.ts",{"_index":3610,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:13",{"_index":3616,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:7",{"_index":3613,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["reviewed",{"_index":1737,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["reviewer",{"_index":2115,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviewer_login",{"_index":2105,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviews",{"_index":3432,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["rights",{"_index":5861,"title":{},"body":{"license.html":{}}}],["ritadee",{"_index":2350,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["ritadee'})@isstring()@isoptional",{"_index":2976,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["role",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbWorkspaceMember.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/WorkspaceService.html":{}}}],["root",{"_index":6088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rounded",{"_index":2844,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":6141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row_num",{"_index":3515,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["rows",{"_index":3505,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["rsa:4096",{"_index":5708,"title":{},"body":{"index.html":{}}}],["rule",{"_index":5765,"title":{},"body":{"index.html":{}}}],["run",{"_index":5654,"title":{},"body":{"index.html":{}}}],["running",{"_index":5752,"title":{},"body":{"index.html":{}}}],["russian",{"_index":1349,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["rxjs",{"_index":3407,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["same",{"_index":5726,"title":{},"body":{"index.html":{}}}],["san",{"_index":4365,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":1482,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":1456,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":4482,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/ai",{"_index":1486,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/api.opensauced.pizza",{"_index":5787,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5926,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5930,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5928,"title":{},"body":{"properties.html":{}}}],["sauced/code",{"_index":6075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sauced/hot/pull/320",{"_index":1723,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1715,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":781,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1897,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":771,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":2792,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights.git",{"_index":1643,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights.git'})@column({type",{"_index":1616,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights/pull/1",{"_index":1481,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":2305,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":1478,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":2286,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":1399,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":1393,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["saucedopen",{"_index":4373,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4491,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauceduser",{"_index":1226,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbUserListContributor.html":{},"classes/NewMember.html":{}}}],["sauceduser'})@column({type",{"_index":2384,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["saucy",{"_index":550,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["saucy'})@isstring",{"_index":543,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["savedworkspace",{"_index":5611,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["savedworkspace.id",{"_index":5618,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["saving",{"_index":6156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema",{"_index":5827,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["script",{"_index":5741,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":5808,"title":{},"body":{"index.html":{}}}],["search",{"_index":2804,"title":{},"body":{"classes/FilteredUsersDto.html":{},"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{}}}],["searchallpullrequestcontributors",{"_index":1229,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":1230,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":3425,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":3451,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":3438,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1233,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["seconds](https://en.wikipedia.org/wiki/unix_time",{"_index":6169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretkey",{"_index":6125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":6225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":5697,"title":{},"body":{"index.html":{}}}],["see",{"_index":4427,"title":{},"body":{"injectables/TierService.html":{},"index.html":{}}}],["select",{"_index":91,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"author_login",{"_index":3689,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["select(\"count(distinct",{"_index":3867,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"current_month.author_login",{"_index":3686,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"distinct",{"_index":5299,"title":{},"body":{"injectables/UserListService.html":{}}}],["select(\"emoji_id",{"_index":4952,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"login",{"_index":1177,"title":{},"body":{"injectables/ContributionService.html":{}}}],["select(\"previous_month.author_login",{"_index":3694,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":1181,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["select(\"split_part(repos.full_name",{"_index":185,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"users.id",{"_index":3929,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"users.login",{"_index":87,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/UserListStatsService.html":{}}}],["select(['repo.id",{"_index":3873,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":3564,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char('${startdate}'::timestamp",{"_index":3573,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(this.hacktoberfestprdatecharbuilder(interval",{"_index":3571,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1922,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":21,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["self",{"_index":5703,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5867,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1883,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":6090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server.crt",{"_index":5701,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":5702,"title":{},"body":{"index.html":{}}}],["service",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{},"index.html":{}}}],["services.module",{"_index":2680,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/WorkspaceModule.html":{}}}],["services.module.ts",{"_index":252,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["services/user.service",{"_index":4545,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["session",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":4199,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":4198,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":4240,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/WorkspaceService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setcontact(\"open",{"_index":6073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription(markdowndescription",{"_index":6071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlicense(`the",{"_index":6077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settermsofservice(\"https://github.com/open",{"_index":6074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":5664,"title":{},"body":{"index.html":{}}}],["settings",{"_index":5687,"title":{},"body":{"index.html":{}}}],["settitle(`@open",{"_index":6070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion(`1",{"_index":6072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":5876,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1458,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":1454,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["short",{"_index":1849,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1826,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":6161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":1998,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1994,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["shows",{"_index":6173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sig",{"_index":4284,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":2041,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":2033,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["signature",{"_index":4287,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":5704,"title":{},"body":{"index.html":{}}}],["similar",{"_index":3504,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["singleline",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2751,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["snippet",{"_index":934,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["software",{"_index":5656,"title":{},"body":{"index.html":{},"license.html":{}}}],["solution",{"_index":3234,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["something",{"_index":6200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"index.html":{}}}],["source_branch",{"_index":1956,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":1379,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":1380,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1957,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1937,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":3577,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1917,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":3802,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests\".\"updated_at",{"_index":3804,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["spam_pull_requests.repo_id",{"_index":3801,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":3108,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1343,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["specific",{"_index":1029,"title":{},"body":{"classes/CommitsDto.html":{}}}],["specifications",{"_index":837,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["sponsors",{"_index":4348,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":1599,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/.../api",{"_index":5938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":5627,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../contributor",{"_index":5632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../datetimes.ts",{"_index":5951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db",{"_index":5942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generate",{"_index":5948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hacktoberfest.config.ts",{"_index":5952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":5628,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":5644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../most",{"_index":5634,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../openai.config.ts",{"_index":5953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":5629,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pizza.config.ts",{"_index":5954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pull",{"_index":5631,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":5633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5935,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":5958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tier.config.ts",{"_index":5959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../timescale.config.ts",{"_index":5945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":5635,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../workspace",{"_index":5637,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:284",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:118",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:136",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:149",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:180",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:194",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:213",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:232",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:250",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":758,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":4332,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["src/auth/dtos/user",{"_index":5450,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["src/auth/supabase.guard.ts",{"_index":4380,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":4383,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":4391,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":4389,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":4386,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":5936,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blogs/blog",{"_index":823,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["src/blogs/dtos/create",{"_index":1333,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["src/blogs/issue",{"_index":783,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{}}}],["src/common/constants/order",{"_index":5638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":5987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":2786,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["src/common/dtos/page",{"_index":3271,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":3268,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":3270,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":3269,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":3774,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{}}}],["src/common/middleware/database",{"_index":1570,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/common/middleware/http",{"_index":2978,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["src/common/services/api",{"_index":251,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":3295,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":3299,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":5995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/util/datetimes.ts",{"_index":6096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/util/swagger.ts",{"_index":6135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":5961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":5998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":6033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/hacktoberfest.config.ts",{"_index":6102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":6107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/pizza.config.ts",{"_index":6118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":6123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/tier.config.ts",{"_index":6219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/timescale.config.ts",{"_index":6022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":1679,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:104",{"_index":1716,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:112",{"_index":1707,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:28",{"_index":1701,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:39",{"_index":1708,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:50",{"_index":1687,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:57",{"_index":1705,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:67",{"_index":1697,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:77",{"_index":1713,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:84",{"_index":1699,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:94",{"_index":1683,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":1058,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":1136,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:15",{"_index":1143,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:25",{"_index":1146,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:47",{"_index":1151,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:91",{"_index":1149,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":1097,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/dtos/repo",{"_index":2387,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["src/contribution/entities/repo",{"_index":2122,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["src/contribution/repo",{"_index":3698,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["src/contributor/contributor",{"_index":1255,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":1228,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":1239,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":1293,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/coupon/coupon.module.ts",{"_index":1309,"title":{},"body":{"modules/CouponModule.html":{}}}],["src/coupon/coupon.service.ts",{"_index":1313,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:14",{"_index":1319,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:20",{"_index":1323,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:34",{"_index":1321,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:8",{"_index":1317,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/entities/coupon.entity.ts",{"_index":1759,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:16",{"_index":1761,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:26",{"_index":1762,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:33",{"_index":1765,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/customer/customer.entity.ts",{"_index":1767,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1769,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1771,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":1546,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":1550,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:14",{"_index":1560,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":1564,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":1562,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":1559,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":1555,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":2556,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":2564,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":2575,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":2578,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":2580,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":2582,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":2583,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1775,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1787,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1789,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1795,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:47",{"_index":1784,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:57",{"_index":1779,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:67",{"_index":1793,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:74",{"_index":1780,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:78",{"_index":1792,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":1375,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["src/endorsement/dto/update",{"_index":4453,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["src/endorsement/endorsement",{"_index":2731,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":2589,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":2623,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:123",{"_index":2626,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:138",{"_index":2609,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":2602,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":2616,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":2613,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":2619,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":2632,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":2678,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":2683,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:11",{"_index":2690,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:110",{"_index":2706,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:124",{"_index":2708,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:18",{"_index":2692,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:22",{"_index":2694,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:26",{"_index":2695,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:37",{"_index":2697,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:48",{"_index":2699,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:61",{"_index":2701,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:77",{"_index":2702,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:91",{"_index":2704,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1800,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1803,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:22",{"_index":1802,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:30",{"_index":1805,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:38",{"_index":1806,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:45",{"_index":1809,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:52",{"_index":1811,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:62",{"_index":1813,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:72",{"_index":1801,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/generate",{"_index":6048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":2848,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:32",{"_index":2854,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":2857,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":2894,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":2340,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["src/highlight/entities/user",{"_index":2354,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":2897,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:106",{"_index":2935,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:117",{"_index":2929,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:35",{"_index":2926,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:46",{"_index":2919,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:61",{"_index":2915,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:79",{"_index":2939,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:93",{"_index":2923,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2973,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":1402,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{}}}],["src/insight/dtos/insight",{"_index":3098,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":4456,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["src/insight/entities/insight",{"_index":1862,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1823,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:104",{"_index":1830,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:108",{"_index":1843,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:112",{"_index":1859,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:116",{"_index":1848,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:33",{"_index":1832,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:43",{"_index":1845,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:50",{"_index":1838,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:57",{"_index":1835,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:64",{"_index":1837,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:74",{"_index":1852,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:84",{"_index":1828,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:94",{"_index":1855,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":3052,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{}}}],["src/insight/insight.controller.ts",{"_index":3003,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:36",{"_index":3019,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:47",{"_index":3011,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:63",{"_index":3025,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":3146,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":3154,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:100",{"_index":3180,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:104",{"_index":3178,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:108",{"_index":3169,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:147",{"_index":3171,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:15",{"_index":3163,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":3167,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:30",{"_index":3176,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:47",{"_index":3172,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:67",{"_index":3174,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:87",{"_index":3166,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":4971,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["src/issues/dtos/create",{"_index":1423,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["src/issues/issue",{"_index":3214,"title":{},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{}}}],["src/log/custom",{"_index":1509,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/log/dtos/create",{"_index":1430,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/log/log.entity.ts",{"_index":1904,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:12",{"_index":1910,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1909,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1906,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1908,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1905,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":3241,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":3245,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:14",{"_index":3251,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":3248,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":5645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/open",{"_index":869,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{}}}],["src/pizza/commit",{"_index":1002,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["src/pizza/commits.service.ts",{"_index":1034,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:11",{"_index":1039,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:18",{"_index":1041,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:24",{"_index":1043,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:37",{"_index":1045,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:50",{"_index":1047,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/dtos/baked",{"_index":765,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts",{"_index":994,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts:11",{"_index":999,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commits.dto.ts",{"_index":1026,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/dtos/commits.dto.ts:11",{"_index":1031,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/entities/baked",{"_index":1612,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["src/pizza/entities/commit_authors.entity.ts",{"_index":1644,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:20",{"_index":1650,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:28",{"_index":1647,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:32",{"_index":1649,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commits.entity.ts",{"_index":1652,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:21",{"_index":1673,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:31",{"_index":1672,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:41",{"_index":1671,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:51",{"_index":1665,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:59",{"_index":1661,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:69",{"_index":1669,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:77",{"_index":1667,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/pizza",{"_index":3307,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["src/pull",{"_index":904,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":3808,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":2133,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:27",{"_index":2139,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:35",{"_index":2146,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:43",{"_index":2142,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:53",{"_index":2135,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":2143,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:70",{"_index":2136,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:78",{"_index":2145,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:86",{"_index":2141,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":2150,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:27",{"_index":2154,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:35",{"_index":2161,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:43",{"_index":2157,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:53",{"_index":2152,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":2158,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:70",{"_index":2153,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:78",{"_index":2160,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:86",{"_index":2156,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":2165,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:27",{"_index":2170,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:35",{"_index":2179,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":2175,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:50",{"_index":2172,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:60",{"_index":2168,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":2176,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:77",{"_index":2169,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:85",{"_index":2178,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:93",{"_index":2174,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":2183,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:27",{"_index":2187,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:35",{"_index":2194,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:43",{"_index":2190,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:53",{"_index":2185,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":2191,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:70",{"_index":2186,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:78",{"_index":2193,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:86",{"_index":2189,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":3746,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:23",{"_index":3756,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":3760,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:45",{"_index":3751,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:56",{"_index":3754,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":3818,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":3836,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:157",{"_index":3858,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":3843,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:26",{"_index":3861,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:285",{"_index":3851,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:299",{"_index":3852,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:313",{"_index":3849,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:347",{"_index":3850,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:41",{"_index":3847,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:418",{"_index":3856,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:448",{"_index":3854,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:66",{"_index":3846,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":3940,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["src/star/star.module.ts",{"_index":4115,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":4117,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:13",{"_index":4123,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":4127,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":4125,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":4121,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":3987,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":4144,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":4146,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":4152,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":4156,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":4154,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":4150,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":4222,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":4169,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":4171,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":4180,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":4176,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":4178,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":4174,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":4025,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["src/submit/submit.module.ts",{"_index":4309,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":4311,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:13",{"_index":4317,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":4321,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":4319,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":4315,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":2198,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["src/tier/tier.module.ts",{"_index":4414,"title":{},"body":{"modules/TierModule.html":{}}}],["src/tier/tier.service.ts",{"_index":4416,"title":{},"body":{"injectables/TierService.html":{}}}],["src/tier/tier.service.ts:11",{"_index":4421,"title":{},"body":{"injectables/TierService.html":{}}}],["src/tier/tier.service.ts:7",{"_index":4418,"title":{},"body":{"injectables/TierService.html":{}}}],["src/timescale/entities/pull_request_github_event.ts",{"_index":2052,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:106",{"_index":2079,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:116",{"_index":2086,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:126",{"_index":2083,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:136",{"_index":2095,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:146",{"_index":2099,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:15",{"_index":2077,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:154",{"_index":2084,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:162",{"_index":2078,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:170",{"_index":2087,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:178",{"_index":2082,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:189",{"_index":2100,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:197",{"_index":2085,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:23",{"_index":2096,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:30",{"_index":2097,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:37",{"_index":2090,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:44",{"_index":2091,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:51",{"_index":2094,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:58",{"_index":2092,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:65",{"_index":2098,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:75",{"_index":2088,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:85",{"_index":2080,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:92",{"_index":2089,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:99",{"_index":2081,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/pull_request_github_events.service.ts",{"_index":3487,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:11",{"_index":3490,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:17",{"_index":3492,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:23",{"_index":3494,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/timescale.module.ts",{"_index":4440,"title":{},"body":{"modules/TimescaleModule.html":{}}}],["src/user",{"_index":6,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/DbTimezone.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/apply",{"_index":535,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["src/user/dtos/contributor",{"_index":1298,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/create",{"_index":1437,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["src/user/dtos/filtered",{"_index":2800,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["src/user/dtos/follow",{"_index":2809,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["src/user/dtos/top",{"_index":4449,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["src/user/dtos/update",{"_index":4466,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["src/user/entities/filtered",{"_index":1816,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["src/user/entities/top",{"_index":2247,"title":{},"body":{"classes/DbTopUser.html":{}}}],["src/user/entities/user",{"_index":2248,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":4519,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{}}}],["src/user/user.controller.ts",{"_index":4590,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:104",{"_index":4611,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:121",{"_index":4607,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:136",{"_index":4630,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:147",{"_index":4633,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:44",{"_index":4626,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:56",{"_index":4621,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":4616,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":4602,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":5381,"title":{},"body":{"modules/UserModule.html":{}}}],["src/vote/repo",{"_index":4062,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["src/vote/vote.module.ts",{"_index":5521,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":5523,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:13",{"_index":5530,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":5533,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":5537,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":5532,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":5528,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":5535,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/workspace/dtos/create",{"_index":1493,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{}}}],["src/workspace/entities/workspace",{"_index":2503,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"miscellaneous/enumerations.html":{}}}],["src/workspace/entities/workspace.entity.ts",{"_index":2476,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:31",{"_index":2484,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:41",{"_index":2478,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:51",{"_index":2500,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:61",{"_index":2479,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:71",{"_index":2493,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:81",{"_index":2481,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:85",{"_index":2490,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:89",{"_index":2496,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:93",{"_index":2499,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/entities/workspace.entity.ts:97",{"_index":2487,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["src/workspace/workspace.controller.ts",{"_index":5553,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:36",{"_index":5567,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:52",{"_index":5559,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:66",{"_index":5562,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.module.ts",{"_index":5583,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["src/workspace/workspace.service.ts",{"_index":5585,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:13",{"_index":5590,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:22",{"_index":5592,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:28",{"_index":5600,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:42",{"_index":5599,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:55",{"_index":5594,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:86",{"_index":5597,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["ssl",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stack",{"_index":1524,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":2171,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["standard",{"_index":2781,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["star",{"_index":2151,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["star'})@apiokresponse({description",{"_index":3950,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star'})@apiparam({name",{"_index":3955,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":4116,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":3941,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:100",{"_index":3956,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:119",{"_index":3959,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:36",{"_index":3963,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:57",{"_index":3968,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:76",{"_index":3971,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":3975,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":4119,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":4126,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":4133,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":4134,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":2134,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{}}}],["stargaze.controller",{"_index":4145,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":3988,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:103",{"_index":3999,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":4002,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:36",{"_index":4005,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:57",{"_index":4009,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:79",{"_index":4012,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":4014,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":4148,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":4155,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists",{"_index":4161,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":4162,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":277,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":3992,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":4006,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":3993,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":4010,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":3882,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":3830,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":4013,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"overview.html":{}}}],["starmodule",{"_index":276,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":3945,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":3979,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":3964,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":3946,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":3969,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":3962,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["stars",{"_index":3824,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":3831,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":3974,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"overview.html":{}}}],["start",{"_index":959,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":5751,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":3654,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_date}'::timestamp",{"_index":3697,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_range",{"_index":3651,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["startdate",{"_index":156,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["startdate}'::timestamp",{"_index":160,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["started",{"_index":5647,"title":{"index.html":{},"license.html":{}},"body":{"miscellaneous/variables.html":{}}}],["starting",{"_index":3548,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["starts",{"_index":6091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starttime",{"_index":2990,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stat.service",{"_index":5204,"title":{},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["stat.service.ts",{"_index":9,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["stat.service.ts:191",{"_index":5371,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:206",{"_index":5367,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:221",{"_index":5376,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:236",{"_index":5369,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:27",{"_index":5354,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:312",{"_index":5373,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:33",{"_index":5361,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:363",{"_index":5365,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:39",{"_index":5375,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:402",{"_index":5356,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:432",{"_index":5360,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:462",{"_index":5358,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:82",{"_index":5363,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["state",{"_index":1958,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["static",{"_index":5818,"title":{},"body":{"index.html":{}}}],["stats",{"_index":5330,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller",{"_index":5205,"title":{},"body":{"modules/UserListModule.html":{}}}],["stats.controller.ts",{"_index":5303,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:105",{"_index":5324,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:40",{"_index":5338,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:56",{"_index":5326,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:73",{"_index":5315,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:89",{"_index":5333,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.entity",{"_index":32,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["stats.entity.ts",{"_index":2395,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:15",{"_index":2399,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:27",{"_index":2397,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:39",{"_index":2400,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:51",{"_index":2401,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:63",{"_index":2398,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:75",{"_index":2396,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["status",{"_index":2209,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":2994,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"controllers/PizzaOvenController.html":{}}}],["statusmessage",{"_index":2995,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":5668,"title":{},"body":{"index.html":{}}}],["stood",{"_index":5738,"title":{},"body":{"index.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apiparam({name",{"_index":5103,"title":{},"body":{"controllers/UserListController.html":{}}}],["string'})@apiquery({name",{"_index":5314,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["string'})@column({type",{"_index":1742,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["string'})@minlength(3)@type(undefined",{"_index":2805,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["string'})@primarycolumn({type",{"_index":1760,"title":{},"body":{"entities/DbCoupon.html":{}}}],["string(id",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(major(\"1.8.0",{"_index":6062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_codename",{"_index":5964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.hacktoberfest_year",{"_index":6105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":6110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":6117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":6112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_host",{"_index":6120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_port",{"_index":6121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":6134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":6132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":6126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":6130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":6127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.tier_plan_free",{"_index":6222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":6000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":6014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_timescale",{"_index":6024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":6008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":6019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_timescale",{"_index":6030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":6001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":6015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_timescale",{"_index":6025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":6006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":6018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_timescale",{"_index":6029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":6003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":6016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_timescale",{"_index":6026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":6011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":6020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_timescale",{"_index":6032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":6004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":6017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_timescale",{"_index":6027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":1579,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":1596,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1338,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":2834,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":4182,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":4300,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":4170,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":4295,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":761,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":1558,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":728,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":732,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":756,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":646,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":278,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":4203,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":4221,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":279,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":5825,"title":{},"body":{"index.html":{}}}],["structured",{"_index":5922,"title":{},"body":{"properties.html":{}}}],["style",{"_index":2843,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["styles",{"_index":5789,"title":{},"body":{"index.html":{}}}],["sub",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":2239,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":2223,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":6044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":4292,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":4293,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":5712,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5872,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5865,"title":{},"body":{"license.html":{}}}],["submission",{"_index":2167,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{}}}],["submission'})@apiokresponse({description",{"_index":4034,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submission'})@apiparam({name",{"_index":4036,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":3881,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{}}}],["submissionscount",{"_index":3829,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":4053,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{}}}],["submit.controller",{"_index":4310,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":4026,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:103",{"_index":4037,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":4040,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:36",{"_index":4044,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:57",{"_index":4047,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:79",{"_index":4050,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":4052,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":4313,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":4320,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":4328,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":4326,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":4327,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":280,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":4030,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":4045,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":4031,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":4048,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":4051,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"overview.html":{}}}],["submitted",{"_index":4043,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["subquery",{"_index":209,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder",{"_index":152,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder.innerjoin",{"_index":153,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerycount",{"_index":3841,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":3859,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":3525,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":3538,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribe",{"_index":4425,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribe(`org:${userid",{"_index":4434,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribers",{"_index":3826,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":2214,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":4263,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":4262,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":4265,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":4297,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":2199,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:101",{"_index":2222,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":2213,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":2217,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":2235,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":2234,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":2224,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":2237,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":2232,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":2225,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":2228,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":2230,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":2215,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":2218,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":2221,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":2220,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":4270,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":4257,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":4261,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":4260,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":4204,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":4205,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":4207,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:14",{"_index":4212,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":4214,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":4210,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":4259,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":4274,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":4272,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":4256,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":4236,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":6129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":4211,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":2238,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscriptionsessioncancelurl",{"_index":6133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":6131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5878,"title":{},"body":{"license.html":{}}}],["succeeds",{"_index":6177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success_url",{"_index":4194,"title":{},"body":{"injectables/StripeService.html":{}}}],["successfully",{"_index":5991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":846,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":958,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":925,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":3592,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":939,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.controller.ts:22",{"_index":945,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":946,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":2821,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:13",{"_index":2823,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":2825,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":2826,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":2824,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":2822,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":948,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":951,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:10",{"_index":956,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":955,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":953,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suite",{"_index":5753,"title":{},"body":{"index.html":{}}}],["summarize",{"_index":851,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["summary.controller",{"_index":821,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.controller.ts",{"_index":784,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.controller.ts:22",{"_index":797,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.dto",{"_index":805,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.dto.ts",{"_index":1334,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:13",{"_index":1355,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:23",{"_index":1357,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:32",{"_index":1363,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:42",{"_index":1352,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:49",{"_index":1340,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:56",{"_index":1339,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:63",{"_index":1428,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["summary.module",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["summary.module.ts",{"_index":819,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service",{"_index":807,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service.ts",{"_index":824,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:10",{"_index":834,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:20",{"_index":830,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["summary.service.ts:21",{"_index":3229,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:7",{"_index":828,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summarylength",{"_index":1337,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["supabase",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":763,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":874,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":5678,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":5679,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":5677,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":658,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":4396,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":662,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":4403,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":4400,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":4402,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":757,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"overview.html":{}}}],["supabaseurl",{"_index":4398,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1094,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":1535,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":4408,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":1542,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":1540,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":1538,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":4407,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":1541,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":5902,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":793,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["sure",{"_index":5802,"title":{},"body":{"index.html":{}}}],["svg",{"_index":5903,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":5799,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["swagger.ts",{"_index":5949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swagger.yaml",{"_index":6093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription",{"_index":5957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription(apidomain",{"_index":6055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":6080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":106,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["synchronize",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":894,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["systemmessage",{"_index":895,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":1200,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":6229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["tagged",{"_index":1466,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["tagged_repos",{"_index":2278,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["taggedrepos",{"_index":1455,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["tags",{"_index":2031,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["take",{"_index":3547,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["taken",{"_index":3231,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["target",{"_index":507,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/RepoService.html":{}}}],["target_branch",{"_index":1959,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1960,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target}.id",{"_index":3870,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1412,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["team'})@column({type",{"_index":1844,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":1406,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["ted",{"_index":5931,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":879,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["tense",{"_index":3232,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":972,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":3593,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":967,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test.suggestion.controller.ts:22",{"_index":973,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":5763,"title":{},"body":{"index.html":{}}}],["tests",{"_index":5754,"title":{},"body":{"index.html":{}}}],["testyou",{"_index":5760,"title":{},"body":{"index.html":{}}}],["text",{"_index":964,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":2046,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss'})@column('text",{"_index":1971,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":2042,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":2021,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":5034,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":4986,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apiokresponse({type",{"_index":3711,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbbakedrepo)@apiokresponse({type",{"_index":3328,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommitauthors)@apiokresponse({type",{"_index":3334,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommits)@apiokresponse({type",{"_index":3338,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":3706,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":2561,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":2612,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3436,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1237,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":3750,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":2918,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":2922,"title":{},"body":{"controllers/HighlightController.html":{}}}],["them'})@apipaginatedresponse(dbuserorganization)@apiokresponse({type",{"_index":4605,"title":{},"body":{"controllers/UserController.html":{}}}],["there's",{"_index":5614,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this._stripe",{"_index":4181,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":5442,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.allcontributionscount",{"_index":1095,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["this.applyactivecontributorsfilter(activecountquerybuilder",{"_index":163,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(ctebuilder",{"_index":112,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(subquerybuilder",{"_index":155,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(alumnicountquerybuilder",{"_index":173,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(ctebuilder",{"_index":116,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(subquerybuilder",{"_index":158,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(ctebuilder",{"_index":114,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(newcountquerybuilder",{"_index":168,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(subquerybuilder",{"_index":157,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.bakedreporepository.createquerybuilder(\"baked_repos",{"_index":3409,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.basefilterquerybuilder",{"_index":3928,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basefilterquerybuilder(startdate",{"_index":3912,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":83,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["this.baseuserquerybuilder",{"_index":5298,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.blogsummaryservice.generateblogsummary(genereateblogsummarydto",{"_index":813,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":926,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":950,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":976,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.commitauthorservice.findallcommitauthors(pageoptionsdto",{"_index":3376,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorservice.findcommitauthorbyid(id",{"_index":3371,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorsrepository.createquerybuilder(\"commit_authors",{"_index":1019,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["this.commitsrepository.createquerybuilder(\"commits",{"_index":1050,"title":{},"body":{"injectables/CommitsService.html":{}}}],["this.commitsservice.findallcommitsbybakedrepoid(pageoptionsdto",{"_index":3382,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findallcommitsbycommitauthorid(pageoptionsdto",{"_index":3385,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findcommitbyid(id",{"_index":3379,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":2740,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":2878,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":2880,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":2893,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":2885,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":2889,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":2891,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":2887,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":2883,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"hacktoberfest.year",{"_index":3546,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":2873,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":2875,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":888,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":892,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"pizza.host",{"_index":3411,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"pizza.port",{"_index":3412,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":4192,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":4197,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":4195,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":4289,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.configservice.get(\"tier.freeplan",{"_index":4432,"title":{},"body":{"injectables/TierService.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":1163,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":3734,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyrepoid(item.id",{"_index":3741,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyuserlogin(item.id",{"_index":3744,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.couponrepository.createquerybuilder(\"coupons\").withdeleted",{"_index":1325,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponrepository.softdelete(code",{"_index":1332,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponservice.findcoupon(applyusercoupondto.couponcode",{"_index":746,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":1566,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":1569,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":731,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":4249,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1210,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":2871,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":2879,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":2876,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":2585,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":2572,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":2710,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":2723,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":2711,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":2728,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":2647,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":2650,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":2668,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":4679,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":2670,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":4682,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":2653,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":2657,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":2661,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":2664,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":2673,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":3670,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findcontributionsintimeframehelper(framestartdate.toisostring",{"_index":139,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.findcontributorcategoriesintimeframehelper(framestartdate.toisostring",{"_index":134,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":980,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":860,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(startdate",{"_index":3685,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getdateframes(range",{"_index":130,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.getvotequery(repoid",{"_index":5541,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hacktoberfestfilterquerybuilder(range",{"_index":3911,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.hasnextpage",{"_index":3285,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":3284,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":2870,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":2892,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":2884,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":2888,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":2890,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":2886,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":2882,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":3079,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.findone",{"_index":3084,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save",{"_index":3197,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":3081,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":3083,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":3082,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":5015,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":5010,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":5005,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":5006,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":5021,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":5029,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":5027,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":3138,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":3141,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":3182,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":3194,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":3200,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":3199,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":5073,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":5049,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":5063,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight(userid",{"_index":5046,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":5042,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallfeatured(pageoptionsdto",{"_index":3041,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":3039,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":5003,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.findonebyidanduserid(id",{"_index":3044,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":3050,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":5050,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.issuesummaryservice.generateissuesummary(generateissuesummarydto",{"_index":3223,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["this.itemcount",{"_index":3281,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2784,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":1600,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":1610,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":1606,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":1605,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`unable",{"_index":4436,"title":{},"body":{"injectables/TierService.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2996,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":1603,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":4281,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":3001,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":1609,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2999,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":1608,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":3255,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":3256,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":1537,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":1539,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":4296,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":4303,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":5434,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":2872,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":2874,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1211,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":859,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2783,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":3282,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":1021,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/WorkspaceService.html":{}}}],["this.pizzaovenservice.findallbakedrepos(pageoptionsdto",{"_index":3367,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.findbakedrepobyid(id",{"_index":3364,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakeoptionsinfo",{"_index":3360,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakerepoinfo",{"_index":3132,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":3544,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.processpizza(item",{"_index":3191,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":3472,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestgithubeventsrepository",{"_index":3510,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["this.pullrequestgithubeventsrepository.createquerybuilder(\"pull_request_github_events",{"_index":3497,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["this.pullrequestgithubeventsservice.findallbyprauthor(username",{"_index":4651,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestrepository",{"_index":1179,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":3660,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":3674,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestreviewrepository.find",{"_index":3619,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["this.pullrequestreviewservice.findallreviewsbyprid(id",{"_index":3461,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":3450,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":4648,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallchurncontributors(pageoptionsdto",{"_index":1288,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":1253,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":1286,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallrepeatcontributors(pageoptionsdto",{"_index":1290,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":3452,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":1284,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":3458,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":3566,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":3871,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":3918,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":3768,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":3770,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":3733,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":3737,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findorgsrecommendations(userid",{"_index":5488,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":5485,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":4158,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":4163,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":4164,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":4165,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":4130,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":4136,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":4137,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":4139,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":4323,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":4329,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":4330,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":4331,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":5539,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":5543,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":5544,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":5545,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":4022,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":4018,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":3984,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":3980,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":1604,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":4186,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":4185,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":729,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":734,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":4251,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":4290,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":4276,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":4059,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":4056,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":3879,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":3578,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":4216,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":4217,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":4580,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":4582,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":4584,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":4583,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":4552,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":4557,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":4565,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":4561,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":4709,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":4722,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":4724,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":4725,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":4767,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.findallfollowers(userid",{"_index":4943,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userfollowservice.findallfollowinglist(user.id",{"_index":4737,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":4765,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":4778,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":4962,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":4951,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":4967,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":4969,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":4970,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":4932,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":4907,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":4941,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":4950,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":4949,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2958,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":4835,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":4854,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":4850,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":4859,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2952,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":4653,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2955,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2967,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2964,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":4849,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":4839,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":4837,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":4858,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findtop(pageoptionsdto",{"_index":2970,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2960,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":4840,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userlistcontributorrepository.create",{"_index":5278,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.createquerybuilder(\"user_list_contributors",{"_index":70,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.findone",{"_index":5276,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.manager",{"_index":183,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.save(newuserlistcontributor",{"_index":5279,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.softdelete(userlistcontributorid",{"_index":5280,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.create",{"_index":5271,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.createquerybuilder(\"user_lists",{"_index":5258,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.save(newuserlist",{"_index":5274,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.softdelete(listid",{"_index":5283,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.update(listid",{"_index":5282,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistservice.adduserlist(userid",{"_index":5159,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(id",{"_index":5186,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(newlist.id",{"_index":5162,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlist(list.id",{"_index":5174,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlistcontributor(id",{"_index":5190,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallbyuserid(pageoptionsdto",{"_index":5154,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallfeatured(pageoptionsdto",{"_index":5156,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbyfilter(pageoptionsdto",{"_index":5179,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbylistid(pageoptionsdto",{"_index":5182,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findlistcontributorshighlightedrepos(pageoptionsdto",{"_index":5194,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findlistcontributorshighlights(pageoptionsdto",{"_index":5192,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(list.id",{"_index":5172,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(listid",{"_index":5168,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findpubliconebyid(id",{"_index":5167,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.getalltimezones",{"_index":5196,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.updateuserlist(list.id",{"_index":5169,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userliststatsservice.findalllistcontributorstats(pageoptionsdto",{"_index":5341,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsbyproject(id",{"_index":5345,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsintimeframe(options",{"_index":5344,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributorcategoriesbytimeframe(options",{"_index":5348,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findlistcontributorstatsbyproject(options",{"_index":5347,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":5424,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":5435,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":5448,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":4723,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(newhighlight.id",{"_index":4946,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.adduserhighlightreactionnotification(userid",{"_index":4968,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":5398,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userorganizationrepository.createquerybuilder(\"user_organizations",{"_index":5462,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["this.userorganizationservice.findallbyuserid(user.id",{"_index":4659,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userreporepository.create",{"_index":5514,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":5512,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":5515,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.createquerybuilder(\"user",{"_index":1175,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":5259,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userservice.applycoupon(userid",{"_index":747,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkadduser(user",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(userid",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findmanybyusernames(bulkfollow.usernames",{"_index":4769,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":5013,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":4555,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":740,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":4553,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2667,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":4661,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findusersbyfilter(pageoptionsdto",{"_index":4663,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":742,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":739,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":4278,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":737,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":4109,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":4102,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":4105,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.workspacememberrepository.create",{"_index":5617,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacememberrepository.save(callerisowner",{"_index":5619,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacememberrepository.save(newmember",{"_index":5623,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacerepository.create",{"_index":5608,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacerepository.createquerybuilder(\"workspaces",{"_index":5603,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacerepository.save(newworkspace",{"_index":5612,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacerepository.softdelete(workspaceid",{"_index":5624,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspaceservice.createworkspace(createworkspacedto",{"_index":5576,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.deleteworkspace(id",{"_index":5578,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.findallbyuserid(pageoptionsdto",{"_index":5574,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["thresholdpercent",{"_index":2877,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":814,"title":{},"body":{"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["tier",{"_index":4426,"title":{},"body":{"injectables/TierService.html":{}}}],["tier.service",{"_index":4415,"title":{},"body":{"modules/TierModule.html":{}}}],["tier/tier.module",{"_index":5384,"title":{},"body":{"modules/UserModule.html":{}}}],["tierconfig",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["tiermodule",{"_index":4409,"title":{"modules/TierModule.html":{}},"body":{"modules/TierModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tierservice",{"_index":4413,"title":{"injectables/TierService.html":{}},"body":{"modules/TierModule.html":{},"injectables/TierService.html":{},"overview.html":{}}}],["time",{"_index":1593,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["time_end",{"_index":177,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["time_start",{"_index":176,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe",{"_index":5343,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe'})@apiokresponse({type",{"_index":5311,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe.dto",{"_index":41,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.dto.ts",{"_index":1212,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:17",{"_index":1215,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:26",{"_index":1214,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.entity",{"_index":44,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.entity.ts",{"_index":1726,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:16",{"_index":1744,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:28",{"_index":1743,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:40",{"_index":1732,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:52",{"_index":1736,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:64",{"_index":1738,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:65",{"_index":1758,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:76",{"_index":1735,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:78",{"_index":1756,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:88",{"_index":1731,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["times",{"_index":3501,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["timescale",{"_index":6023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timescale.certificate",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.connection",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.database",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.host",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.password",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.port",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.username",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale/entities/pull_request_github_event",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["timescale/pull_request_github_events.service",{"_index":4635,"title":{},"body":{"controllers/UserController.html":{}}}],["timescale/timescale.module",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["timescaleconnection",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"modules/UserModule.html":{}}}],["timescalemodule",{"_index":281,"title":{"modules/TimescaleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TimescaleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["timestamp",{"_index":1689,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["timezone",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{},"classes/DbTimezone.html":{},"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListService.html":{},"classes/UserOnboardingDto.html":{}}}],["timezones",{"_index":5118,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["timezones'})@apiokresponse({type",{"_index":5116,"title":{},"body":{"controllers/UserListController.html":{}}}],["title",{"_index":855,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"injectables/IssueSummaryService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["tmodel",{"_index":5988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_date('${hacktoberfestyear",{"_index":3554,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["toclassonly",{"_index":2760,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["todatetime",{"_index":4237,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":4264,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":4266,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":4269,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":4268,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":4267,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":4271,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":4275,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":4273,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1935,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["todo",{"_index":6146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":2646,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{}}}],["token.guard",{"_index":2640,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":2732,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:5",{"_index":2735,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":2738,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":833,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":5776,"title":{},"body":{"index.html":{}}}],["top",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":3104,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":3798,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":3797,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":3799,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":2788,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["topprojectsdto",{"_index":56,"title":{"classes/TopProjectsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["toprepos",{"_index":4656,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":4448,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{}}}],["tort",{"_index":5897,"title":{},"body":{"license.html":{}}}],["total",{"_index":1684,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["total_contributions",{"_index":5212,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["transform",{"_index":2771,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{}}}],["transformer",{"_index":990,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":511,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":847,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":2233,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":2210,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":2211,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["true",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":4924,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@apinotfoundresponse({description",{"_index":3724,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["true})@column({type",{"_index":2297,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["true})@isarray()@isstring({each",{"_index":1468,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FollowManyUsersDto.html":{}}}],["true})@isboolean",{"_index":5550,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@isoptional",{"_index":2345,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{}}}],["true})@isstring({each",{"_index":2344,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@type(undefined",{"_index":1204,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["true})@type(undefined)@transform",{"_index":2759,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["true})@validatenested({each",{"_index":1203,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["try",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["tsdb",{"_index":6031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tsdbadmin",{"_index":6028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["turbo",{"_index":6115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":4372,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"classes/NewMember.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type')@apioperation({operationid",{"_index":5318,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["typealiases",{"_index":5932,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":881,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":22,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["typeorm/query",{"_index":3300,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":2860,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":1573,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{}}}],["typeormmodule.forfeature",{"_index":5206,"title":{},"body":{"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/WorkspaceModule.html":{}}}],["typeormmodule.forfeature([dbbakedrepo",{"_index":3392,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["typeormmodule.forfeature([dbcoupon",{"_index":1312,"title":{},"body":{"modules/CouponModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":1549,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":2577,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":2682,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":3153,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":3244,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":1296,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbpullrequestgithubevents",{"_index":4442,"title":{},"body":{"modules/TimescaleModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1063,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":4206,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2975,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":5500,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":5806,"title":{},"body":{"index.html":{}}}],["types:auto",{"_index":5813,"title":{},"body":{"index.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":6007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":2842,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/WorkspaceController.html":{}}}],["unauthorizedexception",{"_index":3026,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{}}}],["unauthorizedexception(\"you're",{"_index":5266,"title":{},"body":{"injectables/UserListService.html":{}}}],["undefined",{"_index":882,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":4801,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["undefined})@apiparam({name",{"_index":3433,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["undefined})@column({type",{"_index":1966,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbWorkspaceMember.html":{}}}],["undefined})@isarray",{"_index":4515,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":2758,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["undefined})@isarray()@type(undefined",{"_index":1487,"title":{},"body":{"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":1108,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":1117,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":3600,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(rangetypeenum)@isoptional",{"_index":1303,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":3821,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatsorderenum)@isoptional",{"_index":5210,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatstypeenum)@isoptional",{"_index":1213,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isoptional",{"_index":2831,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":988,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":4495,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["unfeaturehighlight",{"_index":2905,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":2936,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":3998,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":4021,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":3996,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":4743,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":4757,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":4759,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":1681,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":5772,"title":{},"body":{"index.html":{}}}],["unix",{"_index":6226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":799,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["unknown'})@column('text",{"_index":2093,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["unnecessary",{"_index":845,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unnest(user_highlights.tagged_repos",{"_index":5297,"title":{},"body":{"injectables/UserListService.html":{}}}],["unprocessableentityexception",{"_index":5039,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":4352,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":2260,"title":{},"body":{"entities/DbUserCollaboration.html":{},"index.html":{}}}],["update",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["updatecollaboratorsdto",{"_index":5142,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatecollaboratorsdto.contributors.map(async",{"_index":5184,"title":{},"body":{"controllers/UserListController.html":{}}}],["updated",{"_index":1853,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"index.html":{}}}],["updated_at",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1719,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["updatedinsightmember",{"_index":5023,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":5026,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":5025,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":4559,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":4452,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{}}}],["updatehighlightdto",{"_index":4828,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.highlight",{"_index":4842,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":4845,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.taggedrepos",{"_index":4848,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.title",{"_index":4841,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.type",{"_index":4844,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.url",{"_index":4843,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":4790,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":4824,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":3161,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":3179,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":3028,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightdto.is_public",{"_index":5052,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":5051,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":5069,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":5058,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto})@apiparam({name",{"_index":3024,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":5031,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":5036,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":3058,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":3075,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":4460,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto.access",{"_index":5024,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto})@apiparam({name",{"_index":4996,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterestsforuserprofile",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatelistdto",{"_index":5146,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.is_public",{"_index":5171,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.name",{"_index":5170,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser",{"_index":5090,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser(updatelistdto",{"_index":5143,"title":{},"body":{"controllers/UserListController.html":{}}}],["updateprofileforuser",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":736,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["updates",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserNotificationService.html":{}}}],["updateusercollaboration",{"_index":4525,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":4541,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":4465,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{}}}],["updateusercollaborationdto.status",{"_index":4560,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":616,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["updateuseremailpreferencesdto",{"_index":617,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["updateuserhighlight",{"_index":4872,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":4903,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserlist",{"_index":5226,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserlist(listid",{"_index":5255,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserprofileinterestsdto",{"_index":624,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["upsert",{"_index":4254,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":4208,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":4213,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url'})@column({type",{"_index":1807,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":6045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/delete",{"_index":6194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/get",{"_index":6183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/patch",{"_index":6192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/post",{"_index":6188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/200",{"_index":6181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/201",{"_index":6186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/204",{"_index":6190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/400",{"_index":6197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/401",{"_index":6204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/403",{"_index":6209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/404",{"_index":6212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/429",{"_index":6215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":2979,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"injectables/TierService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["use(request",{"_index":2980,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":850,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":6139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["useguards(endorsementtokenguard",{"_index":2643,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"controllers/WorkspaceController.html":{}}}],["useless",{"_index":4916,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":207,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/OpenAiService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"controllers/WorkspaceController.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5478,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4805,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/WorkspaceController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/WorkspaceController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":4536,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apibody({type",{"_index":4750,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["user'})@apiokresponse({type",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.collaborations",{"_index":2270,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.controller",{"_index":5385,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":4471,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:102",{"_index":4483,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":4488,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":4478,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":4481,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":4474,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":4500,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":4498,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":4476,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":4486,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":4480,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":4490,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":4485,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.entity",{"_index":2274,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"modules/UserModule.html":{}}}],["user.from_user_notifications",{"_index":2432,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.from_user_notifications)@joincolumn({name",{"_index":2408,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.highlights",{"_index":2307,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":4654,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1886,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":5484,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.lists",{"_index":2363,"title":{},"body":{"entities/DbUserList.html":{}}}],["user.organizations",{"_index":2446,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.organizations)@joincolumn({name",{"_index":2441,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.repotouserstargazers",{"_index":2148,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":2144,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":2163,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":2159,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":2181,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":2177,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":2196,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":2192,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":2265,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":4928,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.toprepos",{"_index":2474,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":2470,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.user_list_contributors",{"_index":2386,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user.user_list_contributors)@joincolumn({name",{"_index":2382,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user.workspaces",{"_index":2523,"title":{},"body":{"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{}}}],["user/collaborations",{"_index":4521,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/apply",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dtos/contributor",{"_index":3658,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["user/dtos/update",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":4666,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/highlights",{"_index":4781,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":4973,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":5392,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":5467,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/services/user.service",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user/user",{"_index":2944,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/user.module",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{}}}],["user_collaborations",{"_index":2275,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows.user_id=users.id",{"_index":4710,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_follows_deleted_at",{"_index":4719,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":2333,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["user_highlight_reactions.user_id=users.id",{"_index":4955,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights",{"_index":2311,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.created_at",{"_index":4927,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights.user_id",{"_index":4914,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights.user_id=users.id",{"_index":4908,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights_login",{"_index":4909,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights_name",{"_index":4912,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_id",{"_index":1868,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"injectables/WorkspaceService.html":{}}}],["user_id=:userid",{"_index":4915,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_list_contributor",{"_index":2374,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user_list_contributors",{"_index":212,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors\".\"user_id",{"_index":214,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.list_id='${listid",{"_index":154,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.user_id",{"_index":5295,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_list_contributors.user_id=users.id",{"_index":86,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors_login",{"_index":5289,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists",{"_index":2370,"title":{},"body":{"entities/DbUserList.html":{}}}],["user_lists.user_id=users.id",{"_index":5260,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists_login",{"_index":5261,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_login",{"_index":210,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_metadata",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_name",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["user_notifications",{"_index":2429,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user_notifications.user_id=users.id",{"_index":5425,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_organizations",{"_index":2445,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user_orgs",{"_index":3933,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.login",{"_index":3937,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.organization_id",{"_index":3934,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_repos",{"_index":2452,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":2473,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":4563,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":4564,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":4518,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["usercollaborationrepository",{"_index":4570,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":4546,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["usercontroller",{"_index":4589,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["userdata",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdetails",{"_index":4420,"title":{},"body":{"injectables/TierService.html":{}}}],["userendorsementcontroller",{"_index":4664,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["userfollowingcontroller",{"_index":4727,"title":{"controllers/UserFollowingController.html":{}},"body":{"controllers/UserFollowingController.html":{},"modules/UserModule.html":{}}}],["userfollowrepository",{"_index":4693,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":4738,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["userfollowservice",{"_index":4683,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":4857,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":4874,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":4876,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["userhighlightscontroller",{"_index":4779,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["userhighlightsservice",{"_index":2943,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["userid",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":3148,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["userinsightscontroller",{"_index":3147,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{}}}],["userinterests",{"_index":3919,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":3926,"title":{},"body":{"injectables/RepoService.html":{}}}],["userlistcontributorid",{"_index":5098,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["userlistcontributorrepository",{"_index":66,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatsorderenum",{"_index":33,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatsorderenum.commits",{"_index":5209,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["userlistcontributorstatstypeenum",{"_index":34,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatstypeenum.active",{"_index":111,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.all",{"_index":109,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.alumni",{"_index":115,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.new",{"_index":113,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontroller",{"_index":5075,"title":{"controllers/UserListController.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["userlistmodule",{"_index":282,"title":{"modules/UserListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserListModule.html":{},"modules.html":{},"overview.html":{}}}],["userlistmostactivecontributorsdto",{"_index":35,"title":{"classes/UserListMostActiveContributorsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["userlistrepository",{"_index":5229,"title":{},"body":{"injectables/UserListService.html":{}}}],["userlistservice",{"_index":5149,"title":{"injectables/UserListService.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"overview.html":{}}}],["userliststatscontroller",{"_index":5202,"title":{"controllers/UserListStatsController.html":{}},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["userliststatsservice",{"_index":61,"title":{"injectables/UserListStatsService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"overview.html":{}}}],["usermessage",{"_index":878,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":283,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":465,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserListContributor.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":4732,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":4760,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":4625,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":4619,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequestgithubevents)@apiokresponse({type",{"_index":4614,"title":{},"body":{"controllers/UserController.html":{}}}],["usernames",{"_index":2342,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":5416,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":5439,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":5438,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":5440,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":5436,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":5437,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":5382,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["usernotificationrepository",{"_index":5407,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":4691,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":2425,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":5443,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightcreated",{"_index":5446,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":5445,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":604,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{}}}],["userorganizationrepository",{"_index":5458,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["userorganizationservice",{"_index":4641,"title":{"injectables/UserOrganizationService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{},"overview.html":{}}}],["userprofile",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":5383,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["userrelations",{"_index":3848,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":3903,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":5489,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{}}}],["userreporepository",{"_index":5505,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":1141,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["userreposmodule",{"_index":284,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":5497,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"overview.html":{}}}],["userrole",{"_index":4277,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":85,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DbFilteredUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/EndorsementService.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"index.html":{}}}],["users\".\"id",{"_index":215,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users\".\"login",{"_index":96,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users'})@apiokresponse({type",{"_index":4629,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":4638,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["users.dto.ts",{"_index":2801,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:13",{"_index":2811,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["users.dto.ts:15",{"_index":2803,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:23",{"_index":2806,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:36",{"_index":2802,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:38",{"_index":2807,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":4637,"title":{},"body":{"controllers/UserController.html":{}}}],["users.entity.ts",{"_index":1817,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.entity.ts:14",{"_index":1821,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["users.entity.ts:8",{"_index":1822,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.id",{"_index":3935,"title":{},"body":{"injectables/RepoService.html":{}}}],["users.login",{"_index":1189,"title":{},"body":{"injectables/ContributionService.html":{}}}],["users.map(async",{"_index":4771,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["users.timezone",{"_index":5300,"title":{},"body":{"injectables/UserListService.html":{}}}],["users_to_repos_stargazers",{"_index":2147,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":2162,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":2180,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":2195,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":2463,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["userservice",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"overview.html":{}}}],["using",{"_index":1234,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["utc",{"_index":2782,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["utc:hh:mm:ss.l",{"_index":512,"title":{},"body":{"modules/AppModule.html":{}}}],["utf8",{"_index":6094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util/cli",{"_index":2988,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":4238,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1785,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1798,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@column",{"_index":2378,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["v4'})@column({type",{"_index":2321,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@isstring()@isoptional",{"_index":3596,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1874,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1786,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":745,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":4385,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":4390,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1208,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["validationpipe",{"_index":5147,"title":{},"body":{"controllers/UserListController.html":{}}}],["validator",{"_index":548,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/NewMember.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["validresults",{"_index":4774,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["value",{"_index":1103,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":5686,"title":{},"body":{"index.html":{}}}],["varchar",{"_index":2298,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["variables",{"_index":5671,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":1618,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceMember.html":{}}}],["verbose",{"_index":1515,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":1528,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["version",{"_index":4634,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["version(\"2",{"_index":4649,"title":{},"body":{"controllers/UserController.html":{}}}],["version('2')@get('/:username/prs')@apioperation({operationid",{"_index":4613,"title":{},"body":{"controllers/UserController.html":{}}}],["versioningtype.uri",{"_index":6060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videos",{"_index":5839,"title":{},"body":{"index.html":{}}}],["view",{"_index":3017,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{}}}],["view'})@isstring()@isin(['view",{"_index":4461,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["viewer",{"_index":2531,"title":{},"body":{"entities/DbWorkspaceMember.html":{},"miscellaneous/enumerations.html":{}}}],["virtual",{"_index":2334,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":1222,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{}}}],["visit",{"_index":5669,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5844,"title":{},"body":{"index.html":{}}}],["visualization",{"_index":5843,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5847,"title":{},"body":{"index.html":{}}}],["vitest",{"_index":5778,"title":{},"body":{"index.html":{}}}],["void",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserListStatsService.html":{}}}],["vortex",{"_index":1722,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":1682,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex@opensauced.pizza",{"_index":4346,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":2184,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["vote'})@apiokresponse({description",{"_index":4072,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote'})@apiparam({name",{"_index":4074,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":5522,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":4063,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:117",{"_index":4075,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:136",{"_index":4078,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:37",{"_index":4082,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:56",{"_index":4088,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:74",{"_index":4091,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:93",{"_index":4094,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":4098,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":5526,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":5536,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":4081,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["votedrepodto",{"_index":4086,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/VotedRepoDto.html":{}}}],["voteexists",{"_index":5540,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":5542,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":285,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":4068,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":4104,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":4089,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":4069,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":4092,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":3880,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":3828,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":4097,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["wait",{"_index":767,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["waitlist",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["waitlisted",{"_index":4359,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":1516,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":1530,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warranties",{"_index":5884,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5880,"title":{},"body":{"license.html":{}}}],["watch",{"_index":5755,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":3825,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":5759,"title":{},"body":{"index.html":{}}}],["web",{"_index":2850,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook.controller",{"_index":4224,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":4226,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":4235,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":4232,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":4225,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":6224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":4223,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":4288,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":4376,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":2430,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":2424,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":2715,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"insight_members.insight_id",{"_index":3086,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":3186,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"is_featured=true",{"_index":3211,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"login",{"_index":1178,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"lower(repos.full_name",{"_index":2718,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"now",{"_index":5288,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":4159,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":5547,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":4587,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.following_user_id",{"_index":4711,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_follows.user_id",{"_index":4713,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":4956,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":4910,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":5427,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["where(\"user_list_contributors.list_id",{"_index":5290,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_lists.id",{"_index":5262,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_orgs.user_id",{"_index":3938,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"users.timezone",{"_index":5301,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(`\"previous_month_prs\".\"author_login",{"_index":233,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`\"pull_request_github_events\".\"pr_author_login\"=:author",{"_index":3516,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["where(`\"user_list_contributors\".\"list_id",{"_index":216,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":3869,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`'${startdate}'::timestamp",{"_index":4926,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`(:topic",{"_index":3923,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":3667,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`pr.\"updated_at",{"_index":220,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`pull_requests.repo_id",{"_index":1190,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(`pull_requests.updated_at",{"_index":3690,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":2281,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["window",{"_index":6166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withdeleted",{"_index":4964,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["within",{"_index":5321,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["without",{"_index":1695,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"license.html":{}}}],["workflow",{"_index":5848,"title":{},"body":{"index.html":{}}}],["workspace",{"_index":1496,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"classes/NewMember.html":{},"controllers/WorkspaceController.html":{}}}],["workspace'})@apibadrequestresponse({description",{"_index":5561,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["workspace'})@column({type",{"_index":2492,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspace'})@isstring",{"_index":1501,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.controller",{"_index":5584,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["workspace.dto",{"_index":5571,"title":{},"body":{"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["workspace.dto.ts",{"_index":1494,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/NewMember.html":{}}}],["workspace.dto.ts:19",{"_index":1502,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.dto.ts:27",{"_index":1499,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.dto.ts:36",{"_index":1500,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.dto.ts:7",{"_index":3258,"title":{},"body":{"classes/NewMember.html":{}}}],["workspace.dto.ts:8",{"_index":3259,"title":{},"body":{"classes/NewMember.html":{}}}],["workspace.dto.ts:9",{"_index":3260,"title":{},"body":{"classes/NewMember.html":{}}}],["workspace.entity",{"_index":2517,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["workspace.members",{"_index":2519,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["workspace.members)@joincolumn({name",{"_index":2513,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["workspace.service",{"_index":5569,"title":{},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["workspace/entities/workspace",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{}}}],["workspace/entities/workspace.entity",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["workspace/workspace.module",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["workspace_id",{"_index":2505,"title":{},"body":{"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{},"injectables/WorkspaceService.html":{}}}],["workspace_insights",{"_index":2518,"title":{},"body":{"entities/DbWorkspaceInsight.html":{}}}],["workspace_members",{"_index":2532,"title":{},"body":{"entities/DbWorkspaceMember.html":{},"injectables/WorkspaceService.html":{}}}],["workspace_members.user_id",{"_index":5606,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["workspace_orgs",{"_index":2543,"title":{},"body":{"entities/DbWorkspaceOrg.html":{}}}],["workspace_repos",{"_index":2554,"title":{},"body":{"entities/DbWorkspaceRepo.html":{}}}],["workspacecontroller",{"_index":5552,"title":{"controllers/WorkspaceController.html":{}},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["workspaceid",{"_index":5598,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["workspaceinsight",{"_index":2485,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspaceinsight.workspace",{"_index":2486,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspaceinsights",{"_index":1857,"title":{},"body":{"entities/DbInsight.html":{}}}],["workspaceinsights.insight",{"_index":1858,"title":{},"body":{"entities/DbInsight.html":{}}}],["workspacemember",{"_index":2488,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspacemember.workspace",{"_index":2489,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspacememberrepository",{"_index":5591,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["workspacememberroleenum",{"_index":1503,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"entities/DbWorkspaceMember.html":{},"classes/NewMember.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/enumerations.html":{}}}],["workspacememberroleenum.owner",{"_index":2533,"title":{},"body":{"entities/DbWorkspaceMember.html":{},"injectables/WorkspaceService.html":{}}}],["workspacemodule",{"_index":286,"title":{"modules/WorkspaceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WorkspaceModule.html":{},"modules.html":{},"overview.html":{}}}],["workspaceorg",{"_index":2494,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspaceorg.workspace",{"_index":2495,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspacerepo",{"_index":2497,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspacerepo.workspace",{"_index":2498,"title":{},"body":{"entities/DbWorkspace.html":{}}}],["workspacerepository",{"_index":5589,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["workspaces",{"_index":1827,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbWorkspace.html":{},"controllers/WorkspaceController.html":{}}}],["workspaces'})@apibadrequestresponse({description",{"_index":5566,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["workspaceservice",{"_index":5568,"title":{"injectables/WorkspaceService.html":{}},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"overview.html":{}}}],["write",{"_index":5771,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["writefile(path.resolve(process.cwd",{"_index":6092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":5764,"title":{},"body":{"index.html":{}}}],["written",{"_index":840,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x",{"_index":6163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x509",{"_index":5706,"title":{},"body":{"index.html":{}}}],["xa",{"_index":2003,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":6087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yaml.stringify(document",{"_index":6086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yamlswaggerdoc",{"_index":6085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["year",{"_index":6104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":3553,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["yes",{"_index":1147,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["you'})@column({type",{"_index":2415,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":5684,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":5682,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":5683,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":5681,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5841,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":3555,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["zone",{"_index":1696,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"entities/DbWorkspace.html":{},"entities/DbWorkspaceInsight.html":{},"entities/DbWorkspaceMember.html":{},"entities/DbWorkspaceOrg.html":{},"entities/DbWorkspaceRepo.html":{}}}],["zoom",{"_index":248,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AllContributionsCount.html":{"url":"interfaces/AllContributionsCount.html","title":"interface - AllContributionsCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllContributionsCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            all_contributions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all_contributions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        all_contributions:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nAppModule -->\n\nTimescaleModule->AppModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nAppModule -->\n\nWorkspaceModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogSummaryModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            IssueSummaryModule\n                        \n                        \n                            LogModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            TimescaleModule\n                        \n                        \n                            UserListModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                        \n                            WorkspaceModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport {\n  ApiConfig,\n  DbApiConfig,\n  DbLoggingConfig,\n  EndpointConfig,\n  StripeConfig,\n  OpenAIConfig,\n  PizzaConfig,\n  HacktoberfestConfig,\n  TierConfig,\n  DbTimescaleConfig,\n} from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { DbBakedRepo } from \"./pizza/entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./pizza/entities/commit_authors.entity\";\nimport { DbCommits } from \"./pizza/entities/commits.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbPullRequestReview } from \"./pull-requests/entities/pull-request-review.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { DbUserOrganization } from \"./user/entities/user-organization.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\nimport { IssueSummaryModule } from \"./issues/issue-summary.module\";\nimport { BlogSummaryModule } from \"./blogs/issue-summary.module\";\nimport { PizzaOvenModule } from \"./pizza/pizza-oven.module\";\nimport { UserListModule } from \"./user-lists/user-list.module\";\nimport { CouponModule } from \"./coupon/coupon.module\";\nimport { DbUserList } from \"./user-lists/entities/user-list.entity\";\nimport { DbUserListContributor } from \"./user-lists/entities/user-list-contributor.entity\";\nimport { DbCoupon } from \"./coupon/entities/coupon.entity\";\nimport { LogModule } from \"./log/log.module\";\nimport { TimescaleModule } from \"./timescale/timescale.module\";\nimport { DbPullRequestGitHubEvents } from \"./timescale/entities/pull_request_github_event\";\nimport { DbWorkspace } from \"./workspace/entities/workspace.entity\";\nimport { DbWorkspaceMember } from \"./workspace/entities/workspace-member.entity\";\nimport { DbWorkspaceOrg } from \"./workspace/entities/workspace-org.entity\";\nimport { DbWorkspaceRepo } from \"./workspace/entities/workspace-repos.entity\";\nimport { DbWorkspaceInsight } from \"./workspace/entities/workspace-insights.entity\";\nimport { WorkspaceModule } from \"./workspace/workspace.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n        PizzaConfig,\n        HacktoberfestConfig,\n        TierConfig,\n        DbTimescaleConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPullRequestReview,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n            DbBakedRepo,\n            DbCommitAuthors,\n            DbCommits,\n            DbUserOrganization,\n            DbUserList,\n            DbUserListContributor,\n            DbCoupon,\n            DbWorkspace,\n            DbWorkspaceMember,\n            DbWorkspaceOrg,\n            DbWorkspaceRepo,\n            DbWorkspaceInsight,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"TimescaleConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          type: configService.get(\"db-timescale.connection\"),\n          host: configService.get(\"db-timescale.host\"),\n          port: configService.get(\"db-timescale.port\"),\n          username: configService.get(\"db-timescale.username\"),\n          password: configService.get(\"db-timescale.password\"),\n          database: configService.get(\"db-timescale.database\"),\n          autoLoadEntities: false,\n          entities: [DbPullRequestGitHubEvents],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-timescale.certificate\"),\n            rejectUnauthorized: false,\n          },\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    IssueSummaryModule,\n    BlogSummaryModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n    PizzaOvenModule,\n    UserListModule,\n    CouponModule,\n    LogModule,\n    TimescaleModule,\n    WorkspaceModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"TimescaleConnection\")\n    private readonly timescaleConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v2`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyUserCouponDto.html":{"url":"classes/ApplyUserCouponDto.html","title":"class - ApplyUserCouponDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyUserCouponDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/apply-user-coupon.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                couponCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        couponCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Coupon Code', type: String, example: 'saucy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/apply-user-coupon.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class ApplyUserCouponDto {\n  @ApiProperty({\n    description: \"Coupon Code\",\n    type: String,\n    example: \"saucy\",\n  })\n  @IsString()\n  couponCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyCouponForUser\n                            \n                            \n                                    Async\n                                deleteUserAccount\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyCouponForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyCouponForUser(userId: number, applyUserCouponDto: ApplyUserCouponDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/coupon')@ApiOperation({operationId: 'applyCouponForUser', summary: 'Applies a coupon for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to apply coupon for the user profile'})@ApiBody({type: ApplyUserCouponDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    applyUserCouponDto\n                                    \n                                                ApplyUserCouponDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserAccount(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/profile')@ApiOperation({operationId: 'deleteUserAccount', summary: 'Deletes the authenticated user's account'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to delete user account'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { UserService } from \"../user/services/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { ApplyUserCouponDto } from \"../user/dtos/apply-user-coupon.dto\";\nimport { CouponService } from \"../coupon/coupon.service\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n    private couponService: CouponService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/coupon\")\n  @ApiOperation({\n    operationId: \"applyCouponForUser\",\n    summary: \"Applies a coupon for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to apply coupon for the user profile\" })\n  @ApiBody({ type: ApplyUserCouponDto })\n  async applyCouponForUser(@UserId() userId: number, @Body() applyUserCouponDto: ApplyUserCouponDto): Promise {\n    // check for valid coupon\n    await this.couponService.findCoupon(applyUserCouponDto.couponCode);\n\n    await this.userService.applyCoupon(userId, applyUserCouponDto.couponCode);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Delete(\"/profile\")\n  @ApiOperation({\n    operationId: \"deleteUserAccount\",\n    summary: \"Deletes the authenticated user's account\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to delete user account\" })\n  async deleteUserAccount(@UserId() userId: number): Promise {\n    return this.userService.deleteUser(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCouponModule\n\nCouponModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\nimport { CouponModule } from \"../coupon/coupon.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { SupabaseGuard } from \"./supabase.guard\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule, CouponModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BakeRepoDto.html":{"url":"classes/BakeRepoDto.html","title":"class - BakeRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BakeRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/baked-repo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                url\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo clone URL', type: String, example: 'https://github.com/open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Option to wait for Pizza service to finish baking repo', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsString } from \"class-validator\";\n\nexport class BakeRepoDto {\n  @ApiProperty({\n    description: \"Repo clone URL\",\n    type: String,\n    example: \"https://github.com/open-sauced/insights\",\n  })\n  @IsString()\n  url: string;\n\n  @ApiProperty({\n    description: \"Option to wait for Pizza service to finish baking repo\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  wait: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogSummaryController.html":{"url":"controllers/BlogSummaryController.html","title":"controller - BlogSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blogs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                genereateBlogSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        genereateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    genereateBlogSummary(genereateBlogSummaryDto: CreateBlogSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateBlogSummary', summary: 'Generate a summary for a markdown supported blog'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateBlogSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/blogs/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genereateBlogSummaryDto\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\n\n@Controller(\"blogs\")\n@ApiTags(\"Blog summary service\")\nexport class BlogSummaryController {\n  constructor(private readonly blogSummaryService: BlogSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateBlogSummary\",\n    summary: \"Generate a summary for a markdown supported blog\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateBlogSummaryDto })\n  async genereateBlogSummary(@Body() genereateBlogSummaryDto: CreateBlogSummaryDto) {\n    const summary = await this.blogSummaryService.generateBlogSummary(genereateBlogSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogSummaryModule.html":{"url":"modules/BlogSummaryModule.html","title":"module - BlogSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_BlogSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blogs/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\nimport { BlogSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [BlogSummaryController],\n  providers: [BlogSummaryService],\n  exports: [BlogSummaryService],\n})\nexport class BlogSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogSummaryService.html":{"url":"injectables/BlogSummaryService.html","title":"injectable - BlogSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/blog-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBlogSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/blogs/blog-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBlogSummary(options: CreateBlogSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\n\n@Injectable()\nexport class BlogSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `I will generate a blog summary for a blog with the specifications mentioned below`,\n      `The summary should be written in the first person with a ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the blog.\",\n    ].join(\"\\n\");\n  }\n\n  async generateBlogSummary(options: CreateBlogSummaryDto) {\n    const content = `Blog Title: ${options.blogTitle}\\n\\nBlog Content: ${options.blogMarkdown}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollaboratorsDto.html":{"url":"classes/CollaboratorsDto.html","title":"class - CollaboratorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollaboratorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/collaborators.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor user IDs', isArray: true, type: 'integer', example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/collaborators.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray } from \"class-validator\";\n\nexport class CollaboratorsDto {\n  @ApiProperty({\n    description: \"An array of contributor user IDs\",\n    isArray: true,\n    type: \"integer\",\n    example: [42211, 81233],\n  })\n  @Type(() => Number)\n  @IsArray()\n  contributors: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitAuthorDto.html":{"url":"classes/CommitAuthorDto.html","title":"class - CommitAuthorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitAuthorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commit_authors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Public Commit Author Email', type: String, example: 'hello@opensauced.pizza'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commit_authors.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitAuthorDto {\n  @ApiProperty({\n    description: \"Public Commit Author Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsString()\n  author_email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitAuthorsService.html":{"url":"injectables/CommitAuthorsService.html","title":"injectable - CommitAuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitAuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commit-authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitAuthors\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitAuthorsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commit-authors.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitAuthorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\n\n@Injectable()\nexport class CommitAuthorsService {\n  constructor(\n    @InjectRepository(DbCommitAuthors, \"ApiConnection\")\n    private commitAuthorsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitAuthorsRepository.createQueryBuilder(\"commit_authors\");\n\n    return builder;\n  }\n\n  async findAllCommitAuthors(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitAuthorById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitsDto.html":{"url":"classes/CommitsDto.html","title":"class - CommitsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commits.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commit_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hash for a specific commit', type: String, example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commits.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitsDto {\n  @ApiProperty({\n    description: \"Hash for a specific commit\",\n    type: String,\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @IsString()\n  commit_hash: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitsService.html":{"url":"injectables/CommitsService.html","title":"injectable - CommitsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commits.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                findAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commits.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Injectable()\nexport class CommitsService {\n  constructor(\n    @InjectRepository(DbCommits, \"ApiConnection\")\n    private commitsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitsRepository.createQueryBuilder(\"commits\");\n\n    return builder;\n  }\n\n  async findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"baked_repo_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"commit_author_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution, DbUser, DbPullRequest], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageMetaDto.html":{"url":"classes/ContributionPageMetaDto.html","title":"class - ContributionPageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-pagemeta.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageMetaDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allContributionsCount\n                            \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters, allContributionsCount: number)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        allContributionsCount\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        allContributionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of all contributions', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"../../common/dtos/page-meta-parameters.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionPageMetaDto extends PageMetaDto {\n  @ApiProperty({\n    description: \"The number of all contributions\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly allContributionsCount: number;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters, allContributionsCount: number) {\n    super({ pageOptionsDto, itemCount });\n\n    this.allContributionsCount = allContributionsCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllByUserLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository, userRepository: Repository, pullRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(repoId: number, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserLogin(repoId: number, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserLogin(\n    repoId: number,\n    login: string,\n    range: number,\n    prev_days_start_date: number\n  ): Promise {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    queryBuilder\n      .select(\"login\")\n      .where(\"login = :login\", { login })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    const cteBuilder = this.pullRequestRepository\n      .createQueryBuilder(\"pull_requests\")\n      .select(\"pull_requests.author_login\", \"login\")\n      .addSelect(\"COALESCE(SUM(pull_requests.commits), 0)::INTEGER\", \"commits\")\n      .addSelect(\"COUNT(pull_requests.id)::INTEGER\", \"prs_created\")\n      .leftJoin(\"users\", \"users\", \"pull_requests.author_login = users.login\")\n      .where(`pull_requests.repo_id = ${repoId}`)\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsByProjectDto.html":{"url":"classes/ContributionsByProjectDto.html","title":"class - ContributionsByProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsByProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-by-project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-by-project.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsOptional } from \"class-validator\";\n\nexport class ContributionsByProjectDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsPageDto.html":{"url":"classes/ContributionsPageDto.html","title":"class - ContributionsPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionsPageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsTimeframeDto.html":{"url":"classes/ContributionsTimeframeDto.html","title":"class - ContributionsTimeframeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsTimeframeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-timeframe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsIn, IsInt, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { UserListContributorStatsTypeEnum } from \"./most-active-contributors.dto\";\n\nexport class ContributionsTimeframeDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Contributor.html":{"url":"classes/Contributor.html","title":"class - Contributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Contributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllChurnPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRepeatPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/churn')@ApiOperation({operationId: 'findAllChurnPullRequestContributors', summary: 'Gets all recent churned contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repeat')@ApiOperation({operationId: 'findAllRepeatPullRequestContributors', summary: 'Gets all recent repeat contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n\n  @Get(\"/churn\")\n  @ApiOperation({\n    operationId: \"findAllChurnPullRequestContributors\",\n    summary: \"Gets all recent churned contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllChurnPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllChurnContributors(pageOptionsDto);\n  }\n\n  @Get(\"/repeat\")\n  @ApiOperation({\n    operationId: \"findAllRepeatPullRequestContributors\",\n    summary: \"Gets all recent repeat contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRepeatPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRepeatContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorController } from \"./contributor.controller\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributorPullRequestsDto.html":{"url":"classes/ContributorPullRequestsDto.html","title":"class - ContributorPullRequestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributorPullRequestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/contributor-prs.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                rangeType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rangeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RangeTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : RangeTypeEnum.Recent\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RangeTypeEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(RangeTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/contributor-prs.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RangeTypeEnum {\n  All = \"all\",\n  Recent = \"recent\",\n}\n\nexport class ContributorPullRequestsDto extends PageOptionsDto {\n  @ApiPropertyOptional({ enum: RangeTypeEnum, enumName: \"OrderDirectionEnum\", default: RangeTypeEnum.Recent })\n  @IsEnum(RangeTypeEnum)\n  @IsOptional()\n  rangeType?: RangeTypeEnum = RangeTypeEnum.Recent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CouponModule.html":{"url":"modules/CouponModule.html","title":"module - CouponModule","body":"\n                   \n\n\n\n\n    Modules\n    CouponModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_providers\n\n\n\ncluster_CouponModule_exports\n\n\n\n\nCouponService \n\nCouponService \n\n\n\nCouponModule\n\nCouponModule\n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/coupon/coupon.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CouponService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CouponService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\nimport { CouponService } from \"./coupon.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCoupon], \"ApiConnection\")],\n  providers: [CouponService],\n  exports: [CouponService],\n})\nexport class CouponModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CouponService.html":{"url":"injectables/CouponService.html","title":"injectable - CouponService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CouponService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/coupon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteCoupon\n                            \n                            \n                                    Async\n                                findCoupon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(couponRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/coupon/coupon.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        couponRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\n\n@Injectable()\nexport class CouponService {\n  constructor(\n    @InjectRepository(DbCoupon, \"ApiConnection\")\n    private couponRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.couponRepository.createQueryBuilder(\"coupons\").withDeleted();\n\n    return builder;\n  }\n\n  async findCoupon(code: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"code = :code\", { code }).andWhere(`(expired_at IS NULL OR expired_at > now())`);\n\n    const entity = await queryBuilder.getOne();\n\n    if (!entity) {\n      throw new NotFoundException(\"The coupon does not exist\");\n    }\n\n    return entity;\n  }\n\n  async deleteCoupon(code: string) {\n    return this.couponRepository.softDelete(code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogSummaryDto.html":{"url":"classes/CreateBlogSummaryDto.html","title":"class - CreateBlogSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/dtos/create-blog-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blogMarkdown\n                            \n                            \n                                blogTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blogMarkdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Markdown', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blogTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateBlogSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Blog Title\",\n    type: String,\n  })\n  @IsString()\n  blogTitle: string;\n\n  @ApiProperty({\n    description: \"Blog Markdown\",\n    type: String,\n  })\n  @IsString()\n  blogMarkdown: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: 'integer', example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: 'integer', example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', type: 'integer', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: \"integer\",\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: \"integer\",\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    type: \"integer\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIssueSummaryDto.html":{"url":"classes/CreateIssueSummaryDto.html","title":"class - CreateIssueSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIssueSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/dtos/create-issue-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issueComments\n                            \n                            \n                                issueDescription\n                            \n                            \n                                issueTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        issueComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Comments', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Description', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateIssueSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Issue Title\",\n    type: String,\n  })\n  @IsString()\n  issueTitle: string;\n\n  @ApiProperty({\n    description: \"Issue Description\",\n    type: String,\n  })\n  @IsString()\n  issueDescription: string;\n\n  @ApiProperty({\n    description: \"Issue Comments\",\n    type: String,\n  })\n  @IsString()\n  issueComments: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                taggedRepos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taggedRepos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"pull_request\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight type', type: String, example: 'pull_request'})@IsString()@IsIn(['pull_request', 'blog_post', 'issue', 'milestone'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsDateString, IsIn, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n\n  @ApiProperty({\n    description: \"Highlight type\",\n    type: String,\n    example: \"pull_request\",\n  })\n  @IsString()\n  @IsIn([\"pull_request\", \"blog_post\", \"issue\", \"milestone\"])\n  public type = \"pull_request\";\n\n  @ApiProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public taggedRepos: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserListDto.html":{"url":"classes/CreateUserListDto.html","title":"class - CreateUserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor objects', isArray: true, example: undefined})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Name', type: String, example: 'My List'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWorkspaceDto.html":{"url":"classes/CreateWorkspaceDto.html","title":"class - CreateWorkspaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWorkspaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/dtos/create-workspace.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workspace description', type: String, example: 'A workspace for my OSS collaborators'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of new member objects', isArray: true, example: undefined})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workspace name', type: String, example: 'My Workspace'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { WorkspaceMemberRoleEnum } from \"../entities/workspace-member.entity\";\n\nexport class NewMember {\n  id: number;\n  login: string;\n  role: WorkspaceMemberRoleEnum;\n}\n\nexport class CreateWorkspaceDto {\n  @ApiProperty({\n    description: \"Workspace name\",\n    type: String,\n    example: \"My Workspace\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Workspace description\",\n    type: String,\n    example: \"A workspace for my OSS collaborators\",\n  })\n  @IsString()\n  description: string;\n\n  @ApiProperty({\n    description: \"An array of new member objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\", role: \"owner\" }],\n  })\n  @IsArray()\n  @Type(() => NewMember)\n  members: { id: number; login: string; role: WorkspaceMemberRoleEnum }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbBakedRepo.html":{"url":"entities/DbBakedRepo.html","title":"entity - DbBakedRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbBakedRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/baked-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clone_url\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clone_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository clone url', example: 'https://github.com/open-sauced/insights.git'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.baked_repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 12345678, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"baked_repos\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbBakedRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Baked repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository clone url\",\n    example: \"https://github.com/open-sauced/insights.git\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public clone_url: string;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 12345678,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public repo_id!: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.baked_repo)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommitAuthors.html":{"url":"entities/DbCommitAuthors.html","title":"entity - DbCommitAuthors","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommitAuthors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commit_authors.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commit_author_email\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.commit_author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"commit_authors\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommitAuthors extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public commit_author_email: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.commit_author)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommits.html":{"url":"entities/DbCommits.html","title":"entity - DbCommits","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commits.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                baked_repo\n                            \n                            \n                                    Public\n                                baked_repo_id\n                            \n                            \n                                    Public\n                                commit_author\n                            \n                            \n                                    Public\n                                commit_author_id\n                            \n                            \n                                    Public\n                                commit_date\n                            \n                            \n                                    Public\n                                commit_hash\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbBakedRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, baked_repo => baked_repo.commits)@JoinColumn({name: 'baked_repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repo identifier', example: 57568598, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommitAuthors\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, commit_author => commit_author.commits)@JoinColumn({name: 'commit_author_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 9876543, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Date for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Hash for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, JoinColumn, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbBakedRepo } from \"./baked-repo.entity\";\nimport { DbCommitAuthors } from \"./commit_authors.entity\";\n\n@Entity({\n  name: \"commits\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommits extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Hash for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_hash: string;\n\n  @ApiModelProperty({\n    description: \"Date for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_date: string;\n\n  @ApiModelProperty({\n    description: \"Baked repo identifier\",\n    example: 57568598,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public baked_repo_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbBakedRepo, (baked_repo) => baked_repo.commits)\n  @JoinColumn({\n    name: \"baked_repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public baked_repo!: DbBakedRepo;\n\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 9876543,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public commit_author_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbCommitAuthors, (commit_author) => commit_author.commits)\n  @JoinColumn({\n    name: \"commit_author_id\",\n    referencedColumnName: \"id\",\n  })\n  public commit_author!: DbCommitAuthors;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15, type: 'integer'})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:104\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionStatTimeframe.html":{"url":"entities/DbContributionStatTimeframe.html","title":"entity - DbContributionStatTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionStatTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionStatTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionsProjects.html":{"url":"entities/DbContributionsProjects.html","title":"entity - DbContributionsProjects","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionsProjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-projects.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributions\n                            \n                            \n                                org_id\n                            \n                            \n                                project_id\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The number of contributions associated with a org/repo', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        org_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The org name of the repo', example: 'open-sauced', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        project_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The project name of the repo', example: 'api', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ID of the associated repo in the OpenSauced API context', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionsProjects {\n  @ApiModelProperty({\n    description: \"The org name of the repo\",\n    example: \"open-sauced\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  org_id: string;\n\n  @ApiModelProperty({\n    description: \"The project name of the repo\",\n    example: \"api\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  project_id: string;\n\n  @ApiModelProperty({\n    description: \"The ID of the associated repo in the OpenSauced API context\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  repo_id: number;\n\n  @ApiModelProperty({\n    description: \"The number of contributions associated with a org/repo\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  contributions: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributorCategoryTimeframe.html":{"url":"entities/DbContributorCategoryTimeframe.html","title":"entity - DbContributorCategoryTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributorCategoryTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributors-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                all\n                            \n                            \n                                alumni\n                            \n                            \n                                new\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who contributed in current time frame and previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of all contributors (active, new, and alumni)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alumni\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who did not contribute in current time frame but did in the previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        new\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributorCategoryTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of all contributors (active, new, and alumni)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  all: number;\n\n  @ApiModelProperty({\n    description: \"Number of contributors who contributed in current time frame and previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  active: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  new: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who did not contribute in current time frame but did in the previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  alumni: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCoupon.html":{"url":"entities/DbCoupon.html","title":"entity - DbCoupon","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCoupon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/entities/coupon.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                expired_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Coupon identifier', example: 'saucy', type: 'string'})@PrimaryColumn({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        expired_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing coupon expiration date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, CreateDateColumn, DeleteDateColumn, PrimaryColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"coupons\" })\nexport class DbCoupon extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Coupon identifier\",\n    example: \"saucy\",\n    type: \"string\",\n  })\n  @PrimaryColumn({ type: \"text\" })\n  public code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing coupon expiration date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public expired_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbFilteredUser.html":{"url":"classes/DbFilteredUser.html","title":"class - DbFilteredUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbFilteredUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/filtered-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Users fullname', example: 'Brian Douglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbFilteredUser {\n  @ApiModelProperty({\n    description: \"User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Users fullname\",\n    example: \"Brian Douglas\",\n  })\n  public full_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                workspaces\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured insight', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightMember[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightMember => insightMember.insight, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbWorkspaceInsight[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToOne(undefined, workspaceInsights => workspaceInsights.insight, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:112\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbWorkspaceInsight } from \"../../workspace/entities/workspace-insights.entity\";\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbInsightMember } from \"./insight-member.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured insight\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightMember, (insightMember) => insightMember.insight, { onDelete: \"CASCADE\" })\n  public members: DbInsightMember[];\n\n  @ApiHideProperty()\n  @OneToOne(() => DbWorkspaceInsight, (workspaceInsights) => workspaceInsights.insight, { onDelete: \"CASCADE\" })\n  public workspaces: DbWorkspaceInsight[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                member\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.members)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.members)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public member: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28', type: 'string', format: 'date'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28\",\n    type: \"string\",\n    format: \"date\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: Date;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                commits\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_by_login\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:244\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:260\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:279\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:252\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:271\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:201\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_by_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request merged by username', example: 'bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:218\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request merged by username\",\n    example: \"bdougie\",\n  })\n  @Column(\"text\")\n  public merged_by_login?: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author id', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author id\",\n    example: 1,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestGitHubEvents.html":{"url":"entities/DbPullRequestGitHubEvents.html","title":"entity - DbPullRequestGitHubEvents","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestGitHubEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/timescale/entities/pull_request_github_event.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                event_id\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_additions\n                            \n                            \n                                    Public\n                                pr_author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_base_label\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_base_ref\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_comments\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_commits\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_deletions\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_head_label\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_head_ref\n                            \n                            \n                                    Public\n                                pr_is_draft\n                            \n                            \n                                    Public\n                                pr_is_merged\n                            \n                            \n                                    Public\n                                pr_is_rebaseable\n                            \n                            \n                                    Public\n                                pr_mergeable_state\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_merged_at\n                            \n                            \n                                    Public\n                                pr_number\n                            \n                            \n                                    Public\n                                pr_state\n                            \n                            \n                                    Public\n                                pr_title\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                repo_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        event_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request event identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_base_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_base_ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:178\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_head_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_head_ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_mergeable_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request mergeable state', example: 'unknown'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        repo_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:189\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\n@Entity({ name: \"pull_request_github_events\" })\nexport class DbPullRequestGitHubEvents extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request event identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  event_id: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public pr_number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public pr_state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request mergeable state\",\n    example: \"unknown\",\n  })\n  @Column(\"text\")\n  public pr_mergeable_state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public pr_title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public pr_head_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public pr_base_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public pr_head_ref?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public pr_base_ref?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public pr_author_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public repo_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestReview.html":{"url":"entities/DbPullRequestReview.html","title":"entity - DbPullRequestReview","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-review.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                published_at\n                            \n                            \n                                    Public\n                                pullRequest\n                            \n                            \n                                    Public\n                                reviewer_login\n                            \n                            \n                                    Public\n                                    Optional\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr review creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review identifier', example: 123456789, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        published_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review published date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pullRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbPullRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pull_request_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reviewer_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request reviewer username', example: 'Bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review state', example: 'approved'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review update date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, BaseEntity, CreateDateColumn, PrimaryColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbPullRequest } from \"./pull-request.entity\";\n\n@Entity(\"pull_request_reviews\")\nexport class DbPullRequestReview extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request review identifier\",\n    example: 123456789,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id: number;\n\n  @ManyToOne(() => DbPullRequest)\n  @JoinColumn({ name: \"pull_request_id\" })\n  public pullRequest: DbPullRequest;\n\n  @ApiModelProperty({\n    description: \"Pull request reviewer username\",\n    example: \"Bdougie\",\n  })\n  @Column(\"text\")\n  public reviewer_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr review creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review published date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public published_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review update date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request review state\",\n    example: \"approved\",\n  })\n  @Column(\"text\")\n  public state?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoLoginContributions.html":{"url":"entities/DbRepoLoginContributions.html","title":"entity - DbRepoLoginContributions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoLoginContributions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/entities/repo-user-contributions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"repo_user_contributions\" })\nexport class DbRepoLoginContributions {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTimezone.html":{"url":"classes/DbTimezone.html","title":"class - DbTimezone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTimezone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/timezones.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timezone string', example: 'America/Los_Angeles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/timezones.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTimezone {\n  @ApiModelProperty({\n    description: \"Timezone string\",\n    example: \"America/Los_Angeles\",\n  })\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                tagged_repos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133, type: 'integer'})@PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tagged_repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@Column({type: 'varchar', array: true, default: '{}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight type', example: 'pull_request'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:177\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn({ type: \"bigint\" })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Highlight type\",\n    example: \"pull_request\",\n  })\n  @Column(\"text\")\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @Column({\n    type: \"varchar\",\n    array: true,\n    default: \"{}\",\n  })\n  public tagged_repos: string[];\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({type: 'integer'})@Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @ApiModelProperty({ type: \"integer\" })\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                reaction_users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reaction_users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Usernames of users who reacted with this emoji', type: 'string', example: undefined, isArray: true})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight User Filter\",\n    example: \"RitaDee\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserList.html":{"url":"entities/DbUserList.html","title":"entity - DbUserList","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                list_user\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User List identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured list', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.lists, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List Name', example: 'JavaScript Developers'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_lists\" })\nexport class DbUserList extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User List identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: true,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"List Name\",\n    example: \"JavaScript Developers\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured list\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.lists, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public list_user!: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributor.html":{"url":"entities/DbUserListContributor.html","title":"entity - DbUserListContributor","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                list_id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                user_list_contributor\n                            \n                            \n                                    Public\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list contributor identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List identifier', example: 'uuid-v4'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_list_contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.user_list_contributors)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List user source username', example: 'sauceduser'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributor {\n  @ApiModelProperty({\n    description: \"User list contributor identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"List identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column()\n  public list_id!: string;\n\n  @ApiModelProperty({\n    description: \"List user source username\",\n    example: \"sauceduser\",\n  })\n  @Column({ type: \"text\" })\n  public username?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.user_list_contributors)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user_list_contributor!: DbUser;\n\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat.html":{"url":"entities/DbUserListContributorStat.html","title":"entity - DbUserListContributorStat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/repo-user-contributions.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat-1.html":{"url":"entities/DbUserListContributorStat-1.html","title":"entity - DbUserListContributorStat-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor-stats.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                from_user\n                            \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.from_user_notifications)@JoinColumn({name: 'from_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn, JoinColumn, ManyToOne } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.from_user_notifications)\n  @JoinColumn({\n    name: \"from_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public from_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserOrganization.html":{"url":"entities/DbUserOrganization.html","title":"entity - DbUserOrganization","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-organization.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                organization_id\n                            \n                            \n                                    Public\n                                organization_user\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User organization identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Organization identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'organization_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_organizations\" })\nexport class DbUserOrganization {\n  @ApiModelProperty({\n    description: \"User organization identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Organization identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public organization_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"organization_id\",\n    referencedColumnName: \"id\",\n  })\n  public organization_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbWorkspace.html":{"url":"entities/DbWorkspace.html","title":"entity - DbWorkspace","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbWorkspace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/entities/workspace.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insights\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                orgs\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User defined description of the workspace', example: 'A workspace for OpenSauced employees'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace identifier', example: 'abc-123'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insights\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbWorkspaceInsight[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, workspaceInsight => workspaceInsight.workspace, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbWorkspaceMember[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, workspaceMember => workspaceMember.workspace, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Name of workspace', example: 'OpenSauced's workspace'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        orgs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbWorkspaceOrg[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, workspaceOrg => workspaceOrg.workspace, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbWorkspaceRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, workspaceRepo => workspaceRepo.workspace, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  OneToMany,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbWorkspaceMember } from \"./workspace-member.entity\";\nimport { DbWorkspaceOrg } from \"./workspace-org.entity\";\nimport { DbWorkspaceRepo } from \"./workspace-repos.entity\";\nimport { DbWorkspaceInsight } from \"./workspace-insights.entity\";\n\n@Entity({ name: \"workspaces\" })\nexport class DbWorkspace extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Workspace identifier\",\n    example: \"abc-123\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Name of workspace\",\n    example: \"OpenSauced's workspace\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"User defined description of the workspace\",\n    example: \"A workspace for OpenSauced employees\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public description: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbWorkspaceMember, (workspaceMember) => workspaceMember.workspace, { onDelete: \"CASCADE\" })\n  public members: DbWorkspaceMember[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbWorkspaceOrg, (workspaceOrg) => workspaceOrg.workspace, { onDelete: \"CASCADE\" })\n  public orgs: DbWorkspaceOrg[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbWorkspaceRepo, (workspaceRepo) => workspaceRepo.workspace, { onDelete: \"CASCADE\" })\n  public repos: DbWorkspaceRepo[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbWorkspaceInsight, (workspaceInsight) => workspaceInsight.workspace, { onDelete: \"CASCADE\" })\n  public insights: DbWorkspaceInsight[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbWorkspaceInsight.html":{"url":"entities/DbWorkspaceInsight.html","title":"entity - DbWorkspaceInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbWorkspaceInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/entities/workspace-insights.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                workspace\n                            \n                            \n                                    Public\n                                workspace_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace insight identifier', example: 'abc-123'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.workspaces, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbWorkspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, workspace => workspace.members)@JoinColumn({name: 'workspace_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace identifier', example: 'abc-123'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-insights.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbInsight } from \"../../insight/entities/insight.entity\";\nimport { DbWorkspace } from \"./workspace.entity\";\n\n@Entity({ name: \"workspace_insights\" })\nexport class DbWorkspaceInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Workspace insight identifier\",\n    example: \"abc-123\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id!: number;\n\n  @ApiModelProperty({\n    description: \"Workspace identifier\",\n    example: \"abc-123\",\n  })\n  @Column()\n  public workspace_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.workspaces, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight: DbInsight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbWorkspace, (workspace) => workspace.members)\n  @JoinColumn({\n    name: \"workspace_id\",\n    referencedColumnName: \"id\",\n  })\n  public workspace: DbWorkspace;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbWorkspaceMember.html":{"url":"entities/DbWorkspaceMember.html","title":"entity - DbWorkspaceMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbWorkspaceMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/entities/workspace-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                member\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                workspace\n                            \n                            \n                                    Public\n                                workspace_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace member identifier', example: 'abc-123'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.workspaces, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkspaceMemberRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Role for the workspace member', example: undefined})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace member user identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbWorkspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, workspace => workspace.members)@JoinColumn({name: 'workspace_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace identifier', example: 'abc-123'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-member.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbWorkspace } from \"./workspace.entity\";\n\nexport enum WorkspaceMemberRoleEnum {\n  Owner = \"owner\",\n  Editor = \"editor\",\n  Viewer = \"viewer\",\n}\n\n@Entity({ name: \"workspace_members\" })\nexport class DbWorkspaceMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Workspace member identifier\",\n    example: \"abc-123\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Workspace member user identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Workspace identifier\",\n    example: \"abc-123\",\n  })\n  @Column()\n  public workspace_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Role for the workspace member\",\n    example: WorkspaceMemberRoleEnum.Owner,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public role: WorkspaceMemberRoleEnum;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.workspaces, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public member: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbWorkspace, (workspace) => workspace.members)\n  @JoinColumn({\n    name: \"workspace_id\",\n    referencedColumnName: \"id\",\n  })\n  public workspace: DbWorkspace;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbWorkspaceOrg.html":{"url":"entities/DbWorkspaceOrg.html","title":"entity - DbWorkspaceOrg","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbWorkspaceOrg\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/entities/workspace-org.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                org\n                            \n                            \n                                    Public\n                                org_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                workspace\n                            \n                            \n                                    Public\n                                workspace_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace org creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace org deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace org identifier', example: 'abc-123'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        org\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.workspaces, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        org_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Org identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace org last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbWorkspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, workspace => workspace.members)@JoinColumn({name: 'workspace_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace identifier', example: 'abc-123'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-org.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbWorkspace } from \"./workspace.entity\";\n\n@Entity({ name: \"workspace_orgs\" })\nexport class DbWorkspaceOrg extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Workspace org identifier\",\n    example: \"abc-123\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Org identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public org_id!: number;\n\n  @ApiModelProperty({\n    description: \"Workspace identifier\",\n    example: \"abc-123\",\n  })\n  @Column()\n  public workspace_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace org creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace org last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace org deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.workspaces, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public org: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbWorkspace, (workspace) => workspace.members)\n  @JoinColumn({\n    name: \"workspace_id\",\n    referencedColumnName: \"id\",\n  })\n  public workspace: DbWorkspace;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbWorkspaceRepo.html":{"url":"entities/DbWorkspaceRepo.html","title":"entity - DbWorkspaceRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbWorkspaceRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/entities/workspace-repos.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                workspace\n                            \n                            \n                                    Public\n                                workspace_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace repo identifier', example: 'abc-123'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.workspaces, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing workspace member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbWorkspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, workspace => workspace.members)@JoinColumn({name: 'workspace_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        workspace_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Workspace identifier', example: 'abc-123'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/entities/workspace-repos.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\nimport { DbWorkspace } from \"./workspace.entity\";\n\n@Entity({ name: \"workspace_repos\" })\nexport class DbWorkspaceRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Workspace repo identifier\",\n    example: \"abc-123\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Workspace identifier\",\n    example: \"abc-123\",\n  })\n  @Column()\n  public workspace_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing workspace member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.workspaces, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo: DbRepo;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbWorkspace, (workspace) => workspace.members)\n  @JoinColumn({\n    name: \"workspace_id\",\n    referencedColumnName: \"id\",\n  })\n  public workspace: DbWorkspace;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserCreatedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/services/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_imports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterListContributorsDto.html":{"url":"classes/FilterListContributorsDto.html","title":"class - FilterListContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterListContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/filter-contributors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                pr_velocity\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pr_velocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer', example: 2, description: 'Less than or equal to the average number of days to merge a PR over the last 30 days'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user-lists/dtos/filter-contributors.dto.ts:70\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Transform, Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, IsString, IsArray } from \"class-validator\";\n\nexport class FilterListContributorsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Denver, Colorado\", \"Germany\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  location?: string[];\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  contributor?: string;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Mountain Standard Time\", \"UTC\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  timezone?: string[];\n\n  @ApiPropertyOptional({\n    type: \"integer\",\n    example: 2,\n    description: \"Less than or equal to the average number of days to merge a PR over the last 30 days\",\n  })\n  @IsOptional()\n  pr_velocity?: number;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilteredUsersDto.html":{"url":"classes/FilteredUsersDto.html","title":"class - FilteredUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilteredUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/filtered-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username search query to filter from the list of users', type: 'string'})@MinLength(3)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/filtered-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, MinLength } from \"class-validator\";\n\nexport class FilteredUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiProperty({\n    description: \"Username search query to filter from the list of users\",\n    type: \"string\",\n  })\n  @MinLength(3)\n  @Type(() => String)\n  readonly username: string = \"\";\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FollowManyUsersDto.html":{"url":"classes/FollowManyUsersDto.html","title":"class - FollowManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FollowManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/follow-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                usernames\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        usernames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of usernames  to follow', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/follow-many-users.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class FollowManyUsersDto {\n  @ApiProperty({\n    description: \"An array of usernames  to follow\",\n    example: [\"jpmcb\", \"bdougie\", \"brandonroberts\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public usernames: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                findTopHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopHighlights(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'findTopHighlights', summary: 'Finds top highlights for the day range and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"findTopHighlights\",\n    summary: \"Finds top highlights for the day range and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findTopHighlights(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findTop(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { HighlightController } from \"./highlight.controller\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight User Filter', example: 'RitaDee'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight User Filter\",\n    example: \"RitaDee\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findFeaturedInsights\n                            \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findFeaturedInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findFeaturedInsights(pageOptionsDto: InsightPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findFeaturedInsights', summary: 'Finds featured insights'})@ApiOkResponse({type: DbInsight})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Query, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findFeaturedInsights\",\n    summary: \"Finds featured insights\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async findFeaturedInsights(@Query() pageOptionsDto: InsightPageOptionsDto): Promise> {\n    return this.insightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneByIdAndUserId(id, userId);\n\n    const membership = insight.members.find((member) => member.user_id === userId);\n\n    if (!membership || membership.access !== \"admin\") {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insightMember = await this.insightMemberRepository.findOne({\n      where: {\n        user_id: userId,\n        insight_id: insightId,\n      },\n    });\n\n    if (checkOwner && insightMember && insightMember.user_id === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    // when individual insight pages are fetched, go bake their repos to get fresh commit data\n    const bakeRepoInfo: BakeRepoDto = {\n      url: `https://github.com/${repo.fullName}`,\n      wait: false,\n    };\n\n    try {\n      await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n      }\n    }\n\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenModule } from \"../pizza/pizza-oven.module\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n    PizzaOvenModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByIdAndUserId\n                            \n                            \n                                processPizza\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository, insightMemberRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(userId: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: InsightPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByIdAndUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByIdAndUserId(id: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processPizza\n                        \n                    \n                \n            \n            \n                \nprocessPizza(item: DbInsight)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                DbInsight\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  processPizza(item: DbInsight) {\n    item.repos.forEach(async (url) => {\n      const bakeRepoInfo: BakeRepoDto = {\n        url: `https://github.com/${url.full_name}`,\n        wait: false,\n      };\n\n      try {\n        await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n        }\n      }\n    });\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .leftJoin(\"insight_members\", \"insight_members\")\n      .where(\"insights.id = :id\", { id })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .leftJoinAndSelect(`insights.members`, `members`, `insights.id=members.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    this.processPizza(item);\n\n    return item;\n  }\n\n  async findOneByIdAndUserId(id: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .leftJoin(\"insight_members\", \"insight_members\", \"insight_members.user_id = :userId\", { userId })\n      .where(\"insights.id = :id\", { id })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .leftJoinAndSelect(`insights.members`, `members`, `insights.id=members.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    this.processPizza(item);\n\n    return item;\n  }\n\n  async addInsight(userId: number, insight: Partial) {\n    const newInsight = await this.insightRepository.save(insight);\n\n    /* creators of insight pages are automatically an admin for them */\n    await this.insightMemberRepository.save({\n      user_id: userId,\n      insight_id: insight.id,\n      access: \"admin\",\n    });\n\n    return newInsight;\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .leftJoinAndSelect(\"insights.members\", \"insight_members\", \"insight_members.insight_id = insights.id\")\n      .where(\n        `(\n          ((SELECT COUNT(id) FROM insight_members where insight_members.user_id=:userId)=0)\n          AND\n          (insights.is_featured=true AND insights.deleted_at IS NULL)\n        )\n      `,\n        { userId }\n      )\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllFeatured(pageOptionsDto: InsightPageOptionsDto): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"is_featured=true\")\n      .andWhere(\"is_public=true\")\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .leftJoinAndSelect(`insights.members`, `members`, `insights.id=members.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssueSummaryController.html":{"url":"controllers/IssueSummaryController.html","title":"controller - IssueSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssueSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(generateIssueSummaryDto: CreateIssueSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateIssueSummary', summary: 'Generate a summary for an issue'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateIssueSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/issues/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateIssueSummaryDto\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"issues\")\n@ApiTags(\"Issue summary service\")\nexport class IssueSummaryController {\n  constructor(private readonly issueSummaryService: IssueSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateIssueSummary\",\n    summary: \"Generate a summary for an issue\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateIssueSummaryDto })\n  async generateIssueSummary(@Body() generateIssueSummaryDto: CreateIssueSummaryDto) {\n    const summary = await this.issueSummaryService.generateIssueSummary(generateIssueSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssueSummaryModule.html":{"url":"modules/IssueSummaryModule.html","title":"module - IssueSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    IssueSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issues/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IssueSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\nimport { IssueSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [IssueSummaryController],\n  providers: [IssueSummaryService],\n  exports: [IssueSummaryService],\n})\nexport class IssueSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueSummaryService.html":{"url":"injectables/IssueSummaryService.html","title":"injectable - IssueSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssueSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/issues/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(options: CreateIssueSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\n\n@Injectable()\nexport class IssueSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt issue summary for an issue taken from github issues with the specifications mentioned below`,\n      `The summary should be written in past tense and ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"If the issue or its comments include a solution, include it in the summary.\",\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the issue.\",\n    ].join(\"\\n\");\n  }\n\n  async generateIssueSummary(options: CreateIssueSummaryDto) {\n    const content = `Issue Title: ${options.issueTitle}\\nIssue Description: ${options.issueDescription}\\nIssue Comments: ${options.issueComments}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewMember.html":{"url":"classes/NewMember.html","title":"class - NewMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/dtos/create-workspace.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkspaceMemberRoleEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dtos/create-workspace.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { WorkspaceMemberRoleEnum } from \"../entities/workspace-member.entity\";\n\nexport class NewMember {\n  id: number;\n  login: string;\n  role: WorkspaceMemberRoleEnum;\n}\n\nexport class CreateWorkspaceDto {\n  @ApiProperty({\n    description: \"Workspace name\",\n    type: String,\n    example: \"My Workspace\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Workspace description\",\n    type: String,\n    example: \"A workspace for my OSS collaborators\",\n  })\n  @IsString()\n  description: string;\n\n  @ApiProperty({\n    description: \"An array of new member objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\", role: \"owner\" }],\n  })\n  @IsArray()\n  @Type(() => NewMember)\n  members: { id: number; login: string; role: WorkspaceMemberRoleEnum }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"./page-meta.dto\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n    type: \"integer\",\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    description: \"Number of days in the past to start range block\",\n    default: 0,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([0, 7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly prev_days_start_date?: number = 0;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PizzaOvenController.html":{"url":"controllers/PizzaOvenController.html","title":"controller - PizzaOvenController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PizzaOvenController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bake\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                            \n                                    Async\n                                listAllBakedRepos\n                            \n                            \n                                    Async\n                                listAllCommitAuthors\n                            \n                            \n                                    Async\n                                listAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                listAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('repos/:id')@ApiOperation({operationId: 'findBakedRepoById', summary: 'Finds a baked repo by :id'})@ApiOkResponse({type: DbBakedRepo})@ApiNotFoundResponse({description: 'Baked repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commit-authors/:id')@ApiOperation({operationId: 'findCommitAuthorById', summary: 'Finds a commit author by :id'})@ApiOkResponse({type: DbCommitAuthors})@ApiNotFoundResponse({description: 'Commit author not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commits/:id')@ApiOperation({operationId: 'findCommitById', summary: 'Finds a commit by :id'})@ApiOkResponse({type: DbCommits})@ApiNotFoundResponse({description: 'Commit not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'listAllBakedRepos', summary: 'Finds all baked repos and paginates them'})@ApiPaginatedResponse(DbBakedRepo)@ApiOkResponse({type: DbBakedRepo})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commit-authors/list')@ApiOperation({operationId: 'listAllCommitAuthors', summary: 'Finds all commit authors and paginates them'})@ApiPaginatedResponse(DbCommitAuthors)@ApiOkResponse({type: DbCommitAuthors})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/repo/:id')@ApiOperation({operationId: 'listAllCommitsByBakedRepoId', summary: 'Finds all commits by baked repo :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/commit-author/:id')@ApiOperation({operationId: 'listAllCommitsByCommitAuthorId', summary: 'Finds all commits by commit author :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeOptionsInfo: BakeRepoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'Bake a repository with the pizza oven microservice', summary: 'postToPizzaOvenService'})@ApiAcceptedResponse()@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: BakeRepoDto})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeOptionsInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, ParseIntPipe, Post, Query } from \"@nestjs/common\";\nimport {\n  ApiAcceptedResponse,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Controller(\"bake\")\n@ApiTags(\"Pizza oven service\")\nexport class PizzaOvenController {\n  constructor(\n    private readonly pizzaOvenService: PizzaOvenService,\n    private readonly commitAuthorService: CommitAuthorsService,\n    private readonly commitsService: CommitsService\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"Bake a repository with the pizza oven microservice\",\n    summary: \"postToPizzaOvenService\",\n  })\n  @ApiAcceptedResponse()\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: BakeRepoDto })\n  async postToPizzaOvenService(@Body() bakeOptionsInfo: BakeRepoDto) {\n    const statusCode = await this.pizzaOvenService.postToPizzaOvenService(bakeOptionsInfo);\n\n    if (statusCode !== 202) {\n      throw new BadRequestException();\n    }\n  }\n\n  @Get(\"repos/:id\")\n  @ApiOperation({\n    operationId: \"findBakedRepoById\",\n    summary: \"Finds a baked repo by :id\",\n  })\n  @ApiOkResponse({ type: DbBakedRepo })\n  @ApiNotFoundResponse({ description: \"Baked repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findBakedRepoById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pizzaOvenService.findBakedRepoById(id);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"listAllBakedRepos\",\n    summary: \"Finds all baked repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbBakedRepo)\n  @ApiOkResponse({ type: DbBakedRepo })\n  async listAllBakedRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pizzaOvenService.findAllBakedRepos(pageOptionsDto);\n  }\n\n  @Get(\"commit-authors/:id\")\n  @ApiOperation({\n    operationId: \"findCommitAuthorById\",\n    summary: \"Finds a commit author by :id\",\n  })\n  @ApiOkResponse({ type: DbCommitAuthors })\n  @ApiNotFoundResponse({ description: \"Commit author not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitAuthorById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitAuthorService.findCommitAuthorById(id);\n  }\n\n  @Get(\"/commit-authors/list\")\n  @ApiOperation({\n    operationId: \"listAllCommitAuthors\",\n    summary: \"Finds all commit authors and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommitAuthors)\n  @ApiOkResponse({ type: DbCommitAuthors })\n  async listAllCommitAuthors(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.commitAuthorService.findAllCommitAuthors(pageOptionsDto);\n  }\n\n  @Get(\"commits/:id\")\n  @ApiOperation({\n    operationId: \"findCommitById\",\n    summary: \"Finds a commit by :id\",\n  })\n  @ApiOkResponse({ type: DbCommits })\n  @ApiNotFoundResponse({ description: \"Commit not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitsService.findCommitById(id);\n  }\n\n  @Get(\"/commits/list/repo/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByBakedRepoId\",\n    summary: \"Finds all commits by baked repo :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByBakedRepoId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByBakedRepoId(pageOptionsDto, id);\n  }\n\n  @Get(\"/commits/list/commit-author/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByCommitAuthorId\",\n    summary: \"Finds all commits by commit author :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByCommitAuthorId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByCommitAuthorId(pageOptionsDto, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PizzaOvenModule.html":{"url":"modules/PizzaOvenModule.html","title":"module - PizzaOvenModule","body":"\n                   \n\n\n\n\n    Modules\n    PizzaOvenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_imports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pizza/pizza-oven.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PizzaOvenController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { PizzaOvenController } from \"./pizza-oven.controller\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { DbCommits } from \"./entities/commits.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    HttpModule,\n    TypeOrmModule.forFeature([DbBakedRepo, DbCommitAuthors, DbCommits], \"ApiConnection\"),\n  ],\n  controllers: [PizzaOvenController],\n  providers: [PizzaOvenService, CommitAuthorsService, CommitsService],\n  exports: [PizzaOvenService, CommitAuthorsService, CommitsService],\n})\nexport class PizzaOvenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PizzaOvenService.html":{"url":"injectables/PizzaOvenService.html","title":"injectable - PizzaOvenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PizzaOvenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllBakedRepos\n                            \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bakedRepoRepository: Repository, httpService: HttpService, configService: ConfigService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/pizza-oven.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bakedRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeRepoInfo: BakeRepoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeRepoInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { lastValueFrom, map } from \"rxjs\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\n\n@Injectable()\nexport class PizzaOvenService {\n  constructor(\n    @InjectRepository(DbBakedRepo, \"ApiConnection\")\n    private bakedRepoRepository: Repository,\n    private readonly httpService: HttpService,\n    private configService: ConfigService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.bakedRepoRepository.createQueryBuilder(\"baked_repos\");\n\n    return builder;\n  }\n\n  async postToPizzaOvenService(bakeRepoInfo: BakeRepoDto): Promise {\n    const data = {\n      url: bakeRepoInfo.url,\n      wait: bakeRepoInfo.wait,\n    };\n\n    const host: string = this.configService.get(\"pizza.host\")!;\n    const port: string = this.configService.get(\"pizza.port\")!;\n\n    return lastValueFrom(this.httpService.post(`${host}:${port}/bake`, data).pipe(map((resp) => resp.status)));\n  }\n\n  async findBakedRepoById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllBakedRepos(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                getPullRequestReviews\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestReviews\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestReviews(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reviews')@ApiOperation({operationId: 'getPullRequestReviews', summary: 'Find all pull request reviews by pull request ID'})@ApiOkResponse({type: undefined})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiParam } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n    private readonly pullRequestReviewService: PullRequestReviewService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n\n  @Get(\"/:id/reviews\")\n  @ApiOperation({\n    operationId: \"getPullRequestReviews\",\n    summary: \"Find all pull request reviews by pull request ID\",\n  })\n  @ApiOkResponse({ type: [DbPullRequestReview] })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getPullRequestReviews(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pullRequestReviewService.findAllReviewsByPrId(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestGithubEventsService.html":{"url":"injectables/PullRequestGithubEventsService.html","title":"injectable - PullRequestGithubEventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestGithubEventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/timescale/pull_request_github_events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByPrAuthor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestGithubEventsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/timescale/pull_request_github_events.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestGithubEventsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/timescale/pull_request_github_events.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByPrAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByPrAuthor(author: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/timescale/pull_request_github_events.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    author\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPullRequestGitHubEvents } from \"./entities/pull_request_github_event\";\n\n@Injectable()\nexport class PullRequestGithubEventsService {\n  constructor(\n    @InjectRepository(DbPullRequestGitHubEvents, \"TimescaleConnection\")\n    private pullRequestGithubEventsRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestGithubEventsRepository.createQueryBuilder(\"pull_request_github_events\");\n\n    return builder;\n  }\n\n  async findAllByPrAuthor(author: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const order = pageOptionsDto.orderDirection!;\n\n    /*\n     * because PR events may be \"opened\" or \"closed\" many times, this inner CTE query gets similar PRs rows\n     *  based on pr_number and repo_name. This essentially gives a full picture of opened/closed PRs\n     *  and their current state\n     */\n\n    const cteBuilder = this.pullRequestGithubEventsRepository\n      .createQueryBuilder(\"pull_request_github_events\")\n      .select(\"*\")\n      .addSelect(`ROW_NUMBER() OVER (PARTITION BY pr_number, repo_name ORDER BY event_time ${order}) AS row_num`)\n      .where(`\"pull_request_github_events\".\"pr_author_login\"=:author`, { author: author.toLowerCase() })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_request_github_events\".\"event_time\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${cteCounterResult?.count ?? \"0\"}`, 10);\n\n    const entities = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderStart\n                            \n                            \n                                hacktoberfestPrDateCharBuilder\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderEnd(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrDateCharBuilder\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrDateCharBuilder(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  hacktoberfestPrCountFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this ensures inclusive date range blocks for years in the past.\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day' >= \"pr\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrCountFilterBuilderEnd(interval = 0) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October minus the range.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day'\n            - INTERVAL '${interval} days' (\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, startDate, interval);\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrCountFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrCountFilterBuilderEnd(interval), {}]);\n        break;\n\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pr\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${interval} days'  {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    let queryBuilder: SelectQueryBuilder;\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.baseQueryBuilder()\n          .select(this.hacktoberfestPrDateCharBuilder(interval), \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n\n      default:\n        queryBuilder = this.baseQueryBuilder()\n          .select(`TO_CHAR('${startDate}'::TIMESTAMP - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n    }\n\n    queryBuilder.limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbPullRequest, DbPRInsight, DbPullRequestReview], \"ApiConnection\"),\n    RepoFilterModule,\n    OpenAiModule,\n  ],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n    PullRequestReviewService,\n  ],\n  exports: [PullRequestService, PullRequestReviewService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                listId\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        listId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'uuid-v4'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"uuid-v4\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly listId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestReviewService.html":{"url":"injectables/PullRequestReviewService.html","title":"injectable - PullRequestReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllReviewsByPrId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestReviewRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-review.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestReviewRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReviewsByPrId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReviewsByPrId(PrId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-review.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    PrId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Injectable()\nexport class PullRequestReviewService {\n  constructor(\n    @InjectRepository(DbPullRequestReview, \"ApiConnection\")\n    private pullRequestReviewRepository: Repository\n  ) {}\n\n  async findAllReviewsByPrId(PrId: number): Promise {\n    return this.pullRequestReviewRepository.find({\n      where: { pullRequest: { id: PrId } },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllChurnContributors\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllRepeatContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                            \n                                hacktoberfestPrFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrFilterBuilderStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start_date: string, start_range: number, end_range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:361\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start_date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderEnd(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { ContributorPullRequestsDto, RangeTypeEnum } from \"../user/dtos/contributor-prs.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  hacktoberfestPrFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this is inclusive of previous years where the current pull_requests have \"newer\" updates\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrFilterBuilderEnd(range = 30) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(\n    contributor: string,\n    pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\")\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() });\n\n    if (pageOptionsDto.rangeType === RangeTypeEnum.Recent) {\n      queryBuilder\n        .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n        .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .addSelect(\"users.id\", \"user_id\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .innerJoin(\"users\", \"users\", `\"pull_requests\".\"author_login\"=\"users\".\"login\"`)\n      .addGroupBy(\"author_login\")\n      .addGroupBy(\"users.id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const currentMonthQuery = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n\n    queryBuilder\n      .select(\"current_month.author_login\")\n      .distinct()\n      .from(`(${currentMonthQuery.getQuery()})`, \"current_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllChurnContributors(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at = '${start_date}'::TIMESTAMP - INTERVAL '${end_range} days'`)\n      .andWhere(`pull_requests.updated_at \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByOwnerRepoAndContributorLogin\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllUserContributionsByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerRepoAndContributorLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerRepoAndContributorLogin(owner: string, repo: string, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/:login/contributions')@ApiOperation({operationId: 'findAllByOwnerRepoAndContributorLogin', summary: 'Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them'})@ApiOkResponse({type: DbRepoLoginContributions})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserContributionsByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserContributionsByRepoId(owner: string, repo: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions/contributors')@ApiOperation({operationId: 'findAllContributorsByRepoId', summary: 'Finds a repo by :owner and :repo listing all contributions by their user login'})@ApiOkResponse({type: DbRepoLoginContributions, isArray: true})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiQuery, ApiTags } from \"@nestjs/swagger\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ContributionService } from \"./contribution.service\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions/contributors\")\n  @ApiOperation({\n    operationId: \"findAllContributorsByRepoId\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions by their user login\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions, isArray: true })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllUserContributionsByRepoId(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByRepoId(item.id, range, prev_days_start_date);\n  }\n\n  @Get(\"/:owner/:repo/:login/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerRepoAndContributorLogin\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllByOwnerRepoAndContributorLogin(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Param(\"login\") login: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByUserLogin(item.id, login, range, prev_days_start_date);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, startDate = \"NOW()\", range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND '${startDate}'::TIMESTAMP >= \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findOrgsRecommendations\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                    Private\n                                hacktoberfestfilterquerybuilder\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOrgsRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:448\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:418\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hacktoberfestfilterquerybuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    hacktoberfestfilterquerybuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(startDate = \"NOW()\", range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND '${startDate}'::TIMESTAMP >= \"open_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests_velocity\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"open_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests_velocity\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    let queryBuilder;\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.hacktoberfestfilterquerybuilder(range);\n        break;\n      default:\n        queryBuilder = this.baseFilterQueryBuilder(startDate, range);\n        break;\n    }\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`, { range }]);\n      filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"repos\".\"updated_at\"`, { range }]);\n      countFilters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n\n  async findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseFilterQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .leftJoin(\n        (qb: SelectQueryBuilder) =>\n          qb\n            .select(\"users.id\", \"id\")\n            .addSelect(\"users.login\", \"login\")\n            .addSelect(\"user_orgs.user_id\", \"user_id\")\n            .from(\"user_organizations\", \"user_orgs\")\n            .innerJoin(\"users\", \"users\", \"user_orgs.organization_id = users.id\"),\n        \"user_orgs\",\n        \"repos.full_name LIKE user_orgs.login || '/%'\"\n      )\n      .where(\"user_orgs.user_id = :userId\", { userId })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StarService } from \"./star.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StargazeService } from \"./stargaze.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SubmitService } from \"./submit.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})@ApiParam({name: 'repoId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { VoteService } from \"./vote.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  @ApiParam({ name: \"repoId\", type: \"integer\" })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_imports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/services/user.service\";\nimport { toDateTime } from \"./utils\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                coupon_code\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        coupon_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Coupon Code', example: 'saucy'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread Insight Pagees Count', example: 2, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n    type: \"integer\",\n  })\n  readonly notification_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Unread Insight Pagees Count\",\n    example: 2,\n    type: \"integer\",\n  })\n  readonly insights_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Coupon Code\",\n    example: \"saucy\",\n  })\n  readonly coupon_code?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TierModule.html":{"url":"modules/TierModule.html","title":"module - TierModule","body":"\n                   \n\n\n\n\n    Modules\n    TierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TierModule\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_TierModule_exports\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tier/tier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TierService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TierService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TierService } from \"./tier.service\";\n\n@Module({\n  providers: [TierService],\n  exports: [TierService],\n})\nexport class TierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TierService.html":{"url":"injectables/TierService.html","title":"injectable - TierService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TierService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tier/tier.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkAddOrg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/tier/tier.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddOrg\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddOrg(userId: number, userDetails: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/tier/tier.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDetails\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TierService.name)\n                    \n                \n                    \n                        \n                                Defined in src/tier/tier.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Features, lookupOrg, subscribe } from \"tier\";\n\n@Injectable()\nexport class TierService {\n  private logger = new Logger(TierService.name);\n\n  constructor(private configService: ConfigService) {}\n\n  async checkAddOrg(userId: number, userDetails: { email: string; name: string; login: string }) {\n    try {\n      // check to see if the user is registered\n      await lookupOrg(`org:${userId}`);\n    } catch (e) {\n      const { email, name, login } = userDetails;\n\n      // use free account plan\n      const plan: Features = this.configService.get(\"tier.freePlan\")! as Features;\n\n      try {\n        // register the user with a free account\n        await subscribe(`org:${userId}`, plan, {\n          info: {\n            email,\n            name,\n            description: `OpenSauced Free Account`,\n            phone: \"\",\n            metadata: {\n              login,\n            },\n          },\n        });\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          this.logger.error(`Unable to register account for ${login}`);\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TimescaleModule.html":{"url":"modules/TimescaleModule.html","title":"module - TimescaleModule","body":"\n                   \n\n\n\n\n    Modules\n    TimescaleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TimescaleModule\n\n\n\ncluster_TimescaleModule_exports\n\n\n\ncluster_TimescaleModule_providers\n\n\n\n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService \n\n\n\nTimescaleModule\n\nTimescaleModule\n\nPullRequestGithubEventsService  -->\n\nTimescaleModule->PullRequestGithubEventsService \n\n\n\n\n\nPullRequestGithubEventsService\n\nPullRequestGithubEventsService\n\nTimescaleModule -->\n\nPullRequestGithubEventsService->TimescaleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/timescale/timescale.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PullRequestGithubEventsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestGithubEventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { DbPullRequestGitHubEvents } from \"./entities/pull_request_github_event\";\nimport { PullRequestGithubEventsService } from \"./pull_request_github_events.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequestGitHubEvents], \"TimescaleConnection\")],\n  providers: [PullRequestGithubEventsService],\n  exports: [PullRequestGithubEventsService],\n})\nexport class TimescaleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopProjectsDto.html":{"url":"classes/TopProjectsDto.html","title":"class - TopProjectsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopProjectsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/top-projects.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@Type(undefined)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsNumber, IsOptional } from \"class-validator\";\n\nexport class TopProjectsDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @Type(() => Number)\n  @IsNumber()\n  repo_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID to filter followings from the list', type: 'integer'})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    description: \"User ID to filter followings from the list\",\n    type: \"integer\",\n  })\n  @IsOptional()\n  @Type(() => Number)\n  readonly userId?: number = 0;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                            \n                                    Public\n                                receive_product_updates\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_product_updates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Email Product Updates', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Email Product Updates\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_product_updates: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserService } from \"./services/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllOrgsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequestGitHubEvents\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                            \n                                    Async\n                                getUsersByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllOrgsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllOrgsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/organizations')@ApiOperation({operationId: 'findAllOrgsByUsername', summary: 'Listing public orgs for a user and paginate them'})@ApiPaginatedResponse(DbUserOrganization)@ApiOkResponse({type: DbUserOrganization})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequestGitHubEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequestGitHubEvents(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('2')@Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequestGitHubEvents', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequestGitHubEvents)@ApiOkResponse({type: DbPullRequestGitHubEvents})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByFilter(pageOptionsDto: FilteredUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'getUsersByFilter', summary: 'Search users'})@ApiOkResponse({type: DbFilteredUser})@ApiBadRequestResponse({description: 'Username is required'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilteredUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query, Version } from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbPullRequestGitHubEvents } from \"../timescale/entities/pull_request_github_event\";\nimport { PullRequestGithubEventsService } from \"../timescale/pull_request_github_events.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\nimport { DbFilteredUser } from \"./entities/filtered-users.entity\";\nimport { FilteredUsersDto } from \"./dtos/filtered-users.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserOrganizationService } from \"./user-organization.service\";\nimport { ContributorPullRequestsDto } from \"./dtos/contributor-prs.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private pullRequestGitHubEventsService: PullRequestGithubEventsService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n    private userOrganizationService: UserOrganizationService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Version(\"2\")\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequestGitHubEvents\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequestGitHubEvents)\n  @ApiOkResponse({ type: DbPullRequestGitHubEvents })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequestGitHubEvents(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.pullRequestGitHubEventsService.findAllByPrAuthor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/:username/organizations\")\n  @ApiOperation({\n    operationId: \"findAllOrgsByUsername\",\n    summary: \"Listing public orgs for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserOrganization)\n  @ApiOkResponse({ type: DbUserOrganization })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllOrgsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userOrganizationService.findAllByUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"getUsersByFilter\",\n    summary: \"Search users\",\n  })\n  @ApiOkResponse({ type: DbFilteredUser })\n  @ApiBadRequestResponse({ description: \"Username is required\" })\n  async getUsersByFilter(@Query() pageOptionsDto: FilteredUsersDto): Promise> {\n    return this.userService.findUsersByFilter(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllFollowers\n                            \n                            \n                                    Async\n                                findAllFollowingList\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowers(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowingList(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findAllFollowers(userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.following_user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n\n    return entities;\n  }\n\n  async findAllFollowingList(userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    return queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\")\n      .getMany();\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(`You have already followed this user: ${followedUserId}`);\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowingController.html":{"url":"controllers/UserFollowingController.html","title":"controller - UserFollowingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-following.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFollowingListByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingListByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingListByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/following')@ApiOperation({operationId: 'getFollowingListByUsername', summary: 'Get list of following users by the provided username'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-following.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { UserService } from \"./services/user.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowingController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/following\")\n  @ApiOperation({\n    operationId: \"getFollowingListByUsername\",\n    summary: \"Get list of following users by the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async getFollowingListByUsername(@Param(\"username\") username: string): Promise {\n    const user: DbUser = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findAllFollowingList(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                followUsersByUsernames\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUsersByUsernames\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUsersByUsernames(bulkFollow: FollowManyUsersDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follows')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUsersByUsernames', summary: 'Follows a number of users by username'})@ApiNotFoundResponse({description: 'Users not found'})@ApiConflictResponse({description: 'You have already followed this user'})@ApiBody({type: FollowManyUsersDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bulkFollow\n                                    \n                                                FollowManyUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./services/user.service\";\nimport { FollowManyUsersDto } from \"./dtos/follow-many-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Put(\"/:username/follows\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUsersByUsernames\",\n    summary: \"Follows a number of users by username\",\n  })\n  @ApiNotFoundResponse({ description: \"Users not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  @ApiBody({ type: FollowManyUsersDto })\n  async followUsersByUsernames(\n    @Body() bulkFollow: FollowManyUsersDto,\n    @UserId() userId: number\n  ): Promise {\n    const users = await this.userService.findManyByUsernames(bulkFollow.usernames);\n    const allErrs: Error[] = [];\n\n    const promises = users.map(async (user) => {\n      try {\n        return await this.userFollowService.addUserFollowerByUserId(userId, user.id);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          allErrs.push(e);\n        }\n      }\n    });\n\n    const results = await Promise.all(promises);\n    const validResults = results.filter(Boolean);\n\n    return {\n      follows: validResults as DbUserToUserFollows[],\n      errors: allErrs,\n    };\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      title: updateHighlightDto.title,\n      highlight: updateHighlightDto.highlight,\n      url: updateHighlightDto.url,\n      type: updateHighlightDto.type,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n      tagged_repos: updateHighlightDto.taggedRepos,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                findTop\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, userFollowService: UserFollowService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowService\n                                                  \n                                                        \n                                                                        UserFollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTop\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTop(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\nimport { UserFollowService } from \"./user-follow.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private userFollowService: UserFollowService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findTop(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .addSelect(\n        `\n        (SELECT COUNT(id) FROM user_highlight_reactions\n        WHERE highlight_id=user_highlights.id\n        AND deleted_at IS NULL)\n      `,\n        \"reactions\"\n      )\n      .where(`'${startDate}'::TIMESTAMP >= user_highlights.created_at`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n      type: highlight.type,\n      tagged_repos: highlight.taggedRepos,\n    });\n\n    const newHighlight = await this.userHighlightRepository.save(newUserHighlight);\n\n    const followers = await this.userFollowService.findAllFollowers(userId);\n\n    const notifications = followers.map(async (follower) =>\n      this.userNotificationService.addUserHighlightNotification(newHighlight.id, userId, follower.user_id)\n    );\n\n    await Promise.all(notifications);\n\n    return newHighlight;\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .addSelect(\"ARRAY_AGG(users.login)\", \"reaction_users\")\n      .innerJoin(\"users\", \"users\", \"user_highlight_reactions.user_id=users.id\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .addGroupBy(\"emoji_id\");\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserService } from \"../user/services/user.service\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight(userId, {\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListController.html":{"url":"controllers/UserListController.html","title":"controller - UserListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addListForUser\n                            \n                            \n                                    Async\n                                deleteListForUser\n                            \n                            \n                                    Async\n                                deleteUserListContributors\n                            \n                            \n                                    Async\n                                getContributors\n                            \n                            \n                                    Async\n                                getFeaturedLists\n                            \n                            \n                                    Async\n                                getListsForUser\n                            \n                            \n                                    Async\n                                getTimezones\n                            \n                            \n                                    Async\n                                getUserList\n                            \n                            \n                                    Async\n                                getUserListContributorHighlightedRepos\n                            \n                            \n                                    Async\n                                getUserListContributorHighlights\n                            \n                            \n                                    Async\n                                getUserListContributors\n                            \n                            \n                                    Async\n                                postUserListContributors\n                            \n                            \n                                    Async\n                                updateListForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addListForUser(createUserListDto: CreateUserListDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addListForUser', summary: 'Adds a new list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to add user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteListForUser(userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteListForUser', summary: 'Deletes the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributors(id: string, userListContributorId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/contributors/:userListContributorId')@ApiOperation({operationId: 'deleteUserListContributor', summary: 'Delete contributor from an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user from user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiParam({name: 'userListContributorId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributors(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/contributors')@ApiOperation({operationId: 'getContributors', summary: 'Retrieves paginated contributors'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUser)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to get contributors'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeaturedLists\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeaturedLists(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'getFeaturedLists', summary: 'Gets public featured lists'})@ApiOkResponse({type: DbUserList})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListsForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListsForUser(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getListsForUser', summary: 'Gets lists for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user lists'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimezones()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/timezones')@ApiOperation({operationId: 'getTimezones', summary: 'Retrieves all users timezones'})@ApiOkResponse({type: DbTimezone})@ApiNotFoundResponse({description: 'Unable to get timezones'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserList(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserList', summary: 'Retrieves an individual user list'})@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributorHighlightedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributorHighlightedRepos(pageOptionsDto: PageOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors/highlights/tagged-repos')@ApiOperation({operationId: 'getUserListContributorHighlightedRepos', summary: 'Retrieves highlighted repos for contributors for an individual user list'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})@ApiNotFoundResponse({description: 'Unable to get user list contributor highlights'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributorHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributorHighlights(pageOptionsDto: HighlightOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors/highlights')@ApiOperation({operationId: 'getUserListContributorHighlights', summary: 'Retrieves highlights for contributors for an individual user list'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user list contributor highlights'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributors(pageOptionsDto: FilterListContributorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors')@ApiOperation({operationId: 'getUserListContributors', summary: 'Retrieves contributors for an individual user list'})@ApiPaginatedResponse(DbUserListContributor)@ApiOkResponse({type: DbUserListContributor})@ApiNotFoundResponse({description: 'Unable to get user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    postUserListContributors(updateCollaboratorsDto: CollaboratorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/contributors')@ApiOperation({operationId: 'postUserListContributors', summary: 'Add new contributors to an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to add to user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCollaboratorsDto\n                                    \n                                                CollaboratorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateListForUser(updateListDto: CreateUserListDto, userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateListForUser', summary: 'Updates the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to update user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query, UseGuards, ValidationPipe } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { CollaboratorsDto } from \"./dtos/collaborators.dto\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListController {\n  constructor(private readonly userListService: UserListService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getListsForUser\",\n    summary: \"Gets lists for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user lists\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getListsForUser(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userListService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"getFeaturedLists\",\n    summary: \"Gets public featured lists\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  async getFeaturedLists(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userListService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addListForUser\",\n    summary: \"Adds a new list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to add user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  async addListForUser(@Body() createUserListDto: CreateUserListDto, @UserId() userId: number): Promise {\n    const newList = await this.userListService.addUserList(userId, createUserListDto);\n\n    const listContributors = createUserListDto.contributors.map(async (contributor) =>\n      this.userListService.addUserListContributor(newList.id, contributor.id, contributor.login)\n    );\n\n    await Promise.allSettled(listContributors);\n\n    return newList;\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserList\",\n    summary: \"Retrieves an individual user list\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserList(@Param(\"id\") id: string): Promise {\n    return this.userListService.findPublicOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateListForUser\",\n    summary: \"Updates the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to update user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async updateListForUser(\n    @Body() updateListDto: CreateUserListDto,\n    @UserId() userId: number,\n    @Param(\"id\") listId: string\n  ): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.updateUserList(list.id, {\n      name: updateListDto.name,\n      is_public: updateListDto.is_public,\n    });\n\n    return this.userListService.findOneById(list.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteListForUser\",\n    summary: \"Deletes the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async deleteListForUser(@UserId() userId: number, @Param(\"id\") listId: string): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.deleteUserList(list.id);\n  }\n\n  @Get(\"/contributors\")\n  @ApiOperation({\n    operationId: \"getContributors\",\n    summary: \"Retrieves paginated contributors\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUser)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to get contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getContributors(\n    @Query(new ValidationPipe({ transform: true, forbidUnknownValues: true })) pageOptionsDto: FilterListContributorsDto\n  ): Promise> {\n    return this.userListService.findContributorsByFilter(pageOptionsDto);\n  }\n\n  @Get(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"getUserListContributors\",\n    summary: \"Retrieves contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributor)\n  @ApiOkResponse({ type: DbUserListContributor })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributors(\n    @Query() pageOptionsDto: FilterListContributorsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findContributorsByListId(pageOptionsDto, id);\n  }\n\n  @Post(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"postUserListContributors\",\n    summary: \"Add new contributors to an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to add to user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async postUserListContributors(\n    @Body() updateCollaboratorsDto: CollaboratorsDto,\n    @Param(\"id\") id: string\n  ): Promise {\n    const contributors = updateCollaboratorsDto.contributors.map(async (contributorId) =>\n      this.userListService.addUserListContributor(id, contributorId)\n    );\n\n    return Promise.all(contributors);\n  }\n\n  @Delete(\"/:id/contributors/:userListContributorId\")\n  @ApiOperation({\n    operationId: \"deleteUserListContributor\",\n    summary: \"Delete contributor from an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user from user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiParam({ name: \"userListContributorId\", type: \"integer\" })\n  async deleteUserListContributors(\n    @Param(\"id\") id: string,\n    @Param(\"userListContributorId\") userListContributorId: string\n  ): Promise {\n    await this.userListService.deleteUserListContributor(id, userListContributorId);\n  }\n\n  @Get(\"/:id/contributors/highlights\")\n  @ApiOperation({\n    operationId: \"getUserListContributorHighlights\",\n    summary: \"Retrieves highlights for contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributor highlights\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributorHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findListContributorsHighlights(pageOptionsDto, id);\n  }\n\n  @Get(\"/:id/contributors/highlights/tagged-repos\")\n  @ApiOperation({\n    operationId: \"getUserListContributorHighlightedRepos\",\n    summary: \"Retrieves highlighted repos for contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributor highlights\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributorHighlightedRepos(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findListContributorsHighlightedRepos(pageOptionsDto, id);\n  }\n\n  @Get(\"/timezones\")\n  @ApiOperation({\n    operationId: \"getTimezones\",\n    summary: \"Retrieves all users timezones\",\n  })\n  @ApiOkResponse({ type: DbTimezone })\n  @ApiNotFoundResponse({ description: \"Unable to get timezones\" })\n  async getTimezones(): Promise {\n    return this.userListService.getAllTimezones();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserListModule.html":{"url":"modules/UserListModule.html","title":"module - UserListModule","body":"\n                   \n\n\n\n\n    Modules\n    UserListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\ncluster_UserListModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-lists/user-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserListController\n                        \n                        \n                            UserListStatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { UserListController } from \"./user-list.controller\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { UserListStatsController } from \"./user-list-stats.controller\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    UserModule,\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserList,\n        DbUserHighlight,\n        DbPullRequest,\n        DbUserListContributor,\n        DbUserListContributorStat,\n        DbContributionStatTimeframe,\n        DbContributorCategoryTimeframe,\n      ],\n      \"ApiConnection\"\n    ),\n  ],\n  controllers: [UserListController, UserListStatsController],\n  providers: [UserListService, UserListStatsService],\n  exports: [UserListService, UserListStatsService],\n})\nexport class UserListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListMostActiveContributorsDto.html":{"url":"classes/UserListMostActiveContributorsDto.html","title":"class - UserListMostActiveContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListMostActiveContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/most-active-contributors.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsOrderEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsOrderEnum.commits\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsOrderEnum, enumName: 'UserListContributorStatsOrderEnum', default: undefined})@IsEnum(UserListContributorStatsOrderEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum UserListContributorStatsOrderEnum {\n  commits = \"commits\",\n  prs_created = \"prs_created\",\n  total_contributions = \"total_contributions\",\n}\n\nexport enum UserListContributorStatsTypeEnum {\n  all = \"all\",\n  active = \"active\",\n  new = \"new\",\n  alumni = \"alumni\",\n}\n\nexport class UserListMostActiveContributorsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsOrderEnum,\n    enumName: \"UserListContributorStatsOrderEnum\",\n    default: UserListContributorStatsOrderEnum.commits,\n  })\n  @IsEnum(UserListContributorStatsOrderEnum)\n  @IsOptional()\n  readonly orderBy?: UserListContributorStatsOrderEnum = UserListContributorStatsOrderEnum.commits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListService.html":{"url":"injectables/UserListService.html","title":"injectable - UserListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserList\n                            \n                            \n                                    Async\n                                addUserListContributor\n                            \n                            \n                                baseListContributorQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                baseUserQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserList\n                            \n                            \n                                    Async\n                                deleteUserListContributor\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findContributorsByFilter\n                            \n                            \n                                    Async\n                                findContributorsByListId\n                            \n                            \n                                    Async\n                                findListContributorsHighlightedRepos\n                            \n                            \n                                    Async\n                                findListContributorsHighlights\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findPublicOneById\n                            \n                            \n                                    Async\n                                getAllTimezones\n                            \n                            \n                                    Async\n                                updateUserList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListRepository: Repository, userListContributorRepository: Repository, userHighlightRepository: Repository, userRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserList(userId: number, list: CreateUserListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    list\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserListContributor(listId: string, userId: number, username?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseListContributorQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseListContributorQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUserQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseUserQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserList(listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributor(id: string, userListContributorId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByFilter(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByListId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByListId(pageOptionsDto: FilterListContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorsHighlightedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorsHighlightedRepos(pageOptionsDto: PageOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:290\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorsHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorsHighlights(pageOptionsDto: HighlightOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPublicOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPublicOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTimezones()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:319\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserList(listId: string, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Injectable()\nexport class UserListService {\n  constructor(\n    @InjectRepository(DbUserList, \"ApiConnection\")\n    private userListRepository: Repository,\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository,\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListRepository.createQueryBuilder(\"user_lists\");\n\n    return builder;\n  }\n\n  baseListContributorQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  baseUserQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_lists.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findPublicOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    if (!item.is_public && userId && userId !== item.user_id) {\n      throw new UnauthorizedException(\"You're not authorized to view this list\");\n    }\n\n    return item;\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_lists.user_id = :userId\", { userId }).orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"is_featured=true\").andWhere(\"is_public=true\").orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserList(userId: number, list: CreateUserListDto) {\n    const newUserList = this.userListRepository.create({\n      user_id: userId,\n      name: list.name,\n      is_public: list.is_public,\n    });\n\n    return this.userListRepository.save(newUserList);\n  }\n\n  async addUserListContributor(listId: string, userId: number, username?: string) {\n    const existingContributor = await this.userListContributorRepository.findOne({\n      where: {\n        list_id: listId,\n        user_id: userId,\n      },\n    });\n\n    if (existingContributor) {\n      return existingContributor;\n    }\n\n    const newUserListContributor = this.userListContributorRepository.create({\n      list_id: listId,\n      user_id: userId,\n      username,\n    });\n\n    return this.userListContributorRepository.save(newUserListContributor);\n  }\n\n  async deleteUserListContributor(id: string, userListContributorId: string) {\n    const contributor = await this.userListContributorRepository.findOne({\n      where: {\n        id: userListContributorId,\n        list_id: id,\n      },\n    });\n\n    if (contributor) {\n      return this.userListContributorRepository.softDelete(userListContributorId);\n    }\n\n    throw new NotFoundException(\"User list contributor not found for given list ID\");\n  }\n\n  async updateUserList(listId: string, highlight: Partial) {\n    return this.userListRepository.update(listId, highlight);\n  }\n\n  async deleteUserList(listId: string) {\n    return this.userListRepository.softDelete(listId);\n  }\n\n  async findContributorsByFilter(pageOptionsDto: FilterListContributorsDto): Promise> {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    queryBuilder.leftJoin(\n      (qb) =>\n        qb\n          .select(\"author_login\")\n          .addSelect(\n            \"COALESCE(AVG((pull_requests.merged_at::DATE - pull_requests.created_at::DATE)), 0)\",\n            \"avg_merge_time\"\n          )\n          .from(DbPullRequest, \"pull_requests\")\n          .where(\"now() - INTERVAL '30 days' > {\n    const queryBuilder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    queryBuilder\n      .leftJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_list_contributors_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId });\n\n    if (pageOptionsDto.contributor) {\n      queryBuilder.andWhere(\"LOWER(users.login) LIKE :contributor\", {\n        contributor: `%${pageOptionsDto.contributor.toLowerCase()}%`,\n      });\n    }\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findListContributorsHighlights(\n    pageOptionsDto: HighlightOptionsDto,\n    listId: string\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range ?? 30;\n    const orderBy = pageOptionsDto.orderDirection ?? \"DESC\";\n    const queryBuilder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    // return all highlights that belongs to a contributor of the list id\n    queryBuilder\n      .innerJoin(\n        \"user_list_contributors\",\n        \"user_list_contributors\",\n        \"user_list_contributors.user_id = user_highlights.user_id\"\n      )\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId })\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range ?? 30;\n    const orderBy = pageOptionsDto.orderDirection ?? \"DESC\";\n    const queryBuilder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    queryBuilder.select(\"DISTINCT UNNEST(user_highlights.tagged_repos) AS full_name\");\n\n    queryBuilder\n      .innerJoin(\n        \"user_list_contributors\",\n        \"user_list_contributors\",\n        \"user_list_contributors.user_id = user_highlights.user_id\"\n      )\n      .where(\"user_list_contributors.list_id = :listId\", { listId })\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseUserQueryBuilder();\n\n    queryBuilder\n      .select(\"DISTINCT users.timezone as timezone\")\n      .where(\"users.timezone IS NOT NULL\")\n      .andWhere(\"users.timezone != ''\");\n\n    const timezones: DbTimezone[] = await queryBuilder.getRawMany();\n\n    return timezones;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListStatsController.html":{"url":"controllers/UserListStatsController.html","title":"controller - UserListStatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListStatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContributionsByProject\n                            \n                            \n                                    Async\n                                getContributionsByTimeframe\n                            \n                            \n                                    Async\n                                getContributionsByTimeFrame\n                            \n                            \n                                    Async\n                                getContributorContributionsByProject\n                            \n                            \n                                    Async\n                                getMostActiveContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByProject(id: string, options: ContributionsByProjectDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-by-project')@ApiOperation({operationId: 'getContributionsByProject', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionsProjects})@ApiNotFoundResponse({description: 'Unable to get contributions by project'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiQuery({name: 'range', type: 'integer', required: false})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeframe(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-contributor-type')@ApiOperation({operationId: 'getContributorsByTimeframe', summary: 'Gets contributions by category within timeframe'})@ApiOkResponse({type: DbContributorCategoryTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeFrame(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-type')@ApiOperation({operationId: 'getContributionsByTimeFrame', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionStatTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributorContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorContributionsByProject(id: string, options: TopProjectsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/top-project-contributions-by-contributor/')@ApiOperation({operationId: 'getContributorContributionsByProject', summary: 'Gets top 20 contributor stats in a list by a given project'})@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMostActiveContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMostActiveContributors(id: string, pageOptionsDto: UserListMostActiveContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/most-active-contributors')@ApiOperation({operationId: 'getMostActiveContributors', summary: 'Gets most active contributors for a given list'})@ApiPaginatedResponse(DbUserListContributorStat)@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get list most active contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiParam,\n  ApiQuery,\n} from \"@nestjs/swagger\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserListMostActiveContributorsDto } from \"./dtos/most-active-contributors.dto\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListStatsController {\n  constructor(private readonly userListStatsService: UserListStatsService) {}\n\n  @Get(\":id/stats/most-active-contributors\")\n  @ApiOperation({\n    operationId: \"getMostActiveContributors\",\n    summary: \"Gets most active contributors for a given list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributorStat)\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get list most active contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getMostActiveContributors(\n    @Param(\"id\") id: string,\n    @Query() pageOptionsDto: UserListMostActiveContributorsDto\n  ): Promise> {\n    return this.userListStatsService.findAllListContributorStats(pageOptionsDto, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-type\")\n  @ApiOperation({\n    operationId: \"getContributionsByTimeFrame\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionStatTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeFrame(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributionsInTimeframe(options, id);\n  }\n\n  @Get(\":id/stats/contributions-by-project\")\n  @ApiOperation({\n    operationId: \"getContributionsByProject\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionsProjects })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions by project\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiQuery({ name: \"range\", type: \"integer\", required: false })\n  async getContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsByProjectDto\n  ): Promise {\n    return this.userListStatsService.findContributionsByProject(id, options);\n  }\n\n  @Get(\":id/stats/top-project-contributions-by-contributor/\")\n  @ApiOperation({\n    operationId: \"getContributorContributionsByProject\",\n    summary: \"Gets top 20 contributor stats in a list by a given project\",\n  })\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributorContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: TopProjectsDto\n  ): Promise {\n    return this.userListStatsService.findListContributorStatsByProject(options, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-contributor-type\")\n  @ApiOperation({\n    operationId: \"getContributorsByTimeframe\",\n    summary: \"Gets contributions by category within timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributorCategoryTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeframe(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributorCategoriesByTimeframe(options, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListStatsService.html":{"url":"injectables/UserListStatsService.html","title":"injectable - UserListStatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListStatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyActiveContributorsFilter\n                            \n                            \n                                    Private\n                                applyAlumniContributorsFilter\n                            \n                            \n                                    Private\n                                applyNewContributorsFilter\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllListContributorStats\n                            \n                            \n                                    Async\n                                findContributionsByProject\n                            \n                            \n                                    Async\n                                findContributionsInTimeframe\n                            \n                            \n                                    Async\n                                findContributionsInTimeframeHelper\n                            \n                            \n                                    Async\n                                findContributorCategoriesByTimeframe\n                            \n                            \n                                    Async\n                                findContributorCategoriesInTimeframeHelper\n                            \n                            \n                                    Async\n                                findListContributorStatsByProject\n                            \n                            \n                                getDateFrames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListContributorRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list-stat.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyActiveContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyActiveContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyAlumniContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyAlumniContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:462\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyNewContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyNewContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:432\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllListContributorStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllListContributorStats(pageOptionsDto: UserListMostActiveContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsByProject(listId: string, options: ContributionsByProjectDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframeHelper(startDate: string, range: number, contributorType: string, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contributorType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesByTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesInTimeframeHelper(startDate: string, range: number, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorStatsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorStatsByProject(options: TopProjectsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDateFrames\n                        \n                    \n                \n            \n            \n                \ngetDateFrames(range: number, denominator: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    denominator\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        7\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nUserModule -->\n\nTimescaleModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                        \n                            UserFollowingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            TierModule\n                        \n                        \n                            TimescaleModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbPullRequestGitHubEvents } from \"../timescale/entities/pull_request_github_event\";\nimport { TimescaleModule } from \"../timescale/timescale.module\";\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserList } from \"../user-lists/entities/user-list.entity\";\nimport { DbInsight } from \"../insight/entities/insight.entity\";\nimport { TierModule } from \"../tier/tier.module\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserFollowingController } from \"./user-following.controller\";\nimport { UserOrganizationService } from \"./user-organization.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n        DbUserOrganization,\n        DbInsight,\n        DbUserList,\n      ],\n      \"ApiConnection\"\n    ),\n    TypeOrmModule.forFeature([DbPullRequestGitHubEvents], \"TimescaleConnection\"),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n    TierModule,\n    TimescaleModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n    UserFollowingController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n  exports: [\n    UserService,\n    UserHighlightsService,\n    UserFollowService,\n    RepoService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, OmitType } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserNotification, [\"read_at\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserHighlightReactionNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReactionNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .innerJoinAndSelect(\"user_notifications.from_user\", \"from_user\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .orderBy(\"user_notifications.notified_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const notificationIds = entities\n      .filter((notification) => !notification.read_at)\n      .map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightCreated,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} created a new highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserOrganizationService.html":{"url":"injectables/UserOrganizationService.html","title":"injectable - UserOrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserOrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-organization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userOrganizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-organization.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userOrganizationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\n\n@Injectable()\nexport class UserOrganizationService {\n  constructor(\n    @InjectRepository(DbUserOrganization, \"ApiConnection\")\n    private userOrganizationRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userOrganizationRepository.createQueryBuilder(\"user_organizations\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_organizations.user\", \"user\")\n      .innerJoinAndSelect(\"user_organizations.organization_user\", \"organization_user\")\n      .where(\"user_id = :userId\", { userId })\n      .orderBy(\"user_organizations.created_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserOrgsRepoRecommendations\n                            \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserOrgsRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserOrgsRepoRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/orgs')@ApiOperation({operationId: 'findUserOrgsRepoRecommendations', summary: 'Listing recommended repos for the authenticated user based on their orgs'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n\n  @Get(\"/orgs\")\n  @ApiOperation({\n    operationId: \"findUserOrgsRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user based on their orgs\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserOrgsRepoRecommendations(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.repoService.findOrgsRecommendations(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: 'integer', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_imports\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WorkspaceController.html":{"url":"controllers/WorkspaceController.html","title":"controller - WorkspaceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WorkspaceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                workspaces\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWorkspaceForUser\n                            \n                            \n                                    Async\n                                deleteWorkspaceForUser\n                            \n                            \n                                    Async\n                                getWorkspacesForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWorkspaceForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWorkspaceForUser(userId: number, createWorkspaceDto: CreateWorkspaceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'createWorkspaceForUser', summary: 'Create a new workspace for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbWorkspace})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/workspace/workspace.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createWorkspaceDto\n                                    \n                                                CreateWorkspaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteWorkspaceForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteWorkspaceForUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteWorkspaceForUser', summary: 'Deletes a workspace for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete workspace'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/workspace/workspace.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWorkspacesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWorkspacesForUser(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getWorkspaceForUser', summary: 'Gets workspaces for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbWorkspace})@ApiNotFoundResponse({description: 'Unable to get user workspaces'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/workspace/workspace.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { WorkspaceService } from \"./workspace.service\";\nimport { DbWorkspace } from \"./entities/workspace.entity\";\nimport { CreateWorkspaceDto } from \"./dtos/create-workspace.dto\";\n\n@Controller(\"workspaces\")\n@ApiTags(\"Workspaces service\")\nexport class WorkspaceController {\n  constructor(private readonly workspaceService: WorkspaceService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getWorkspaceForUser\",\n    summary: \"Gets workspaces for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbWorkspace })\n  @ApiNotFoundResponse({ description: \"Unable to get user workspaces\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getWorkspacesForUser(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.workspaceService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"createWorkspaceForUser\",\n    summary: \"Create a new workspace for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbWorkspace })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async createWorkspaceForUser(@UserId() userId: number, @Body() createWorkspaceDto: CreateWorkspaceDto) {\n    return this.workspaceService.createWorkspace(createWorkspaceDto, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteWorkspaceForUser\",\n    summary: \"Deletes a workspace for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete workspace\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async deleteWorkspaceForUser(@Param(\"id\") id: string) {\n    return this.workspaceService.deleteWorkspace(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WorkspaceModule.html":{"url":"modules/WorkspaceModule.html","title":"module - WorkspaceModule","body":"\n                   \n\n\n\n\n    Modules\n    WorkspaceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WorkspaceModule\n\n\n\ncluster_WorkspaceModule_imports\n\n\n\ncluster_WorkspaceModule_providers\n\n\n\ncluster_WorkspaceModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nWorkspaceModule -->\n\nApiServicesModule->WorkspaceModule\n\n\n\n\n\nWorkspaceService \n\nWorkspaceService \n\nWorkspaceService  -->\n\nWorkspaceModule->WorkspaceService \n\n\n\n\n\nWorkspaceService\n\nWorkspaceService\n\nWorkspaceModule -->\n\nWorkspaceService->WorkspaceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/workspace/workspace.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WorkspaceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WorkspaceController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WorkspaceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { WorkspaceService } from \"./workspace.service\";\nimport { WorkspaceController } from \"./workspace.controller\";\nimport { DbWorkspace } from \"./entities/workspace.entity\";\nimport { DbWorkspaceMember } from \"./entities/workspace-member.entity\";\nimport { DbWorkspaceOrg } from \"./entities/workspace-org.entity\";\nimport { DbWorkspaceRepo } from \"./entities/workspace-repos.entity\";\nimport { DbWorkspaceInsight } from \"./entities/workspace-insights.entity\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    TypeOrmModule.forFeature(\n      [DbWorkspace, DbWorkspaceMember, DbWorkspaceOrg, DbWorkspaceRepo, DbWorkspaceInsight],\n      \"ApiConnection\"\n    ),\n  ],\n  controllers: [WorkspaceController],\n  providers: [WorkspaceService],\n  exports: [WorkspaceService],\n})\nexport class WorkspaceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WorkspaceService.html":{"url":"injectables/WorkspaceService.html","title":"injectable - WorkspaceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WorkspaceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                createWorkspace\n                            \n                            \n                                    Async\n                                deleteWorkspace\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(workspaceMemberRepository: Repository, workspaceRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/workspace/workspace.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        workspaceMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        workspaceRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/workspace/workspace.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWorkspace\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWorkspace(dto: CreateWorkspaceDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/workspace/workspace.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateWorkspaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteWorkspace\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteWorkspace(workspaceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/workspace/workspace.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    workspaceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/workspace/workspace.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/workspace/workspace.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbWorkspaceMember, WorkspaceMemberRoleEnum } from \"./entities/workspace-member.entity\";\nimport { DbWorkspace } from \"./entities/workspace.entity\";\nimport { CreateWorkspaceDto } from \"./dtos/create-workspace.dto\";\n\n@Injectable()\nexport class WorkspaceService {\n  constructor(\n    @InjectRepository(DbWorkspaceMember, \"ApiConnection\")\n    private workspaceMemberRepository: Repository,\n    @InjectRepository(DbWorkspace, \"ApiConnection\")\n    private workspaceRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.workspaceRepository.createQueryBuilder(\"workspaces\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"workspaces.id = :id\", { id });\n\n    const item: DbWorkspace | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"workspaces.members\", \"workspace_members\", \"workspace_members.user_id = :userId\", {\n      userId,\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async createWorkspace(dto: CreateWorkspaceDto, userId: number): Promise {\n    const newWorkspace = this.workspaceRepository.create({\n      name: dto.name,\n      description: dto.description,\n    });\n    const savedWorkspace = await this.workspaceRepository.save(newWorkspace);\n\n    /* set the calling creator as the owner (so there's always at least 1 owner by default)*/\n    const callerIsOwner = this.workspaceMemberRepository.create({\n      user_id: userId,\n      workspace_id: savedWorkspace.id,\n      role: WorkspaceMemberRoleEnum.Owner,\n    });\n\n    await this.workspaceMemberRepository.save(callerIsOwner);\n\n    const promises = dto.members.map(async (member) => {\n      const newMember = this.workspaceMemberRepository.create({\n        user_id: member.id,\n        workspace_id: savedWorkspace.id,\n        role: member.role,\n      });\n\n      return this.workspaceMemberRepository.save(newMember);\n    });\n\n    await Promise.all(promises);\n\n    return savedWorkspace;\n  }\n\n  async deleteWorkspace(workspaceId: string) {\n    return this.workspaceRepository.softDelete(workspaceId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RangeTypeEnum   (src/.../contributor-prs.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserListContributorStatsOrderEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserListContributorStatsTypeEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                        \n                            WorkspaceMemberRoleEnum   (src/.../workspace-member.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/user/dtos/contributor-prs.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RangeTypeEnum\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user-lists/dtos/most-active-contributors.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsOrderEnum\n                    \n                \n                        \n                            \n                                 commits\n                            \n                        \n                        \n                            \n                                Value : commits\n                            \n                        \n                        \n                            \n                                 prs_created\n                            \n                        \n                        \n                            \n                                Value : prs_created\n                            \n                        \n                        \n                            \n                                 total_contributions\n                            \n                        \n                        \n                            \n                                Value : total_contributions\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsTypeEnum\n                    \n                \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 new\n                            \n                        \n                        \n                            \n                                Value : new\n                            \n                        \n                        \n                            \n                                 alumni\n                            \n                        \n                        \n                            \n                                Value : alumni\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 HighlightCreated\n                            \n                        \n                        \n                            \n                                Value : highlight_created\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n    src/workspace/entities/workspace-member.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        WorkspaceMemberRoleEnum\n                    \n                \n                        \n                            \n                                 Owner\n                            \n                        \n                        \n                            \n                                Value : owner\n                            \n                        \n                        \n                            \n                                 Editor\n                            \n                        \n                        \n                            \n                                Value : editor\n                            \n                        \n                        \n                            \n                                 Viewer\n                            \n                        \n                        \n                            \n                                Value : viewer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\nOnce the database is stood up,\ncan use the dev/apply-migrations.sh script to apply all the migrations in\nthe migrations/ directory.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n🕺 OpenAPI Swagger Doc\nWhen making API changes, make sure to run npm run generate:swagger to generate any new Swagger document bits.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🍕 Pizza service integration\nThis API integrates with the pizza service\nto accept requests for ingesting commits to the database.\nThe environment variables for this are:\nPIZZA_OVEN_HOST=\"http://example.com\"\nPIZZA_OVEN_API=80🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CouponModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssueSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PizzaOvenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TimescaleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WorkspaceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_TierModule\n\n\n\ncluster_TierModule_exports\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_TimescaleModule\n\n\n\ncluster_TimescaleModule_exports\n\n\n\ncluster_TimescaleModule_providers\n\n\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_WorkspaceModule\n\n\n\ncluster_WorkspaceModule_exports\n\n\n\ncluster_WorkspaceModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nWorkspaceModule -->\n\nApiServicesModule->WorkspaceModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCouponService \n\nCouponService \n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nUserModule -->\n\nTimescaleModule->UserModule\n\n\n\nAppModule -->\n\nTimescaleModule->AppModule\n\n\n\n\n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService  -->\n\nTimescaleModule->PullRequestGithubEventsService \n\n\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\nAppModule -->\n\nWorkspaceModule->AppModule\n\n\n\n\n\nWorkspaceService \n\nWorkspaceService \n\nWorkspaceService  -->\n\nWorkspaceModule->WorkspaceService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\nPullRequestGithubEventsService\n\nPullRequestGithubEventsService\n\nTimescaleModule -->\n\nPullRequestGithubEventsService->TimescaleModule\n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\nWorkspaceService\n\nWorkspaceService\n\nWorkspaceModule -->\n\nWorkspaceService->WorkspaceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        33 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    36 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    44 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    47 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    65 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.59.0\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            DbTimescaleConfig   (src/.../timescale.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            generateSwaggerJson   (src/.../generate-swagger.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            GetPrevDateISOString   (src/.../datetimes.ts)\n                        \n                        \n                            HacktoberfestConfig   (src/.../hacktoberfest.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            PizzaConfig   (src/.../pizza.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            swaggerMarkdownDescription   (src/.../swagger.ts)\n                        \n                        \n                            TierConfig   (src/.../tier.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/timescale.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbTimescaleConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-timescale\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_TIMESCALE ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_TIMESCALE ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_TIMESCALE ?? \"5432\"),\n  username: String(process.env.TYPEORM_USERNAME_TIMESCALE ?? \"tsdbadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_TIMESCALE ?? \"password\"),\n  database: String(process.env.TYPEORM_DATABASE_TIMESCALE ?? \"tsdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_TIMESCALE ?? \"-----------------------------\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/generate-swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSwaggerJson\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  const app = await NestFactory.create(AppModule, new FastifyAdapter({ logger: false }), {\n    bufferLogs: true,\n    rawBody: true,\n  });\n\n  const apiDomain = \"api.opensauced.pizza\";\n\n  const markdownDescription = swaggerMarkdownDescription(apiDomain);\n\n  app.useLogger(app.get(Logger));\n  app.flushLogs();\n  app.enableCors();\n  app.enableVersioning({\n    type: VersioningType.URI,\n    defaultVersion: String(major(\"1.8.0\", { loose: false })),\n  });\n\n  const options = new DocumentBuilder();\n\n  options\n    .addServer(`https://${apiDomain}`, \"Production\", {})\n    .addServer(`https://beta.${apiDomain}`, \"Beta\", {})\n    .addServer(`https://alpha.${apiDomain}`, \"Alpha\", {})\n    .setTitle(`@open-sauced/api.opensauced.pizza`)\n    .setDescription(markdownDescription)\n    .setVersion(`1`)\n    .setContact(\"Open Sauced\", \"https://opensauced.pizza\", \"hello@opensauced.pizza\")\n    .setTermsOfService(\"https://github.com/open-sauced/code-of-conduct\")\n    .setLicense(`The MIT License`, `https://opensource.org/licenses/mit`)\n    .addBearerAuth();\n\n  const document = SwaggerModule.createDocument(app, options.build(), {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  });\n\n  const yamlSwaggerDoc = yaml.stringify(document);\n\n  // write the yaml swagger doc to the root project directory anytime the server starts\n  await writeFile(path.resolve(process.cwd(), \"swagger.yaml\"), yamlSwaggerDoc, \"utf8\");\n\n  await app.close();\n}\n                    \n                \n\n\n        \n    \n\n    src/common/util/datetimes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetPrevDateISOString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prev_start_date = 0): string =>\n  new Date(Date.now() - prev_start_date * 24 * 60 * 60 * 1000).toISOString()\n                    \n                \n\n\n        \n    \n\n    src/config/hacktoberfest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HacktoberfestConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"hacktoberfest\", () => ({\n  year: String(process.env.HACKTOBERFEST_YEAR ?? `${new Date().getFullYear()}`),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/pizza.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PizzaConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"pizza\", () => ({\n  host: String(process.env.PIZZA_OVEN_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.PIZZA_OVEN_PORT ?? \"80\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerMarkdownDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (apiDomain: string) => `\n## Swagger-UI API Documentation\n\nThis REST API can be used to create, read, update or delete data from the Open Sauced community platform.\nThe Swagger-UI provides useful information to get started and an overview of all available resources.\nEach API route is clickable and has their own detailed description on how to use it.\nThe base URL for the API is [${apiDomain}](https://${apiDomain}).\n\n[comment]: # (TODO: add bearer auth information)\n\n## Rate limiting\n\nEvery IP address is allowed to perform 5000 requests per hour.\nThis is measured by saving the date of the initial request and counting all requests in the next hour.\nWhen an IP address goes over the limit, HTTP status code 429 is returned.\nThe returned HTTP headers of any API request show the current rate limit status:\n\nheader | description\n--- | ---\n\\`X-RateLimit-Limit\\` | The maximum number of requests allowed per hour\n\\`X-RateLimit-Remaining\\` | The number of requests remaining in the current rate limit window\n\\`X-RateLimit-Reset\\` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)\n\n[comment]: # (TODO: add pagination information)\n\n## Common response codes\n\nEach route shows for each method which data they expect and which they will respond when the call succeeds.\nThe table below shows most common response codes you can receive from our endpoints.\n\ncode | condition\n--- | ---\n[\\`200\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [\\`GET\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data.\n[\\`201\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [\\`POST\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data.\n[\\`204\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [\\`PATCH\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [\\`DELETE\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally.\n[\\`400\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information.\n[\\`401\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information.\n[\\`403\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information.\n[\\`404\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information.\n[\\`429\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.\n\n## Additional links`\n                    \n                \n\n\n        \n    \n\n    src/config/tier.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TierConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"tier\", () => ({\n  freePlan: String(process.env.TIER_PLAN_FREE ?? \"plan:free@1\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"highlight_created\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
