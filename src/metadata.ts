/* eslint-disable */
export default async () => {
    const t = {
        ["./common/constants/order-direction.constant"]: await import("./common/constants/order-direction.constant"),
        ["./common/dtos/page-meta.dto"]: await import("./common/dtos/page-meta.dto"),
        ["./repo/dtos/repo-page-options.dto"]: await import("./repo/dtos/repo-page-options.dto"),
        ["./insight/dtos/insight-options.dto"]: await import("./insight/dtos/insight-options.dto"),
        ["./pull-requests/dtos/pull-request-page-options.dto"]: await import("./pull-requests/dtos/pull-request-page-options.dto"),
        ["./contribution/dtos/contribution-page-options.dto"]: await import("./contribution/dtos/contribution-page-options.dto"),
        ["./repo/dtos/repo-info.dto"]: await import("./repo/dtos/repo-info.dto"),
        ["./repo/entities/repo.entity"]: await import("./repo/entities/repo.entity"),
        ["./auth/dtos/supabase-auth-response.dto"]: await import("./auth/dtos/supabase-auth-response.dto"),
        ["./user/user.entity"]: await import("./user/user.entity"),
        ["./pull-requests/entities/pull-request-insight.entity"]: await import("./pull-requests/entities/pull-request-insight.entity"),
        ["./user/entities/top-users.entity"]: await import("./user/entities/top-users.entity"),
        ["./user/entities/user-highlight.entity"]: await import("./user/entities/user-highlight.entity"),
        ["./highlight/dtos/highlight-options.dto"]: await import("./highlight/dtos/highlight-options.dto"),
        ["./user/entities/user-follows.entity"]: await import("./user/entities/user-follows.entity"),
        ["./user/entities/user-collaboration.entity"]: await import("./user/entities/user-collaboration.entity"),
        ["./repo/entities/repo.to.user.votes.entity"]: await import("./repo/entities/repo.to.user.votes.entity"),
        ["./repo/entities/repo.to.user.stars.entity"]: await import("./repo/entities/repo.to.user.stars.entity"),
        ["./repo/entities/repo.to.user.stargazers.entity"]: await import("./repo/entities/repo.to.user.stargazers.entity"),
        ["./repo/entities/repo.to.user.submissions.entity"]: await import("./repo/entities/repo.to.user.submissions.entity"),
        ["./insight/entities/insight.entity"]: await import("./insight/entities/insight.entity"),
        ["./insight/entities/insight-member.entity"]: await import("./insight/entities/insight-member.entity"),
        ["./endorsement/entities/endorsement.entity"]: await import("./endorsement/entities/endorsement.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./repo/entities/repo.to.user.votes.entity"), { "DbRepoToUserVotes": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./repo/entities/repo.to.user.stars.entity"), { "DbRepoToUserStars": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./repo/entities/repo.to.user.submissions.entity"), { "DbRepoToUserSubmissions": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, is_accepted: { required: false, type: () => Boolean }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./repo/entities/repo.to.user.stargazers.entity"), { "DbRepoToUserStargazers": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./insight/entities/insight-repo.entity"), { "DbInsightRepo": { id: { required: true, type: () => Number }, insight_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, full_name: { required: true, type: () => String }, created_at: { required: false, type: () => Date }, deleted_at: { required: false, type: () => Date } } }], [import("./insight/entities/insight.entity"), { "DbInsight": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, name: { required: true, type: () => String }, is_public: { required: true, type: () => Boolean }, is_favorite: { required: true, type: () => Boolean }, short_code: { required: true, type: () => String }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, deleted_at: { required: false, type: () => Date } } }], [import("./emoji/entities/emoji.entity"), { "DbEmoji": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, url: { required: true, type: () => String }, display_order: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./user/entities/user-highlight-reaction.entity"), { "DbUserHighlightReaction": { id: { required: true, type: () => String }, highlight_id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, emoji_id: { required: true, type: () => String }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, reaction_count: { required: false, type: () => Number } } }], [import("./user/entities/user-highlight.entity"), { "DbUserHighlight": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, url: { required: false, type: () => String }, title: { required: false, type: () => String }, highlight: { required: true, type: () => String }, pinned: { required: false, type: () => Boolean }, featured: { required: false, type: () => Boolean }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, deleted_at: { required: false, type: () => Date }, shipped_at: { required: false, type: () => Date }, full_name: { required: false, type: () => String }, name: { required: false, type: () => String }, login: { required: false, type: () => String } } }], [import("./user/entities/user-top-repo.entity"), { "DbUserTopRepo": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./user/entities/user-collaboration.entity"), { "DbUserCollaboration": { id: { required: true, type: () => String }, user_id: { required: false, type: () => Number }, request_user_id: { required: false, type: () => Number }, message: { required: true, type: () => String }, status: { required: true, type: () => String }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, deleted_at: { required: false, type: () => Date }, request_emailed_at: { required: false, type: () => Date }, collaboration_emailed_at: { required: false, type: () => Date } } }], [import("./user/user.entity"), { "DbUser": { id: { required: true, type: () => Number }, open_issues: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, first_opened_pr_at: { required: false, type: () => Date }, first_pushed_commit_at: { required: false, type: () => Date }, connected_at: { required: false, type: () => Date }, node_id: { required: true, type: () => String }, avatar_url: { required: true, type: () => String }, gravatar_id: { required: false, type: () => String }, url: { required: false, type: () => String }, login: { required: true, type: () => String }, email: { required: true, type: () => String }, is_private: { required: true, type: () => Boolean }, is_open_sauced_member: { required: true, type: () => Boolean }, is_onboarded: { required: true, type: () => Boolean }, is_waitlisted: { required: true, type: () => Boolean }, role: { required: true, type: () => Number }, bio: { required: false, type: () => String }, blog: { required: false, type: () => String }, name: { required: false, type: () => String }, twitter_username: { required: false, type: () => String }, linkedin_url: { required: false, type: () => String }, github_sponsors_url: { required: false, type: () => String }, company: { required: false, type: () => String }, location: { required: false, type: () => String }, display_local_time: { required: false, type: () => Boolean }, interests: { required: false, type: () => String }, hireable: { required: false, type: () => Boolean }, public_repos: { required: true, type: () => Number }, public_gists: { required: true, type: () => Number }, followers: { required: true, type: () => Number }, following: { required: true, type: () => Number }, type: { required: true, type: () => String }, display_email: { required: false, type: () => Boolean }, receive_collaboration: { required: false, type: () => Boolean }, timezone: { required: false, type: () => String }, languages: { required: true, type: () => Object }, notification_count: { required: true, type: () => Number }, highlights_count: { required: true, type: () => Number }, following_count: { required: true, type: () => Number }, followers_count: { required: true, type: () => Number }, recent_pull_requests_count: { required: true, type: () => Number }, recent_pull_request_velocity_count: { required: true, type: () => Number } } }], [import("./contribution/contribution.entity"), { "DbContribution": { id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, count: { required: true, type: () => Number }, last_merged_at: { required: true, type: () => Date }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, contributor: { required: true, type: () => String }, url: { required: true, type: () => String } } }], [import("./repo/entities/repo.entity"), { "DbRepo": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, size: { required: true, type: () => Number }, issues: { required: true, type: () => Number }, stars: { required: true, type: () => Number }, forks: { required: true, type: () => Number }, watchers: { required: true, type: () => Number }, subscribers: { required: true, type: () => Number }, network: { required: true, type: () => Number }, is_fork: { required: true, type: () => Boolean }, is_private: { required: true, type: () => Boolean }, is_template: { required: true, type: () => Boolean }, is_archived: { required: true, type: () => Boolean }, is_disabled: { required: true, type: () => Boolean }, has_issues: { required: true, type: () => Boolean }, has_projects: { required: true, type: () => Boolean }, has_downloads: { required: true, type: () => Boolean }, has_wiki: { required: true, type: () => Boolean }, has_pages: { required: true, type: () => Boolean }, has_discussions: { required: true, type: () => Boolean }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, pushed_at: { required: false, type: () => Date }, default_branch: { required: true, type: () => String }, node_id: { required: true, type: () => String }, git_url: { required: true, type: () => String }, ssh_url: { required: true, type: () => String }, clone_url: { required: true, type: () => String }, svn_url: { required: true, type: () => String }, mirror_url: { required: false, type: () => String }, name: { required: true, type: () => String }, full_name: { required: true, type: () => String }, description: { required: true, type: () => String }, language: { required: true, type: () => String }, license: { required: true, type: () => String }, url: { required: true, type: () => String }, homepage: { required: true, type: () => String }, topics: { required: true, type: () => [String] }, open_prs_count: { required: false, type: () => Number }, closed_prs_count: { required: false, type: () => Number }, merged_prs_count: { required: false, type: () => Number }, draft_prs_count: { required: false, type: () => Number }, spam_prs_count: { required: false, type: () => Number }, pr_velocity_count: { required: false, type: () => Number }, pr_active_count: { required: false, type: () => Number } } }], [import("./common/dtos/page-options.dto"), { "PageOptionsDto": { page: { required: false, type: () => Number, default: 1 }, limit: { required: false, type: () => Number, default: 50 }, orderDirection: { required: false, enum: t["./common/constants/order-direction.constant"].OrderDirectionEnum }, range: { required: false, type: () => Number, default: 30 } } }], [import("./common/dtos/page-meta.dto"), { "PageMetaDto": { page: { required: true, type: () => Number }, limit: { required: true, type: () => Number }, itemCount: { required: true, type: () => Number }, pageCount: { required: true, type: () => Number }, hasPreviousPage: { required: true, type: () => Boolean }, hasNextPage: { required: true, type: () => Boolean } } }], [import("./common/dtos/page.dto"), { "PageDto": { data: { required: true }, meta: { required: true, type: () => t["./common/dtos/page-meta.dto"].PageMetaDto } } }], [import("./repo/dtos/repo-page-options.dto"), { "RepoPageOptionsDto": { orderBy: { required: false, enum: t["./repo/dtos/repo-page-options.dto"].RepoOrderFieldsEnum } } }], [import("./insight/dtos/insight-options.dto"), { "InsightOptionsDto": { filter: { required: false, enum: t["./insight/dtos/insight-options.dto"].InsightFilterFieldsEnum }, repo: { required: false, type: () => String }, topic: { required: false, type: () => String, default: "javscript" }, repoIds: { required: false, type: () => String } } }], [import("./common/dtos/filter-options.dto"), { "FilterOptionsDto": { filter: { required: false, enum: t["./insight/dtos/insight-options.dto"].InsightFilterFieldsEnum }, topic: { required: false, type: () => String }, repo: { required: false, type: () => String }, repoIds: { required: false, type: () => String } } }], [import("./repo/dtos/repo-search-options.dto"), { "RepoSearchOptionsDto": { filter: { required: false, enum: t["./insight/dtos/insight-options.dto"].InsightFilterFieldsEnum }, repo: { required: false, type: () => String }, topic: { required: false, type: () => String }, repoIds: { required: false, type: () => String } } }], [import("./auth/dtos/supabase-auth-response.dto"), { "SupabaseAuthDto": { id: { required: true, type: () => String }, user_name: { required: false, type: () => String }, role: { required: false, type: () => String }, email: { required: false, type: () => String }, confirmed_at: { required: false, type: () => String }, last_sign_in_at: { required: false, type: () => String }, created_at: { required: false, type: () => String }, updated_at: { required: false, type: () => String }, is_onboarded: { required: false, type: () => Boolean }, is_waitlisted: { required: false, type: () => Boolean }, insights_role: { required: false, type: () => Number }, bio: { required: false, type: () => String }, name: { required: false, type: () => String }, url: { required: false, type: () => String }, twitter_username: { required: false, type: () => String }, company: { required: false, type: () => String }, location: { required: false, type: () => String }, display_local_time: { required: false, type: () => Boolean }, linkedin_url: { required: false, type: () => String }, github_sponsors_url: { required: false, type: () => String }, notification_count: { required: false, type: () => Number } } }], [import("./user/dtos/update-user.dto"), { "UpdateUserDto": { name: { required: true, type: () => String }, email: { required: true, type: () => String }, bio: { required: false, type: () => String }, url: { required: false, type: () => String }, twitter_username: { required: false, type: () => String }, company: { required: false, type: () => String }, location: { required: false, type: () => String }, display_local_time: { required: false, type: () => Boolean }, timezone: { required: false, type: () => String }, linkedin_url: { required: false, type: () => String }, github_sponsors_url: { required: false, type: () => String } } }], [import("./user/dtos/update-user-interests.dto"), { "UpdateUserProfileInterestsDto": { interests: { required: true, type: () => [String] } } }], [import("./user/dtos/update-user-email-prefs.dto"), { "UpdateUserEmailPreferencesDto": { display_email: { required: true, type: () => Boolean }, receive_collaboration: { required: true, type: () => Boolean } } }], [import("./auth/dtos/user-onboarding.dto"), { "UserOnboardingDto": { interests: { required: true, type: () => [String] }, timezone: { required: true, type: () => String } } }], [import("./user/entities/top-users.entity"), { "DbTopUser": { login: { required: false, type: () => String } } }], [import("./customer/customer.entity"), { "DbCustomer": { id: { required: true, type: () => Number }, stripe_customer_id: { required: true, type: () => String } } }], [import("./pull-requests/entities/pull-request-insight.entity"), { "DbPRInsight": { id: { required: true, type: () => Number }, interval: { required: true, type: () => Number }, day: { required: true, type: () => Number }, all_prs: { required: true, type: () => Number }, accepted_prs: { required: true, type: () => Number }, spam_prs: { required: true, type: () => Number } } }], [import("./pull-requests/entities/pull-request.entity"), { "DbPullRequest": { id: { required: true, type: () => Number }, number: { required: true, type: () => Number }, state: { required: true, type: () => String }, draft: { required: true, type: () => Boolean }, merged: { required: true, type: () => Boolean }, mergeable: { required: true, type: () => Boolean }, rebaseable: { required: true, type: () => Boolean }, title: { required: true, type: () => String }, source_label: { required: false, type: () => String }, target_label: { required: false, type: () => String }, source_branch: { required: false, type: () => String }, target_branch: { required: false, type: () => String }, labels: { required: false, type: () => String }, label_names: { required: false, type: () => [String] }, author_login: { required: true, type: () => String }, author_avatar: { required: true, type: () => String }, assignee_login: { required: false, type: () => String }, assignee_avatar: { required: false, type: () => String }, created_at: { required: false, type: () => Date }, closed_at: { required: false, type: () => Date }, merged_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, last_updated_at: { required: false, type: () => Date }, comments: { required: false, type: () => Number }, additions: { required: false, type: () => Number }, deletions: { required: false, type: () => Number }, changed_files: { required: false, type: () => Number }, full_name: { required: false, type: () => String } } }], [import("./pull-requests/dtos/pull-request-page-options.dto"), { "PullRequestPageOptionsDto": { orderBy: { required: false, enum: t["./pull-requests/dtos/pull-request-page-options.dto"].PullRequestOrderFieldsEnum }, filter: { required: false, enum: t["./insight/dtos/insight-options.dto"].InsightFilterFieldsEnum }, topic: { required: false, type: () => String }, repo: { required: false, type: () => String }, repoIds: { required: false, type: () => String }, status: { required: false, enum: t["./pull-requests/dtos/pull-request-page-options.dto"].PullRequestStatusEnum }, contributor: { required: false, type: () => String } } }], [import("./pull-requests/dtos/pull-request-contributor.dto"), { "DbPullRequestContributor": { author_login: { required: true, type: () => String }, updated_at: { required: false, type: () => Date } } }], [import("./pull-requests/dtos/pull-request-contributor-options.dto"), { "PullRequestContributorOptionsDto": { filter: { required: false, enum: t["./insight/dtos/insight-options.dto"].InsightFilterFieldsEnum }, topic: { required: false, type: () => String }, repo: { required: false, type: () => String }, repoIds: { required: false, type: () => String } } }], [import("./pull-requests/dtos/create-pull-request-description.dto"), { "GeneratePullRequestDescriptionDto": { descriptionLength: { required: true, type: () => Number }, temperature: { required: true, type: () => Number }, tone: { required: true, type: () => String }, language: { required: true, type: () => String }, diff: { required: false, type: () => String }, commitMessages: { required: false, type: () => [String] } } }], [import("./pull-requests/dtos/create-code-refactor-suggestion.dto"), { "GenerateCodeRefactorSuggestionDto": { descriptionLength: { required: true, type: () => Number }, temperature: { required: true, type: () => Number }, language: { required: true, type: () => String }, code: { required: true, type: () => String } } }], [import("./pull-requests/dtos/create-code-test-suggestion.dto"), { "GenerateCodeTestSuggestionDto": { descriptionLength: { required: true, type: () => Number }, temperature: { required: true, type: () => Number }, code: { required: true, type: () => String } } }], [import("./pull-requests/dtos/create-code-explanation.dto"), { "GenerateCodeExplanationDto": { descriptionLength: { required: true, type: () => Number }, temperature: { required: true, type: () => Number }, language: { required: true, type: () => String }, code: { required: true, type: () => String } } }], [import("./user/dtos/create-user-highlight.dto"), { "CreateUserHighlightDto": { url: { required: true, type: () => String }, title: { required: false, type: () => String }, highlight: { required: true, type: () => String }, shipped_at: { required: false, type: () => String } } }], [import("./highlight/dtos/highlight-options.dto"), { "HighlightOptionsDto": { repo: { required: false, type: () => String } }, "DbUserHighlightReactionResponse": {} }], [import("./user/entities/user-notification.entity"), { "DbUserNotification": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, from_user_id: { required: false, type: () => Number }, type: { required: true, type: () => String }, message: { required: false, type: () => String }, notified_at: { required: false, type: () => Date }, read_at: { required: false, type: () => Date }, meta_id: { required: false, type: () => String } } }], [import("./highlight/entities/user-highlight-repo.entity"), { "DbUserHighlightRepo": { full_name: { required: false, type: () => String } } }], [import("./user/entities/user-follows.entity"), { "DbUserToUserFollows": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, following_user_id: { required: true, type: () => Number }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date } } }], [import("./user/dtos/create-user-collaboration.dto"), { "CreateUserCollaborationDto": { username: { required: true, type: () => String }, message: { required: true, type: () => String } } }], [import("./user/dtos/update-user-collaboration.dto"), { "UpdateUserCollaborationDto": { status: { required: true, type: () => String } } }], [import("./endorsement/dto/create-endorsement.dto"), { "CreateEndorsementDto": { creator_user_id: { required: true, type: () => Number }, recipient_user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, source_comment_url: { required: false, type: () => String }, source_context_url: { required: true, type: () => String }, type: { required: true, type: () => String } } }], [import("./endorsement/entities/endorsement.entity"), { "DbEndorsement": { id: { required: true, type: () => String }, creator_user_id: { required: false, type: () => Number }, recipient_user_id: { required: false, type: () => Number }, repo_id: { required: true, type: () => Number }, source_comment_url: { required: false, type: () => String }, source_context_url: { required: true, type: () => String }, type: { required: true, type: () => String }, created_at: { required: false, type: () => Date } } }], [import("./user-repo/user-repo.entity"), { "DbUserRepo": { id: { required: true, type: () => Number }, user_id: { required: true, type: () => Number }, repo_id: { required: true, type: () => Number }, full_name: { required: true, type: () => String }, created_at: { required: false, type: () => Date } } }], [import("./user-repo/dtos/user-repo-options.dto"), { "UserRepoOptionsDto": {} }], [import("./repo/dtos/repo-info.dto"), { "RepoInfo": { id: { required: true, type: () => Number }, fullName: { required: true, type: () => String } } }], [import("./contribution/dtos/contribution-page-options.dto"), { "ContributionPageOptionsDto": { orderBy: { required: false, enum: t["./contribution/dtos/contribution-page-options.dto"].ContributionOrderFieldsEnum } } }], [import("./insight/entities/insight-member.entity"), { "DbInsightMember": { id: { required: true, type: () => String }, insight_id: { required: true, type: () => Number }, user_id: { required: false, type: () => Number }, name: { required: false, type: () => String }, access: { required: true, type: () => String }, created_at: { required: false, type: () => Date }, updated_at: { required: false, type: () => Date }, deleted_at: { required: false, type: () => Date }, invitation_emailed_at: { required: false, type: () => Date }, invitation_email: { required: false, type: () => String } } }], [import("./insight/dtos/create-insight.dto"), { "CreateInsightDto": { name: { required: true, type: () => String }, is_public: { required: true, type: () => Boolean }, repos: { required: true, type: () => [t["./repo/dtos/repo-info.dto"].RepoInfo] } } }], [import("./insight/dtos/update-insight.dto"), { "UpdateInsightDto": {} }], [import("./insight/dtos/insight-page-options.dto"), { "InsightPageOptionsDto": {} }], [import("./insight/dtos/create-insight-member.dto"), { "CreateInsightMemberDto": { email: { required: true, type: () => String } } }], [import("./insight/dtos/update-insight-member.dto"), { "UpdateInsightMemberDto": { access: { required: true, type: () => String } } }], [import("./subscription/stripe-subscription.dto"), { "DbSubscription": { id: { required: true, type: () => String }, user_id: { required: true, type: () => Number }, status: { required: true, type: () => String }, price_id: { required: true, type: () => String }, quantity: { required: true, type: () => Number }, cancel_at_period_end: { required: true, type: () => Boolean }, created_at: { required: false, type: () => Date }, current_period_start_at: { required: false, type: () => Date }, current_period_end_at: { required: false, type: () => Date }, ended_at: { required: false, type: () => Date }, cancel_at: { required: false, type: () => Date }, canceled_at: { required: false, type: () => Date }, trial_start_at: { required: false, type: () => Date }, trial_end_at: { required: false, type: () => Date } } }], [import("./endorsement/dto/update-endorsement.dto"), { "UpdateEndorsementDto": {} }], [import("./log/log.entity"), { "DbLog": { id: { required: true, type: () => String }, context: { required: true, type: () => String }, message: { required: true, type: () => String }, level: { required: true, type: () => String }, created_at: { required: true, type: () => Date } } }], [import("./log/dtos/create-log.dto"), { "CreateLogDto": { context: { required: false, type: () => String }, message: { required: false, type: () => String }, level: { required: false, type: () => String } } }], [import("./user-repo/dtos/user-repos.dto"), { "UserRepoOptionsDto": { ids: { required: true, type: () => [Number] } } }]], "controllers": [[import("./repo/repo.controller"), { "RepoController": { "findOneById": { type: t["./repo/entities/repo.entity"].DbRepo }, "findOneByOwnerAndRepo": { type: t["./repo/entities/repo.entity"].DbRepo }, "findAll": {}, "findAllReposWithFilters": {} } }], [import("./health/health.controller"), { "HealthController": { "service": { type: Object }, "web": { type: Object } } }], [import("./auth/auth.controller"), { "AuthController": { "getSession": { type: t["./auth/dtos/supabase-auth-response.dto"].SupabaseAuthDto }, "postOnboarding": {}, "postWaitlist": {}, "postCreateCheckoutSession": {}, "updateProfileForUser": { type: t["./user/user.entity"].DbUser }, "updateInterestsForUserProfile": { type: t["./user/user.entity"].DbUser }, "updateEmailPreferencesForUserProfile": { type: t["./user/user.entity"].DbUser } } }], [import("./pull-requests/pull-request.controller"), { "PullRequestController": { "listAllPullRequests": {}, "searchAllPullRequests": {}, "getPullRequestInsights": { type: [t["./pull-requests/entities/pull-request-insight.entity"].DbPRInsight] } } }], [import("./pull-requests/pull-request-description.controller"), { "PullRequestDescriptionController": { "generatePRDescription": {} } }], [import("./pull-requests/code-refactor-suggestion.controller"), { "CodeRefactorSuggestionController": { "generatePRDescription": {} } }], [import("./pull-requests/code-test.suggestion.controller"), { "CodeTestSuggestionController": { "generatePRDescription": {} } }], [import("./pull-requests/code-explanation.controller"), { "CodeExplanationController": { "generatePRDescription": {} } }], [import("./user/user.controller"), { "UserController": { "findOneUserById": { type: t["./user/user.entity"].DbUser }, "findContributorPullRequests": {}, "findAllHighlightsByUsername": {}, "findAllTopReposByUsername": {}, "getTopUsers": { type: [t["./user/entities/top-users.entity"].DbTopUser] } } }], [import("./user/user-highlight.controller"), { "UserHighlightsController": { "addInsightForUser": { type: t["./user/entities/user-highlight.entity"].DbUserHighlight }, "getUserHighlight": { type: t["./user/entities/user-highlight.entity"].DbUserHighlight }, "updateHighlightForUser": { type: t["./user/entities/user-highlight.entity"].DbUserHighlight }, "deleteHighlightForUser": {}, "getAllHighlightUserReactions": { type: [t["./highlight/dtos/highlight-options.dto"].DbUserHighlightReactionResponse] }, "addHighlightReactionForUser": {}, "deleteHighlightReactionForUser": {}, "getFollowingHighlights": {}, "getFollowingHighlightRepos": {} } }], [import("./user/user-follow.controller"), { "UserFollowsController": { "getFollowStatusByUsername": { type: t["./user/entities/user-follows.entity"].DbUserToUserFollows }, "followUserByUsername": { type: t["./user/entities/user-follows.entity"].DbUserToUserFollows }, "unfollowUserByUserId": { type: t["./user/entities/user-follows.entity"].DbUserToUserFollows } } }], [import("./user/user-notification.controller"), { "UserNotificationController": { "getUserNotifications": {} } }], [import("./user/user-collaboration.controller"), { "UserCollaborationController": { "findAllUserCollaborations": {}, "addUserCollaboration": { type: t["./user/entities/user-collaboration.entity"].DbUserCollaboration }, "updateUserCollaboration": { type: t["./user/entities/user-collaboration.entity"].DbUserCollaboration }, "removeUserCollaborationById": {} } }], [import("./user/user-endorsement.controller"), { "UserEndorsementController": { "findAllUserCreatedEndorsements": {}, "findAllUserReceivedEndorsements": {} } }], [import("./user/user-recommendation.controller"), { "UserRecommendationController": { "findUserRepoRecommendations": { type: Object } } }], [import("./vote/repo-vote.controller"), { "RepoVoteController": { "findAllUserVoted": {}, "voteOneById": { type: t["./repo/entities/repo.to.user.votes.entity"].DbRepoToUserVotes }, "voteOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.votes.entity"].DbRepoToUserVotes }, "downVoteOneById": { type: t["./repo/entities/repo.to.user.votes.entity"].DbRepoToUserVotes }, "downVoteOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.votes.entity"].DbRepoToUserVotes } } }], [import("./star/repo-star.controller"), { "RepoStarController": { "findAllUserStarred": {}, "starOneById": { type: t["./repo/entities/repo.to.user.stars.entity"].DbRepoToUserStars }, "starOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.stars.entity"].DbRepoToUserStars }, "downStarOneById": { type: t["./repo/entities/repo.to.user.stars.entity"].DbRepoToUserStars }, "downStarOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.stars.entity"].DbRepoToUserStars } } }], [import("./stargaze/repo-stargaze.controller"), { "RepoStargazeController": { "findAllUserStargazed": {}, "stargazeOneById": { type: t["./repo/entities/repo.to.user.stargazers.entity"].DbRepoToUserStargazers }, "stargazeOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.stargazers.entity"].DbRepoToUserStargazers }, "downStargazeOneById": { type: t["./repo/entities/repo.to.user.stargazers.entity"].DbRepoToUserStargazers }, "downStargazeOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.stargazers.entity"].DbRepoToUserStargazers } } }], [import("./submit/repo-submit.controller"), { "RepoSubmitController": { "findAllUserSubmitted": {}, "submitOneById": { type: t["./repo/entities/repo.to.user.submissions.entity"].DbRepoToUserSubmissions }, "submitOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.submissions.entity"].DbRepoToUserSubmissions }, "downSubmitOneById": { type: t["./repo/entities/repo.to.user.submissions.entity"].DbRepoToUserSubmissions }, "downSubmitOneByOwnerAndRepo": { type: t["./repo/entities/repo.to.user.submissions.entity"].DbRepoToUserSubmissions } } }], [import("./contribution/repo-contributions.controller"), { "RepoContributionsController": { "findAllByRepoId": {}, "findAllByOwnerAndRepo": {} } }], [import("./insight/insight.controller"), { "InsightController": { "findInsightPageById": { type: t["./insight/entities/insight.entity"].DbInsight }, "removeInsightForUser": {} } }], [import("./insight/user-insight.controller"), { "UserInsightsController": { "findAllInsightsByUserId": {}, "addInsightForUser": { type: t["./insight/entities/insight.entity"].DbInsight }, "updateInsightForUser": { type: t["./insight/entities/insight.entity"].DbInsight } } }], [import("./insight/user-insight-member.controller"), { "UserInsightMemberController": { "findAllInsightsByUserId": {}, "addInsightMember": { type: t["./insight/entities/insight-member.entity"].DbInsightMember }, "updateInsightMember": { type: t["./insight/entities/insight-member.entity"].DbInsightMember }, "removeInsightMemberById": {} } }], [import("./stripe-webhook/stripe-webhook.controller"), { "StripeWebhookController": { "handleStripeWebhook": {} } }], [import("./emoji/emoji.controller"), { "EmojiController": { "findAllEmojis": {} } }], [import("./highlight/highlight.controller"), { "HighlightController": { "findAllHighlights": {}, "findAllFeaturedHighlights": {}, "featureHighlight": { type: Object }, "unfeatureHighlight": { type: Object }, "findAllHighlightRepos": {}, "getAllHighlightReactions": { type: [t["./highlight/dtos/highlight-options.dto"].DbUserHighlightReactionResponse] } } }], [import("./endorsement/endorsement.controller"), { "EndorsementController": { "createEndorsement": { type: Object }, "findAllEndorsements": {}, "findAllByRepoOwnerOrUsername": {}, "findAllEndorsementsByRepo": {}, "findEndorsementById": { description: "operationId: \"findAllEndorsementsByRepoByUser\",\nsummary: \"Finds all endorsements by repo owner grouped by user\",\n})\n\nasync findAllEndorsementsByRepoByUser (\n\n\n\n) {\nreturn this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n}", type: t["./endorsement/entities/endorsement.entity"].DbEndorsement }, "findAllUserCreatedEndorsements": {}, "findAllUserReceivedEndorsements": {}, "deleteEndoresementById": {} } }], [import("./contributor/contributor.controller"), { "ContributorController": { "searchAllPullRequestContributors": {} } }]] } };
};